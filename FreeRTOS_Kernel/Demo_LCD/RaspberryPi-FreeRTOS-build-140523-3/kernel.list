
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <reset_handler>
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <undefined_handler>
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <swi_handler>
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <prefetch_handler>
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <data_handler>
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <unused_handler>
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <irq_handler>
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <fiq_handler>

00008020 <reset_handler>:
    8020:	00008040 	andeq	r8, r0, r0, asr #32

00008024 <undefined_handler>:
    8024:	000142f8 	strdeq	r4, [r1], -r8

00008028 <swi_handler>:
    8028:	000103cc 	andeq	r0, r1, ip, asr #7

0000802c <prefetch_handler>:
    802c:	000142fc 	strdeq	r4, [r1], -ip

00008030 <data_handler>:
    8030:	00014300 	andeq	r4, r1, r0, lsl #6

00008034 <unused_handler>:
    8034:	00014304 	andeq	r4, r1, r4, lsl #6

00008038 <irq_handler>:
    8038:	0001047c 	andeq	r0, r1, ip, ror r4

0000803c <fiq_handler>:
    803c:	00014308 	andeq	r4, r1, r8, lsl #6

00008040 <reset>:
    8040:	e3a00902 	mov	r0, #32768	; 0x8000
    8044:	e3a01000 	mov	r1, #0
    8048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    804c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8058:	e3a000d2 	mov	r0, #210	; 0xd2
    805c:	e121f000 	msr	CPSR_c, r0
    8060:	e3a0d902 	mov	sp, #32768	; 0x8000
    8064:	e3a000d1 	mov	r0, #209	; 0xd1
    8068:	e121f000 	msr	CPSR_c, r0
    806c:	e3a0d901 	mov	sp, #16384	; 0x4000
    8070:	e3a000d3 	mov	r0, #211	; 0xd3
    8074:	e121f000 	msr	CPSR_c, r0
    8078:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    807c:	e59f0018 	ldr	r0, [pc, #24]	; 809c <zero_loop+0x14>
    8080:	e59f1018 	ldr	r1, [pc, #24]	; 80a0 <zero_loop+0x18>
    8084:	e3a02000 	mov	r2, #0

00008088 <zero_loop>:
    8088:	e1500001 	cmp	r0, r1
    808c:	b4802004 	strlt	r2, [r0], #4
    8090:	bafffffc 	blt	8088 <zero_loop>
    8094:	eb002de0 	bl	1381c <DisableInterrupts>
    8098:	ea0030bc 	b	14390 <main>
    809c:	00014720 	andeq	r4, r1, r0, lsr #14
    80a0:	00015af8 	strdeq	r5, [r1], -r8

Disassembly of section .text:

00010000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   10000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10004:	e28db000 	add	fp, sp, #0
   10008:	e24dd01c 	sub	sp, sp, #28
   1000c:	e50b0010 	str	r0, [fp, #-16]
   10010:	e50b1014 	str	r1, [fp, #-20]
   10014:	e50b2018 	str	r2, [fp, #-24]
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   10018:	e51b3010 	ldr	r3, [fp, #-16]
   1001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   10020:	e51b3010 	ldr	r3, [fp, #-16]
   10024:	e2433004 	sub	r3, r3, #4
   10028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   1002c:	e51b3014 	ldr	r3, [fp, #-20]
   10030:	e2832004 	add	r2, r3, #4
   10034:	e51b3010 	ldr	r3, [fp, #-16]
   10038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1003c:	e51b3010 	ldr	r3, [fp, #-16]
   10040:	e2433004 	sub	r3, r3, #4
   10044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   10048:	e51b3010 	ldr	r3, [fp, #-16]
   1004c:	e59f21b8 	ldr	r2, [pc, #440]	; 1020c <pxPortInitialiseStack+0x20c>
   10050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10054:	e51b3010 	ldr	r3, [fp, #-16]
   10058:	e2433004 	sub	r3, r3, #4
   1005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   10060:	e51b2008 	ldr	r2, [fp, #-8]
   10064:	e51b3010 	ldr	r3, [fp, #-16]
   10068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1006c:	e51b3010 	ldr	r3, [fp, #-16]
   10070:	e2433004 	sub	r3, r3, #4
   10074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   10078:	e51b3010 	ldr	r3, [fp, #-16]
   1007c:	e59f218c 	ldr	r2, [pc, #396]	; 10210 <pxPortInitialiseStack+0x210>
   10080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10084:	e51b3010 	ldr	r3, [fp, #-16]
   10088:	e2433004 	sub	r3, r3, #4
   1008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   10090:	e51b3010 	ldr	r3, [fp, #-16]
   10094:	e59f2178 	ldr	r2, [pc, #376]	; 10214 <pxPortInitialiseStack+0x214>
   10098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1009c:	e51b3010 	ldr	r3, [fp, #-16]
   100a0:	e2433004 	sub	r3, r3, #4
   100a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   100a8:	e51b3010 	ldr	r3, [fp, #-16]
   100ac:	e59f2164 	ldr	r2, [pc, #356]	; 10218 <pxPortInitialiseStack+0x218>
   100b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100b4:	e51b3010 	ldr	r3, [fp, #-16]
   100b8:	e2433004 	sub	r3, r3, #4
   100bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   100c0:	e51b3010 	ldr	r3, [fp, #-16]
   100c4:	e59f2150 	ldr	r2, [pc, #336]	; 1021c <pxPortInitialiseStack+0x21c>
   100c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100cc:	e51b3010 	ldr	r3, [fp, #-16]
   100d0:	e2433004 	sub	r3, r3, #4
   100d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   100d8:	e51b3010 	ldr	r3, [fp, #-16]
   100dc:	e59f213c 	ldr	r2, [pc, #316]	; 10220 <pxPortInitialiseStack+0x220>
   100e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100e4:	e51b3010 	ldr	r3, [fp, #-16]
   100e8:	e2433004 	sub	r3, r3, #4
   100ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   100f0:	e51b3010 	ldr	r3, [fp, #-16]
   100f4:	e59f2128 	ldr	r2, [pc, #296]	; 10224 <pxPortInitialiseStack+0x224>
   100f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100fc:	e51b3010 	ldr	r3, [fp, #-16]
   10100:	e2433004 	sub	r3, r3, #4
   10104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   10108:	e51b3010 	ldr	r3, [fp, #-16]
   1010c:	e59f2114 	ldr	r2, [pc, #276]	; 10228 <pxPortInitialiseStack+0x228>
   10110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10114:	e51b3010 	ldr	r3, [fp, #-16]
   10118:	e2433004 	sub	r3, r3, #4
   1011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   10120:	e51b3010 	ldr	r3, [fp, #-16]
   10124:	e59f2100 	ldr	r2, [pc, #256]	; 1022c <pxPortInitialiseStack+0x22c>
   10128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1012c:	e51b3010 	ldr	r3, [fp, #-16]
   10130:	e2433004 	sub	r3, r3, #4
   10134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   10138:	e51b3010 	ldr	r3, [fp, #-16]
   1013c:	e59f20ec 	ldr	r2, [pc, #236]	; 10230 <pxPortInitialiseStack+0x230>
   10140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10144:	e51b3010 	ldr	r3, [fp, #-16]
   10148:	e2433004 	sub	r3, r3, #4
   1014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   10150:	e51b3010 	ldr	r3, [fp, #-16]
   10154:	e59f20d8 	ldr	r2, [pc, #216]	; 10234 <pxPortInitialiseStack+0x234>
   10158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1015c:	e51b3010 	ldr	r3, [fp, #-16]
   10160:	e2433004 	sub	r3, r3, #4
   10164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   10168:	e51b3010 	ldr	r3, [fp, #-16]
   1016c:	e59f20c4 	ldr	r2, [pc, #196]	; 10238 <pxPortInitialiseStack+0x238>
   10170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10174:	e51b3010 	ldr	r3, [fp, #-16]
   10178:	e2433004 	sub	r3, r3, #4
   1017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   10180:	e51b3010 	ldr	r3, [fp, #-16]
   10184:	e59f20b0 	ldr	r2, [pc, #176]	; 1023c <pxPortInitialiseStack+0x23c>
   10188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1018c:	e51b3010 	ldr	r3, [fp, #-16]
   10190:	e2433004 	sub	r3, r3, #4
   10194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   10198:	e51b2018 	ldr	r2, [fp, #-24]
   1019c:	e51b3010 	ldr	r3, [fp, #-16]
   101a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   101a4:	e51b3010 	ldr	r3, [fp, #-16]
   101a8:	e2433004 	sub	r3, r3, #4
   101ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   101b0:	e51b3010 	ldr	r3, [fp, #-16]
   101b4:	e3a0201f 	mov	r2, #31
   101b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   101bc:	e51b3014 	ldr	r3, [fp, #-20]
   101c0:	e2033001 	and	r3, r3, #1
   101c4:	e3530000 	cmp	r3, #0
   101c8:	0a000004 	beq	101e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   101cc:	e51b3010 	ldr	r3, [fp, #-16]
   101d0:	e5933000 	ldr	r3, [r3]
   101d4:	e3832020 	orr	r2, r3, #32
   101d8:	e51b3010 	ldr	r3, [fp, #-16]
   101dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   101e0:	e51b3010 	ldr	r3, [fp, #-16]
   101e4:	e2433004 	sub	r3, r3, #4
   101e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   101ec:	e51b3010 	ldr	r3, [fp, #-16]
   101f0:	e3a02000 	mov	r2, #0
   101f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   101f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   101fc:	e1a00003 	mov	r0, r3
   10200:	e24bd000 	sub	sp, fp, #0
   10204:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10208:	e12fff1e 	bx	lr
   1020c:	aaaaaaaa 	bge	feabacbc <_estack+0xf6aaacbc>
   10210:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
   10214:	11111111 	tstne	r1, r1, lsl r1
   10218:	10101010 	andsne	r1, r0, r0, lsl r0
   1021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   10220:	08080808 	stmdaeq	r8, {r3, fp}
   10224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   10228:	06060606 	streq	r0, [r6], -r6, lsl #12
   1022c:	05050505 	streq	r0, [r5, #-1285]	; 0x505
   10230:	04040404 	streq	r0, [r4], #-1028	; 0x404
   10234:	03030303 	movweq	r0, #13059	; 0x3303
   10238:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
   1023c:	01010101 	tsteq	r1, r1, lsl #2

00010240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   10240:	e92d4800 	push	{fp, lr}
   10244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   10248:	eb000015 	bl	102a4 <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   1024c:	eb000039 	bl	10338 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   10250:	e3a03000 	mov	r3, #0
}
   10254:	e1a00003 	mov	r0, r3
   10258:	e8bd8800 	pop	{fp, pc}

0001025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   1025c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   10264:	e24bd000 	sub	sp, fp, #0
   10268:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1026c:	e12fff1e 	bx	lr

00010270 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR(int nIRQ, void *pParam )
{
   10270:	e92d4800 	push	{fp, lr}
   10274:	e28db004 	add	fp, sp, #4
   10278:	e24dd008 	sub	sp, sp, #8
   1027c:	e50b0008 	str	r0, [fp, #-8]
   10280:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   10284:	eb000999 	bl	128f0 <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   10288:	eb000a6a 	bl	12c38 <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   1028c:	e59f300c 	ldr	r3, [pc, #12]	; 102a0 <vTickISR+0x30>
   10290:	e3a02000 	mov	r2, #0
   10294:	e583200c 	str	r2, [r3, #12]
}
   10298:	e24bd004 	sub	sp, fp, #4
   1029c:	e8bd8800 	pop	{fp, pc}
   102a0:	2000b400 	andcs	fp, r0, r0, lsl #8

000102a4 <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   102a4:	e92d4800 	push	{fp, lr}
   102a8:	e28db004 	add	fp, sp, #4
   102ac:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   102b0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   102b4:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	DisableInterrupts();
   102b8:	eb000d57 	bl	1381c <DisableInterrupts>

	pRegs->CTL = 0x003E0000;
   102bc:	e59f3064 	ldr	r3, [pc, #100]	; 10328 <prvSetupTimerInterrupt+0x84>
   102c0:	e3a0283e 	mov	r2, #4063232	; 0x3e0000
   102c4:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   102c8:	e59f3058 	ldr	r3, [pc, #88]	; 10328 <prvSetupTimerInterrupt+0x84>
   102cc:	e59f2058 	ldr	r2, [pc, #88]	; 1032c <prvSetupTimerInterrupt+0x88>
   102d0:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   102d4:	e59f304c 	ldr	r3, [pc, #76]	; 10328 <prvSetupTimerInterrupt+0x84>
   102d8:	e59f204c 	ldr	r2, [pc, #76]	; 1032c <prvSetupTimerInterrupt+0x88>
   102dc:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   102e0:	e59f3040 	ldr	r3, [pc, #64]	; 10328 <prvSetupTimerInterrupt+0x84>
   102e4:	e3a020f9 	mov	r2, #249	; 0xf9
   102e8:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   102ec:	e59f3034 	ldr	r3, [pc, #52]	; 10328 <prvSetupTimerInterrupt+0x84>
   102f0:	e3a02000 	mov	r2, #0
   102f4:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   102f8:	e59f3028 	ldr	r3, [pc, #40]	; 10328 <prvSetupTimerInterrupt+0x84>
   102fc:	e59f202c 	ldr	r2, [pc, #44]	; 10330 <prvSetupTimerInterrupt+0x8c>
   10300:	e5832008 	str	r2, [r3, #8]

	RegisterInterrupt(64, vTickISR, NULL);
   10304:	e3a00040 	mov	r0, #64	; 0x40
   10308:	e59f1024 	ldr	r1, [pc, #36]	; 10334 <prvSetupTimerInterrupt+0x90>
   1030c:	e3a02000 	mov	r2, #0
   10310:	eb000cb4 	bl	135e8 <RegisterInterrupt>

	EnableInterrupt(64);
   10314:	e3a00040 	mov	r0, #64	; 0x40
   10318:	eb000cd3 	bl	1366c <EnableInterrupt>

	EnableInterrupts();
   1031c:	eb000d38 	bl	13804 <EnableInterrupts>
}
   10320:	e24bd004 	sub	sp, fp, #4
   10324:	e8bd8800 	pop	{fp, pc}
   10328:	2000b400 	andcs	fp, r0, r0, lsl #8
   1032c:	000003e7 	andeq	r0, r0, r7, ror #7
   10330:	003e00a2 	eorseq	r0, lr, r2, lsr #1
   10334:	00010270 	andeq	r0, r1, r0, ror r2

00010338 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   10338:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1033c:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   10340:	e59f3078 	ldr	r3, [pc, #120]	; 103c0 <vPortISRStartFirstTask+0x88>
   10344:	e5933000 	ldr	r3, [r3]
   10348:	e2832001 	add	r2, r3, #1
   1034c:	e59f306c 	ldr	r3, [pc, #108]	; 103c0 <vPortISRStartFirstTask+0x88>
   10350:	e5832000 	str	r2, [r3]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   10354:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   10358:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   1035c:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   10360:	e59f0260 	ldr	r0, [pc, #608]	; 105c8 <vPortExitCritical+0x60>
   10364:	e5900000 	ldr	r0, [r0]
   10368:	e590e000 	ldr	lr, [r0]
   1036c:	e59f0258 	ldr	r0, [pc, #600]	; 105cc <vPortExitCritical+0x64>
   10370:	e8be0002 	ldm	lr!, {r1}
   10374:	e5801000 	str	r1, [r0]
   10378:	e8be0001 	ldm	lr!, {r0}
   1037c:	e16ff000 	msr	SPSR_fsxc, r0
   10380:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10384:	e320f000 	nop	{0}
   10388:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   1038c:	e25ef004 	subs	pc, lr, #4
   10390:	e320f000 	nop	{0}
   10394:	e320f000 	nop	{0}
   10398:	e59f3024 	ldr	r3, [pc, #36]	; 103c4 <vPortISRStartFirstTask+0x8c>
   1039c:	e5933000 	ldr	r3, [r3]
   103a0:	e59f3020 	ldr	r3, [pc, #32]	; 103c8 <vPortISRStartFirstTask+0x90>
   103a4:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   103a8:	e8bd4000 	ldmfd	sp!, {lr}
   103ac:	e24ee004 	sub	lr, lr, #4
   103b0:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   103b4:	e24bd000 	sub	sp, fp, #0
   103b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   103bc:	e12fff1e 	bx	lr
   103c0:	00014720 	andeq	r4, r1, r0, lsr #14
   103c4:	00014714 	andeq	r4, r1, r4, lsl r7
   103c8:	000147a4 	andeq	r4, r1, r4, lsr #15

000103cc <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   103cc:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   103d0:	e92d0001 	stmfd	sp!, {r0}
   103d4:	e94d2000 	stmdb	sp, {sp}^
   103d8:	e24dd004 	sub	sp, sp, #4
   103dc:	e8bd0001 	ldmfd	sp!, {r0}
   103e0:	e9204000 	stmdb	r0!, {lr}
   103e4:	e1a0e000 	mov	lr, r0
   103e8:	e8bd0001 	ldmfd	sp!, {r0}
   103ec:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   103f0:	e320f000 	nop	{0}
   103f4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   103f8:	e14f0000 	mrs	r0, SPSR
   103fc:	e92e0001 	stmdb	lr!, {r0}
   10400:	e59f01c4 	ldr	r0, [pc, #452]	; 105cc <vPortExitCritical+0x64>
   10404:	e5900000 	ldr	r0, [r0]
   10408:	e92e0001 	stmdb	lr!, {r0}
   1040c:	e59f01b4 	ldr	r0, [pc, #436]	; 105c8 <vPortExitCritical+0x60>
   10410:	e5900000 	ldr	r0, [r0]
   10414:	e580e000 	str	lr, [r0]
   10418:	e59f3054 	ldr	r3, [pc, #84]	; 10474 <vPortYieldProcessor+0xa8>
   1041c:	e5933000 	ldr	r3, [r3]
   10420:	e59f3050 	ldr	r3, [pc, #80]	; 10478 <vPortYieldProcessor+0xac>
   10424:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   10428:	eb000a02 	bl	12c38 <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   1042c:	e59f0194 	ldr	r0, [pc, #404]	; 105c8 <vPortExitCritical+0x60>
   10430:	e5900000 	ldr	r0, [r0]
   10434:	e590e000 	ldr	lr, [r0]
   10438:	e59f018c 	ldr	r0, [pc, #396]	; 105cc <vPortExitCritical+0x64>
   1043c:	e8be0002 	ldm	lr!, {r1}
   10440:	e5801000 	str	r1, [r0]
   10444:	e8be0001 	ldm	lr!, {r0}
   10448:	e16ff000 	msr	SPSR_fsxc, r0
   1044c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10450:	e320f000 	nop	{0}
   10454:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10458:	e25ef004 	subs	pc, lr, #4
   1045c:	e320f000 	nop	{0}
   10460:	e320f000 	nop	{0}
   10464:	e59f3008 	ldr	r3, [pc, #8]	; 10474 <vPortYieldProcessor+0xa8>
   10468:	e5933000 	ldr	r3, [r3]
   1046c:	e59f3004 	ldr	r3, [pc, #4]	; 10478 <vPortYieldProcessor+0xac>
   10470:	e5933000 	ldr	r3, [r3]
   10474:	00014714 	andeq	r4, r1, r4, lsl r7
   10478:	000147a4 	andeq	r4, r1, r4, lsr #15

0001047c <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   1047c:	e92d0001 	stmfd	sp!, {r0}
   10480:	e94d2000 	stmdb	sp, {sp}^
   10484:	e24dd004 	sub	sp, sp, #4
   10488:	e8bd0001 	ldmfd	sp!, {r0}
   1048c:	e9204000 	stmdb	r0!, {lr}
   10490:	e1a0e000 	mov	lr, r0
   10494:	e8bd0001 	ldmfd	sp!, {r0}
   10498:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1049c:	e320f000 	nop	{0}
   104a0:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   104a4:	e14f0000 	mrs	r0, SPSR
   104a8:	e92e0001 	stmdb	lr!, {r0}
   104ac:	e59f0118 	ldr	r0, [pc, #280]	; 105cc <vPortExitCritical+0x64>
   104b0:	e5900000 	ldr	r0, [r0]
   104b4:	e92e0001 	stmdb	lr!, {r0}
   104b8:	e59f0108 	ldr	r0, [pc, #264]	; 105c8 <vPortExitCritical+0x60>
   104bc:	e5900000 	ldr	r0, [r0]
   104c0:	e580e000 	str	lr, [r0]
   104c4:	e59f3054 	ldr	r3, [pc, #84]	; 10520 <vFreeRTOS_ISR+0xa4>
   104c8:	e5933000 	ldr	r3, [r3]
   104cc:	e59f3050 	ldr	r3, [pc, #80]	; 10524 <vFreeRTOS_ISR+0xa8>
   104d0:	e5933000 	ldr	r3, [r3]
	irqHandler();
   104d4:	eb000beb 	bl	13488 <irqHandler>
	portRESTORE_CONTEXT();	
   104d8:	e59f00e8 	ldr	r0, [pc, #232]	; 105c8 <vPortExitCritical+0x60>
   104dc:	e5900000 	ldr	r0, [r0]
   104e0:	e590e000 	ldr	lr, [r0]
   104e4:	e59f00e0 	ldr	r0, [pc, #224]	; 105cc <vPortExitCritical+0x64>
   104e8:	e8be0002 	ldm	lr!, {r1}
   104ec:	e5801000 	str	r1, [r0]
   104f0:	e8be0001 	ldm	lr!, {r0}
   104f4:	e16ff000 	msr	SPSR_fsxc, r0
   104f8:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   104fc:	e320f000 	nop	{0}
   10500:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10504:	e25ef004 	subs	pc, lr, #4
   10508:	e320f000 	nop	{0}
   1050c:	e320f000 	nop	{0}
   10510:	e59f3008 	ldr	r3, [pc, #8]	; 10520 <vFreeRTOS_ISR+0xa4>
   10514:	e5933000 	ldr	r3, [r3]
   10518:	e59f3004 	ldr	r3, [pc, #4]	; 10524 <vFreeRTOS_ISR+0xa8>
   1051c:	e5933000 	ldr	r3, [r3]
   10520:	00014714 	andeq	r4, r1, r4, lsl r7
   10524:	000147a4 	andeq	r4, r1, r4, lsr #15

00010528 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   10528:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1052c:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   10530:	e92d0001 	stmfd	sp!, {r0}
   10534:	e10f0000 	mrs	r0, CPSR
   10538:	e38000c0 	orr	r0, r0, #192	; 0xc0
   1053c:	e129f000 	msr	CPSR_fc, r0
   10540:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   10544:	e59f3018 	ldr	r3, [pc, #24]	; 10564 <vPortEnterCritical+0x3c>
   10548:	e5933000 	ldr	r3, [r3]
   1054c:	e2832001 	add	r2, r3, #1
   10550:	e59f300c 	ldr	r3, [pc, #12]	; 10564 <vPortEnterCritical+0x3c>
   10554:	e5832000 	str	r2, [r3]
}
   10558:	e24bd000 	sub	sp, fp, #0
   1055c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10560:	e12fff1e 	bx	lr
   10564:	00014714 	andeq	r4, r1, r4, lsl r7

00010568 <vPortExitCritical>:

void vPortExitCritical( void )
{
   10568:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1056c:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   10570:	e59f304c 	ldr	r3, [pc, #76]	; 105c4 <vPortExitCritical+0x5c>
   10574:	e5933000 	ldr	r3, [r3]
   10578:	e3530000 	cmp	r3, #0
   1057c:	0a00000d 	beq	105b8 <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   10580:	e59f303c 	ldr	r3, [pc, #60]	; 105c4 <vPortExitCritical+0x5c>
   10584:	e5933000 	ldr	r3, [r3]
   10588:	e2432001 	sub	r2, r3, #1
   1058c:	e59f3030 	ldr	r3, [pc, #48]	; 105c4 <vPortExitCritical+0x5c>
   10590:	e5832000 	str	r2, [r3]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   10594:	e59f3028 	ldr	r3, [pc, #40]	; 105c4 <vPortExitCritical+0x5c>
   10598:	e5933000 	ldr	r3, [r3]
   1059c:	e3530000 	cmp	r3, #0
   105a0:	1a000004 	bne	105b8 <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   105a4:	e92d0001 	stmfd	sp!, {r0}
   105a8:	e10f0000 	mrs	r0, CPSR
   105ac:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   105b0:	e129f000 	msr	CPSR_fc, r0
   105b4:	e8bd0001 	ldmfd	sp!, {r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   105b8:	e24bd000 	sub	sp, fp, #0
   105bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   105c0:	e12fff1e 	bx	lr
   105c4:	00014714 	andeq	r4, r1, r4, lsl r7
   105c8:	000147a4 	andeq	r4, r1, r4, lsr #15
   105cc:	00014714 	andeq	r4, r1, r4, lsl r7

000105d0 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   105d0:	e92d4800 	push	{fp, lr}
   105d4:	e28db004 	add	fp, sp, #4
   105d8:	e24dd018 	sub	sp, sp, #24
   105dc:	e50b0010 	str	r0, [fp, #-16]
   105e0:	e50b1014 	str	r1, [fp, #-20]
   105e4:	e50b2018 	str	r2, [fp, #-24]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   105e8:	e3a00038 	mov	r0, #56	; 0x38
   105ec:	eb000e1b 	bl	13e60 <pvPortMalloc>
   105f0:	e50b000c 	str	r0, [fp, #-12]
	if( pxCoRoutine )
   105f4:	e51b300c 	ldr	r3, [fp, #-12]
   105f8:	e3530000 	cmp	r3, #0
   105fc:	0a000044 	beq	10714 <xCoRoutineCreate+0x144>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   10600:	e59f3124 	ldr	r3, [pc, #292]	; 1072c <xCoRoutineCreate+0x15c>
   10604:	e5933000 	ldr	r3, [r3]
   10608:	e3530000 	cmp	r3, #0
   1060c:	1a000003 	bne	10620 <xCoRoutineCreate+0x50>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   10610:	e59f3114 	ldr	r3, [pc, #276]	; 1072c <xCoRoutineCreate+0x15c>
   10614:	e51b200c 	ldr	r2, [fp, #-12]
   10618:	e5832000 	str	r2, [r3]
			prvInitialiseCoRoutineLists();
   1061c:	eb000175 	bl	10bf8 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   10620:	e51b3014 	ldr	r3, [fp, #-20]
   10624:	e3530001 	cmp	r3, #1
   10628:	9a000001 	bls	10634 <xCoRoutineCreate+0x64>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   1062c:	e3a03001 	mov	r3, #1
   10630:	e50b3014 	str	r3, [fp, #-20]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   10634:	e51b300c 	ldr	r3, [fp, #-12]
   10638:	e3a02000 	mov	r2, #0
   1063c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
   10640:	e51b300c 	ldr	r3, [fp, #-12]
   10644:	e51b2014 	ldr	r2, [fp, #-20]
   10648:	e583202c 	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   1064c:	e51b300c 	ldr	r3, [fp, #-12]
   10650:	e51b2018 	ldr	r2, [fp, #-24]
   10654:	e5832030 	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   10658:	e51b300c 	ldr	r3, [fp, #-12]
   1065c:	e51b2010 	ldr	r2, [fp, #-16]
   10660:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   10664:	e51b300c 	ldr	r3, [fp, #-12]
   10668:	e2833004 	add	r3, r3, #4
   1066c:	e1a00003 	mov	r0, r3
   10670:	eb0001c5 	bl	10d8c <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   10674:	e51b300c 	ldr	r3, [fp, #-12]
   10678:	e2833018 	add	r3, r3, #24
   1067c:	e1a00003 	mov	r0, r3
   10680:	eb0001c1 	bl	10d8c <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   10684:	e51b300c 	ldr	r3, [fp, #-12]
   10688:	e51b200c 	ldr	r2, [fp, #-12]
   1068c:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   10690:	e51b300c 	ldr	r3, [fp, #-12]
   10694:	e51b200c 	ldr	r2, [fp, #-12]
   10698:	e5832024 	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   1069c:	e51b3014 	ldr	r3, [fp, #-20]
   106a0:	e2632005 	rsb	r2, r3, #5
   106a4:	e51b300c 	ldr	r3, [fp, #-12]
   106a8:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   106ac:	e51b300c 	ldr	r3, [fp, #-12]
   106b0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106b4:	e59f3074 	ldr	r3, [pc, #116]	; 10730 <xCoRoutineCreate+0x160>
   106b8:	e5933000 	ldr	r3, [r3]
   106bc:	e1520003 	cmp	r2, r3
   106c0:	9a000003 	bls	106d4 <xCoRoutineCreate+0x104>
   106c4:	e51b300c 	ldr	r3, [fp, #-12]
   106c8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106cc:	e59f305c 	ldr	r3, [pc, #92]	; 10730 <xCoRoutineCreate+0x160>
   106d0:	e5832000 	str	r2, [r3]
   106d4:	e51b300c 	ldr	r3, [fp, #-12]
   106d8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106dc:	e1a03002 	mov	r3, r2
   106e0:	e1a03103 	lsl	r3, r3, #2
   106e4:	e0833002 	add	r3, r3, r2
   106e8:	e1a03103 	lsl	r3, r3, #2
   106ec:	e59f2040 	ldr	r2, [pc, #64]	; 10734 <xCoRoutineCreate+0x164>
   106f0:	e0832002 	add	r2, r3, r2
   106f4:	e51b300c 	ldr	r3, [fp, #-12]
   106f8:	e2833004 	add	r3, r3, #4
   106fc:	e1a00002 	mov	r0, r2
   10700:	e1a01003 	mov	r1, r3
   10704:	eb0001aa 	bl	10db4 <vListInsertEnd>

		xReturn = pdPASS;
   10708:	e3a03001 	mov	r3, #1
   1070c:	e50b3008 	str	r3, [fp, #-8]
   10710:	ea000001 	b	1071c <xCoRoutineCreate+0x14c>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   10714:	e3e03000 	mvn	r3, #0
   10718:	e50b3008 	str	r3, [fp, #-8]
	}
	
	return xReturn;	
   1071c:	e51b3008 	ldr	r3, [fp, #-8]
}
   10720:	e1a00003 	mov	r0, r3
   10724:	e24bd004 	sub	sp, fp, #4
   10728:	e8bd8800 	pop	{fp, pc}
   1072c:	00014790 	muleq	r1, r0, r7
   10730:	00014794 	muleq	r1, r4, r7
   10734:	00014724 	andeq	r4, r1, r4, lsr #14

00010738 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   10738:	e92d4800 	push	{fp, lr}
   1073c:	e28db004 	add	fp, sp, #4
   10740:	e24dd010 	sub	sp, sp, #16
   10744:	e50b0010 	str	r0, [fp, #-16]
   10748:	e50b1014 	str	r1, [fp, #-20]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   1074c:	e59f30b4 	ldr	r3, [pc, #180]	; 10808 <vCoRoutineAddToDelayedList+0xd0>
   10750:	e5932000 	ldr	r2, [r3]
   10754:	e51b3010 	ldr	r3, [fp, #-16]
   10758:	e0823003 	add	r3, r2, r3
   1075c:	e50b3008 	str	r3, [fp, #-8]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10760:	e59f30a4 	ldr	r3, [pc, #164]	; 1080c <vCoRoutineAddToDelayedList+0xd4>
   10764:	e5933000 	ldr	r3, [r3]
   10768:	e2833004 	add	r3, r3, #4
   1076c:	e1a00003 	mov	r0, r3
   10770:	eb0001e9 	bl	10f1c <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   10774:	e59f3090 	ldr	r3, [pc, #144]	; 1080c <vCoRoutineAddToDelayedList+0xd4>
   10778:	e5933000 	ldr	r3, [r3]
   1077c:	e51b2008 	ldr	r2, [fp, #-8]
   10780:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   10784:	e59f307c 	ldr	r3, [pc, #124]	; 10808 <vCoRoutineAddToDelayedList+0xd0>
   10788:	e5933000 	ldr	r3, [r3]
   1078c:	e51b2008 	ldr	r2, [fp, #-8]
   10790:	e1520003 	cmp	r2, r3
   10794:	2a000008 	bcs	107bc <vCoRoutineAddToDelayedList+0x84>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10798:	e59f3070 	ldr	r3, [pc, #112]	; 10810 <vCoRoutineAddToDelayedList+0xd8>
   1079c:	e5932000 	ldr	r2, [r3]
   107a0:	e59f3064 	ldr	r3, [pc, #100]	; 1080c <vCoRoutineAddToDelayedList+0xd4>
   107a4:	e5933000 	ldr	r3, [r3]
   107a8:	e2833004 	add	r3, r3, #4
   107ac:	e1a00002 	mov	r0, r2
   107b0:	e1a01003 	mov	r1, r3
   107b4:	eb0001a3 	bl	10e48 <vListInsert>
   107b8:	ea000007 	b	107dc <vCoRoutineAddToDelayedList+0xa4>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107bc:	e59f3050 	ldr	r3, [pc, #80]	; 10814 <vCoRoutineAddToDelayedList+0xdc>
   107c0:	e5932000 	ldr	r2, [r3]
   107c4:	e59f3040 	ldr	r3, [pc, #64]	; 1080c <vCoRoutineAddToDelayedList+0xd4>
   107c8:	e5933000 	ldr	r3, [r3]
   107cc:	e2833004 	add	r3, r3, #4
   107d0:	e1a00002 	mov	r0, r2
   107d4:	e1a01003 	mov	r1, r3
   107d8:	eb00019a 	bl	10e48 <vListInsert>
	}

	if( pxEventList )
   107dc:	e51b3014 	ldr	r3, [fp, #-20]
   107e0:	e3530000 	cmp	r3, #0
   107e4:	0a000005 	beq	10800 <vCoRoutineAddToDelayedList+0xc8>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   107e8:	e59f301c 	ldr	r3, [pc, #28]	; 1080c <vCoRoutineAddToDelayedList+0xd4>
   107ec:	e5933000 	ldr	r3, [r3]
   107f0:	e2833018 	add	r3, r3, #24
   107f4:	e51b0014 	ldr	r0, [fp, #-20]
   107f8:	e1a01003 	mov	r1, r3
   107fc:	eb000191 	bl	10e48 <vListInsert>
	}
}
   10800:	e24bd004 	sub	sp, fp, #4
   10804:	e8bd8800 	pop	{fp, pc}
   10808:	00014798 	muleq	r1, r8, r7
   1080c:	00014790 	muleq	r1, r0, r7
   10810:	00014778 	andeq	r4, r1, r8, ror r7
   10814:	00014774 	andeq	r4, r1, r4, ror r7

00010818 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   10818:	e92d4800 	push	{fp, lr}
   1081c:	e28db004 	add	fp, sp, #4
   10820:	e24dd008 	sub	sp, sp, #8
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10824:	ea00002c 	b	108dc <prvCheckPendingReadyList+0xc4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   10828:	e92d0001 	stmfd	sp!, {r0}
   1082c:	e10f0000 	mrs	r0, CPSR
   10830:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10834:	e129f000 	msr	CPSR_fc, r0
   10838:	e8bd0001 	ldmfd	sp!, {r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   1083c:	e59f30b0 	ldr	r3, [pc, #176]	; 108f4 <prvCheckPendingReadyList+0xdc>
   10840:	e593300c 	ldr	r3, [r3, #12]
   10844:	e593300c 	ldr	r3, [r3, #12]
   10848:	e50b3008 	str	r3, [fp, #-8]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   1084c:	e51b3008 	ldr	r3, [fp, #-8]
   10850:	e2833018 	add	r3, r3, #24
   10854:	e1a00003 	mov	r0, r3
   10858:	eb0001af 	bl	10f1c <vListRemove>
		}
		portENABLE_INTERRUPTS();
   1085c:	e92d0001 	stmfd	sp!, {r0}
   10860:	e10f0000 	mrs	r0, CPSR
   10864:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10868:	e129f000 	msr	CPSR_fc, r0
   1086c:	e8bd0001 	ldmfd	sp!, {r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   10870:	e51b3008 	ldr	r3, [fp, #-8]
   10874:	e2833004 	add	r3, r3, #4
   10878:	e1a00003 	mov	r0, r3
   1087c:	eb0001a6 	bl	10f1c <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   10880:	e51b3008 	ldr	r3, [fp, #-8]
   10884:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10888:	e59f3068 	ldr	r3, [pc, #104]	; 108f8 <prvCheckPendingReadyList+0xe0>
   1088c:	e5933000 	ldr	r3, [r3]
   10890:	e1520003 	cmp	r2, r3
   10894:	9a000003 	bls	108a8 <prvCheckPendingReadyList+0x90>
   10898:	e51b3008 	ldr	r3, [fp, #-8]
   1089c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108a0:	e59f3050 	ldr	r3, [pc, #80]	; 108f8 <prvCheckPendingReadyList+0xe0>
   108a4:	e5832000 	str	r2, [r3]
   108a8:	e51b3008 	ldr	r3, [fp, #-8]
   108ac:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108b0:	e1a03002 	mov	r3, r2
   108b4:	e1a03103 	lsl	r3, r3, #2
   108b8:	e0833002 	add	r3, r3, r2
   108bc:	e1a03103 	lsl	r3, r3, #2
   108c0:	e59f2034 	ldr	r2, [pc, #52]	; 108fc <prvCheckPendingReadyList+0xe4>
   108c4:	e0832002 	add	r2, r3, r2
   108c8:	e51b3008 	ldr	r3, [fp, #-8]
   108cc:	e2833004 	add	r3, r3, #4
   108d0:	e1a00002 	mov	r0, r2
   108d4:	e1a01003 	mov	r1, r3
   108d8:	eb000135 	bl	10db4 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   108dc:	e59f3010 	ldr	r3, [pc, #16]	; 108f4 <prvCheckPendingReadyList+0xdc>
   108e0:	e5933000 	ldr	r3, [r3]
   108e4:	e3530000 	cmp	r3, #0
   108e8:	1affffce 	bne	10828 <prvCheckPendingReadyList+0x10>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
   108ec:	e24bd004 	sub	sp, fp, #4
   108f0:	e8bd8800 	pop	{fp, pc}
   108f4:	0001477c 	andeq	r4, r1, ip, ror r7
   108f8:	00014794 	muleq	r1, r4, r7
   108fc:	00014724 	andeq	r4, r1, r4, lsr #14

00010900 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   10900:	e92d4800 	push	{fp, lr}
   10904:	e28db004 	add	fp, sp, #4
   10908:	e24dd008 	sub	sp, sp, #8
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   1090c:	eb0007d3 	bl	12860 <xTaskGetTickCount>
   10910:	e1a02000 	mov	r2, r0
   10914:	e59f3198 	ldr	r3, [pc, #408]	; 10ab4 <prvCheckDelayedList+0x1b4>
   10918:	e5933000 	ldr	r3, [r3]
   1091c:	e0632002 	rsb	r2, r3, r2
   10920:	e59f3190 	ldr	r3, [pc, #400]	; 10ab8 <prvCheckDelayedList+0x1b8>
   10924:	e5832000 	str	r2, [r3]
	while( xPassedTicks )
   10928:	ea000057 	b	10a8c <prvCheckDelayedList+0x18c>
	{
		xCoRoutineTickCount++;
   1092c:	e59f3188 	ldr	r3, [pc, #392]	; 10abc <prvCheckDelayedList+0x1bc>
   10930:	e5933000 	ldr	r3, [r3]
   10934:	e2832001 	add	r2, r3, #1
   10938:	e59f317c 	ldr	r3, [pc, #380]	; 10abc <prvCheckDelayedList+0x1bc>
   1093c:	e5832000 	str	r2, [r3]
		xPassedTicks--;
   10940:	e59f3170 	ldr	r3, [pc, #368]	; 10ab8 <prvCheckDelayedList+0x1b8>
   10944:	e5933000 	ldr	r3, [r3]
   10948:	e2432001 	sub	r2, r3, #1
   1094c:	e59f3164 	ldr	r3, [pc, #356]	; 10ab8 <prvCheckDelayedList+0x1b8>
   10950:	e5832000 	str	r2, [r3]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   10954:	e59f3160 	ldr	r3, [pc, #352]	; 10abc <prvCheckDelayedList+0x1bc>
   10958:	e5933000 	ldr	r3, [r3]
   1095c:	e3530000 	cmp	r3, #0
   10960:	1a00000a 	bne	10990 <prvCheckDelayedList+0x90>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   10964:	e59f3154 	ldr	r3, [pc, #340]	; 10ac0 <prvCheckDelayedList+0x1c0>
   10968:	e5933000 	ldr	r3, [r3]
   1096c:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   10970:	e59f314c 	ldr	r3, [pc, #332]	; 10ac4 <prvCheckDelayedList+0x1c4>
   10974:	e5932000 	ldr	r2, [r3]
   10978:	e59f3140 	ldr	r3, [pc, #320]	; 10ac0 <prvCheckDelayedList+0x1c0>
   1097c:	e5832000 	str	r2, [r3]
			pxOverflowDelayedCoRoutineList = pxTemp;
   10980:	e59f313c 	ldr	r3, [pc, #316]	; 10ac4 <prvCheckDelayedList+0x1c4>
   10984:	e51b2008 	ldr	r2, [fp, #-8]
   10988:	e5832000 	str	r2, [r3]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   1098c:	ea000039 	b	10a78 <prvCheckDelayedList+0x178>
   10990:	ea000038 	b	10a78 <prvCheckDelayedList+0x178>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   10994:	e59f3124 	ldr	r3, [pc, #292]	; 10ac0 <prvCheckDelayedList+0x1c0>
   10998:	e5933000 	ldr	r3, [r3]
   1099c:	e593300c 	ldr	r3, [r3, #12]
   109a0:	e593300c 	ldr	r3, [r3, #12]
   109a4:	e50b300c 	str	r3, [fp, #-12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   109a8:	e51b300c 	ldr	r3, [fp, #-12]
   109ac:	e5932004 	ldr	r2, [r3, #4]
   109b0:	e59f3104 	ldr	r3, [pc, #260]	; 10abc <prvCheckDelayedList+0x1bc>
   109b4:	e5933000 	ldr	r3, [r3]
   109b8:	e1520003 	cmp	r2, r3
   109bc:	9a000000 	bls	109c4 <prvCheckDelayedList+0xc4>
			{			
				/* Timeout not yet expired. */																			
				break;																				
   109c0:	ea000031 	b	10a8c <prvCheckDelayedList+0x18c>
			}																						

			portDISABLE_INTERRUPTS();
   109c4:	e92d0001 	stmfd	sp!, {r0}
   109c8:	e10f0000 	mrs	r0, CPSR
   109cc:	e38000c0 	orr	r0, r0, #192	; 0xc0
   109d0:	e129f000 	msr	CPSR_fc, r0
   109d4:	e8bd0001 	ldmfd	sp!, {r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   109d8:	e51b300c 	ldr	r3, [fp, #-12]
   109dc:	e2833004 	add	r3, r3, #4
   109e0:	e1a00003 	mov	r0, r3
   109e4:	eb00014c 	bl	10f1c <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   109e8:	e51b300c 	ldr	r3, [fp, #-12]
   109ec:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   109f0:	e3530000 	cmp	r3, #0
   109f4:	0a000003 	beq	10a08 <prvCheckDelayedList+0x108>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   109f8:	e51b300c 	ldr	r3, [fp, #-12]
   109fc:	e2833018 	add	r3, r3, #24
   10a00:	e1a00003 	mov	r0, r3
   10a04:	eb000144 	bl	10f1c <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   10a08:	e92d0001 	stmfd	sp!, {r0}
   10a0c:	e10f0000 	mrs	r0, CPSR
   10a10:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10a14:	e129f000 	msr	CPSR_fc, r0
   10a18:	e8bd0001 	ldmfd	sp!, {r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   10a1c:	e51b300c 	ldr	r3, [fp, #-12]
   10a20:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a24:	e59f309c 	ldr	r3, [pc, #156]	; 10ac8 <prvCheckDelayedList+0x1c8>
   10a28:	e5933000 	ldr	r3, [r3]
   10a2c:	e1520003 	cmp	r2, r3
   10a30:	9a000003 	bls	10a44 <prvCheckDelayedList+0x144>
   10a34:	e51b300c 	ldr	r3, [fp, #-12]
   10a38:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a3c:	e59f3084 	ldr	r3, [pc, #132]	; 10ac8 <prvCheckDelayedList+0x1c8>
   10a40:	e5832000 	str	r2, [r3]
   10a44:	e51b300c 	ldr	r3, [fp, #-12]
   10a48:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a4c:	e1a03002 	mov	r3, r2
   10a50:	e1a03103 	lsl	r3, r3, #2
   10a54:	e0833002 	add	r3, r3, r2
   10a58:	e1a03103 	lsl	r3, r3, #2
   10a5c:	e59f2068 	ldr	r2, [pc, #104]	; 10acc <prvCheckDelayedList+0x1cc>
   10a60:	e0832002 	add	r2, r3, r2
   10a64:	e51b300c 	ldr	r3, [fp, #-12]
   10a68:	e2833004 	add	r3, r3, #4
   10a6c:	e1a00002 	mov	r0, r2
   10a70:	e1a01003 	mov	r1, r3
   10a74:	eb0000ce 	bl	10db4 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   10a78:	e59f3040 	ldr	r3, [pc, #64]	; 10ac0 <prvCheckDelayedList+0x1c0>
   10a7c:	e5933000 	ldr	r3, [r3]
   10a80:	e5933000 	ldr	r3, [r3]
   10a84:	e3530000 	cmp	r3, #0
   10a88:	1affffc1 	bne	10994 <prvCheckDelayedList+0x94>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
   10a8c:	e59f3024 	ldr	r3, [pc, #36]	; 10ab8 <prvCheckDelayedList+0x1b8>
   10a90:	e5933000 	ldr	r3, [r3]
   10a94:	e3530000 	cmp	r3, #0
   10a98:	1affffa3 	bne	1092c <prvCheckDelayedList+0x2c>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   10a9c:	e59f3018 	ldr	r3, [pc, #24]	; 10abc <prvCheckDelayedList+0x1bc>
   10aa0:	e5932000 	ldr	r2, [r3]
   10aa4:	e59f3008 	ldr	r3, [pc, #8]	; 10ab4 <prvCheckDelayedList+0x1b4>
   10aa8:	e5832000 	str	r2, [r3]
}
   10aac:	e24bd004 	sub	sp, fp, #4
   10ab0:	e8bd8800 	pop	{fp, pc}
   10ab4:	0001479c 	muleq	r1, ip, r7
   10ab8:	000147a0 	andeq	r4, r1, r0, lsr #15
   10abc:	00014798 	muleq	r1, r8, r7
   10ac0:	00014774 	andeq	r4, r1, r4, ror r7
   10ac4:	00014778 	andeq	r4, r1, r8, ror r7
   10ac8:	00014794 	muleq	r1, r4, r7
   10acc:	00014724 	andeq	r4, r1, r4, lsr #14

00010ad0 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   10ad0:	e92d4800 	push	{fp, lr}
   10ad4:	e28db004 	add	fp, sp, #4
   10ad8:	e24dd008 	sub	sp, sp, #8
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   10adc:	ebffff4d 	bl	10818 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   10ae0:	ebffff86 	bl	10900 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10ae4:	ea000009 	b	10b10 <vCoRoutineSchedule+0x40>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   10ae8:	e59f30fc 	ldr	r3, [pc, #252]	; 10bec <vCoRoutineSchedule+0x11c>
   10aec:	e5933000 	ldr	r3, [r3]
   10af0:	e3530000 	cmp	r3, #0
   10af4:	1a000000 	bne	10afc <vCoRoutineSchedule+0x2c>
		{
			/* No more co-routines to check. */
			return;
   10af8:	ea000039 	b	10be4 <vCoRoutineSchedule+0x114>
		}
		--uxTopCoRoutineReadyPriority;
   10afc:	e59f30e8 	ldr	r3, [pc, #232]	; 10bec <vCoRoutineSchedule+0x11c>
   10b00:	e5933000 	ldr	r3, [r3]
   10b04:	e2432001 	sub	r2, r3, #1
   10b08:	e59f30dc 	ldr	r3, [pc, #220]	; 10bec <vCoRoutineSchedule+0x11c>
   10b0c:	e5832000 	str	r2, [r3]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b10:	e59f30d4 	ldr	r3, [pc, #212]	; 10bec <vCoRoutineSchedule+0x11c>
   10b14:	e5932000 	ldr	r2, [r3]
   10b18:	e59f10d0 	ldr	r1, [pc, #208]	; 10bf0 <vCoRoutineSchedule+0x120>
   10b1c:	e1a03002 	mov	r3, r2
   10b20:	e1a03103 	lsl	r3, r3, #2
   10b24:	e0833002 	add	r3, r3, r2
   10b28:	e1a03103 	lsl	r3, r3, #2
   10b2c:	e0813003 	add	r3, r1, r3
   10b30:	e5933000 	ldr	r3, [r3]
   10b34:	e3530000 	cmp	r3, #0
   10b38:	0affffea 	beq	10ae8 <vCoRoutineSchedule+0x18>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   10b3c:	e59f30a8 	ldr	r3, [pc, #168]	; 10bec <vCoRoutineSchedule+0x11c>
   10b40:	e5932000 	ldr	r2, [r3]
   10b44:	e1a03002 	mov	r3, r2
   10b48:	e1a03103 	lsl	r3, r3, #2
   10b4c:	e0833002 	add	r3, r3, r2
   10b50:	e1a03103 	lsl	r3, r3, #2
   10b54:	e59f2094 	ldr	r2, [pc, #148]	; 10bf0 <vCoRoutineSchedule+0x120>
   10b58:	e0833002 	add	r3, r3, r2
   10b5c:	e50b3008 	str	r3, [fp, #-8]
   10b60:	e51b3008 	ldr	r3, [fp, #-8]
   10b64:	e5933004 	ldr	r3, [r3, #4]
   10b68:	e5932004 	ldr	r2, [r3, #4]
   10b6c:	e51b3008 	ldr	r3, [fp, #-8]
   10b70:	e5832004 	str	r2, [r3, #4]
   10b74:	e51b3008 	ldr	r3, [fp, #-8]
   10b78:	e5932004 	ldr	r2, [r3, #4]
   10b7c:	e51b3008 	ldr	r3, [fp, #-8]
   10b80:	e2833008 	add	r3, r3, #8
   10b84:	e1520003 	cmp	r2, r3
   10b88:	1a000004 	bne	10ba0 <vCoRoutineSchedule+0xd0>
   10b8c:	e51b3008 	ldr	r3, [fp, #-8]
   10b90:	e5933004 	ldr	r3, [r3, #4]
   10b94:	e5932004 	ldr	r2, [r3, #4]
   10b98:	e51b3008 	ldr	r3, [fp, #-8]
   10b9c:	e5832004 	str	r2, [r3, #4]
   10ba0:	e51b3008 	ldr	r3, [fp, #-8]
   10ba4:	e5933004 	ldr	r3, [r3, #4]
   10ba8:	e593200c 	ldr	r2, [r3, #12]
   10bac:	e59f3040 	ldr	r3, [pc, #64]	; 10bf4 <vCoRoutineSchedule+0x124>
   10bb0:	e5832000 	str	r2, [r3]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   10bb4:	e59f3038 	ldr	r3, [pc, #56]	; 10bf4 <vCoRoutineSchedule+0x124>
   10bb8:	e5933000 	ldr	r3, [r3]
   10bbc:	e5933000 	ldr	r3, [r3]
   10bc0:	e59f202c 	ldr	r2, [pc, #44]	; 10bf4 <vCoRoutineSchedule+0x124>
   10bc4:	e5921000 	ldr	r1, [r2]
   10bc8:	e59f2024 	ldr	r2, [pc, #36]	; 10bf4 <vCoRoutineSchedule+0x124>
   10bcc:	e5922000 	ldr	r2, [r2]
   10bd0:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   10bd4:	e1a00001 	mov	r0, r1
   10bd8:	e1a01002 	mov	r1, r2
   10bdc:	e12fff33 	blx	r3

	return;
   10be0:	e1a00000 	nop			; (mov r0, r0)
}
   10be4:	e24bd004 	sub	sp, fp, #4
   10be8:	e8bd8800 	pop	{fp, pc}
   10bec:	00014794 	muleq	r1, r4, r7
   10bf0:	00014724 	andeq	r4, r1, r4, lsr #14
   10bf4:	00014790 	muleq	r1, r0, r7

00010bf8 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   10bf8:	e92d4800 	push	{fp, lr}
   10bfc:	e28db004 	add	fp, sp, #4
   10c00:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c04:	e3a03000 	mov	r3, #0
   10c08:	e50b3008 	str	r3, [fp, #-8]
   10c0c:	ea00000b 	b	10c40 <prvInitialiseCoRoutineLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   10c10:	e51b2008 	ldr	r2, [fp, #-8]
   10c14:	e1a03002 	mov	r3, r2
   10c18:	e1a03103 	lsl	r3, r3, #2
   10c1c:	e0833002 	add	r3, r3, r2
   10c20:	e1a03103 	lsl	r3, r3, #2
   10c24:	e59f2058 	ldr	r2, [pc, #88]	; 10c84 <prvInitialiseCoRoutineLists+0x8c>
   10c28:	e0833002 	add	r3, r3, r2
   10c2c:	e1a00003 	mov	r0, r3
   10c30:	eb00003c 	bl	10d28 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c34:	e51b3008 	ldr	r3, [fp, #-8]
   10c38:	e2833001 	add	r3, r3, #1
   10c3c:	e50b3008 	str	r3, [fp, #-8]
   10c40:	e51b3008 	ldr	r3, [fp, #-8]
   10c44:	e3530001 	cmp	r3, #1
   10c48:	9afffff0 	bls	10c10 <prvInitialiseCoRoutineLists+0x18>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   10c4c:	e59f0034 	ldr	r0, [pc, #52]	; 10c88 <prvInitialiseCoRoutineLists+0x90>
   10c50:	eb000034 	bl	10d28 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   10c54:	e59f0030 	ldr	r0, [pc, #48]	; 10c8c <prvInitialiseCoRoutineLists+0x94>
   10c58:	eb000032 	bl	10d28 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   10c5c:	e59f002c 	ldr	r0, [pc, #44]	; 10c90 <prvInitialiseCoRoutineLists+0x98>
   10c60:	eb000030 	bl	10d28 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   10c64:	e59f3028 	ldr	r3, [pc, #40]	; 10c94 <prvInitialiseCoRoutineLists+0x9c>
   10c68:	e59f2018 	ldr	r2, [pc, #24]	; 10c88 <prvInitialiseCoRoutineLists+0x90>
   10c6c:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   10c70:	e59f3020 	ldr	r3, [pc, #32]	; 10c98 <prvInitialiseCoRoutineLists+0xa0>
   10c74:	e59f2010 	ldr	r2, [pc, #16]	; 10c8c <prvInitialiseCoRoutineLists+0x94>
   10c78:	e5832000 	str	r2, [r3]
}
   10c7c:	e24bd004 	sub	sp, fp, #4
   10c80:	e8bd8800 	pop	{fp, pc}
   10c84:	00014724 	andeq	r4, r1, r4, lsr #14
   10c88:	0001474c 	andeq	r4, r1, ip, asr #14
   10c8c:	00014760 	andeq	r4, r1, r0, ror #14
   10c90:	0001477c 	andeq	r4, r1, ip, ror r7
   10c94:	00014774 	andeq	r4, r1, r4, ror r7
   10c98:	00014778 	andeq	r4, r1, r8, ror r7

00010c9c <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   10c9c:	e92d4800 	push	{fp, lr}
   10ca0:	e28db004 	add	fp, sp, #4
   10ca4:	e24dd010 	sub	sp, sp, #16
   10ca8:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   10cac:	e51b3010 	ldr	r3, [fp, #-16]
   10cb0:	e593300c 	ldr	r3, [r3, #12]
   10cb4:	e593300c 	ldr	r3, [r3, #12]
   10cb8:	e50b300c 	str	r3, [fp, #-12]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10cbc:	e51b300c 	ldr	r3, [fp, #-12]
   10cc0:	e2833018 	add	r3, r3, #24
   10cc4:	e1a00003 	mov	r0, r3
   10cc8:	eb000093 	bl	10f1c <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   10ccc:	e51b300c 	ldr	r3, [fp, #-12]
   10cd0:	e2833018 	add	r3, r3, #24
   10cd4:	e59f0044 	ldr	r0, [pc, #68]	; 10d20 <xCoRoutineRemoveFromEventList+0x84>
   10cd8:	e1a01003 	mov	r1, r3
   10cdc:	eb000034 	bl	10db4 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   10ce0:	e51b300c 	ldr	r3, [fp, #-12]
   10ce4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10ce8:	e59f3034 	ldr	r3, [pc, #52]	; 10d24 <xCoRoutineRemoveFromEventList+0x88>
   10cec:	e5933000 	ldr	r3, [r3]
   10cf0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10cf4:	e1520003 	cmp	r2, r3
   10cf8:	3a000002 	bcc	10d08 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
   10cfc:	e3a03001 	mov	r3, #1
   10d00:	e50b3008 	str	r3, [fp, #-8]
   10d04:	ea000001 	b	10d10 <xCoRoutineRemoveFromEventList+0x74>
	}
	else
	{
		xReturn = pdFALSE;
   10d08:	e3a03000 	mov	r3, #0
   10d0c:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   10d10:	e51b3008 	ldr	r3, [fp, #-8]
}
   10d14:	e1a00003 	mov	r0, r3
   10d18:	e24bd004 	sub	sp, fp, #4
   10d1c:	e8bd8800 	pop	{fp, pc}
   10d20:	0001477c 	andeq	r4, r1, ip, ror r7
   10d24:	00014790 	muleq	r1, r0, r7

00010d28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   10d28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10d2c:	e28db000 	add	fp, sp, #0
   10d30:	e24dd00c 	sub	sp, sp, #12
   10d34:	e50b0008 	str	r0, [fp, #-8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   10d38:	e51b3008 	ldr	r3, [fp, #-8]
   10d3c:	e2832008 	add	r2, r3, #8
   10d40:	e51b3008 	ldr	r3, [fp, #-8]
   10d44:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   10d48:	e51b3008 	ldr	r3, [fp, #-8]
   10d4c:	e3e02000 	mvn	r2, #0
   10d50:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   10d54:	e51b3008 	ldr	r3, [fp, #-8]
   10d58:	e2832008 	add	r2, r3, #8
   10d5c:	e51b3008 	ldr	r3, [fp, #-8]
   10d60:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   10d64:	e51b3008 	ldr	r3, [fp, #-8]
   10d68:	e2832008 	add	r2, r3, #8
   10d6c:	e51b3008 	ldr	r3, [fp, #-8]
   10d70:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   10d74:	e51b3008 	ldr	r3, [fp, #-8]
   10d78:	e3a02000 	mov	r2, #0
   10d7c:	e5832000 	str	r2, [r3]
}
   10d80:	e24bd000 	sub	sp, fp, #0
   10d84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10d88:	e12fff1e 	bx	lr

00010d8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   10d8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10d90:	e28db000 	add	fp, sp, #0
   10d94:	e24dd00c 	sub	sp, sp, #12
   10d98:	e50b0008 	str	r0, [fp, #-8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   10d9c:	e51b3008 	ldr	r3, [fp, #-8]
   10da0:	e3a02000 	mov	r2, #0
   10da4:	e5832010 	str	r2, [r3, #16]
}
   10da8:	e24bd000 	sub	sp, fp, #0
   10dac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10db0:	e12fff1e 	bx	lr

00010db4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   10db4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10db8:	e28db000 	add	fp, sp, #0
   10dbc:	e24dd014 	sub	sp, sp, #20
   10dc0:	e50b0010 	str	r0, [fp, #-16]
   10dc4:	e50b1014 	str	r1, [fp, #-20]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   10dc8:	e51b3010 	ldr	r3, [fp, #-16]
   10dcc:	e5933004 	ldr	r3, [r3, #4]
   10dd0:	e50b3008 	str	r3, [fp, #-8]

	pxNewListItem->pxNext = pxIndex->pxNext;
   10dd4:	e51b3008 	ldr	r3, [fp, #-8]
   10dd8:	e5932004 	ldr	r2, [r3, #4]
   10ddc:	e51b3014 	ldr	r3, [fp, #-20]
   10de0:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   10de4:	e51b3010 	ldr	r3, [fp, #-16]
   10de8:	e5932004 	ldr	r2, [r3, #4]
   10dec:	e51b3014 	ldr	r3, [fp, #-20]
   10df0:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10df4:	e51b3008 	ldr	r3, [fp, #-8]
   10df8:	e5933004 	ldr	r3, [r3, #4]
   10dfc:	e51b2014 	ldr	r2, [fp, #-20]
   10e00:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   10e04:	e51b3008 	ldr	r3, [fp, #-8]
   10e08:	e51b2014 	ldr	r2, [fp, #-20]
   10e0c:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   10e10:	e51b3010 	ldr	r3, [fp, #-16]
   10e14:	e51b2014 	ldr	r2, [fp, #-20]
   10e18:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10e1c:	e51b3014 	ldr	r3, [fp, #-20]
   10e20:	e51b2010 	ldr	r2, [fp, #-16]
   10e24:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10e28:	e51b3010 	ldr	r3, [fp, #-16]
   10e2c:	e5933000 	ldr	r3, [r3]
   10e30:	e2832001 	add	r2, r3, #1
   10e34:	e51b3010 	ldr	r3, [fp, #-16]
   10e38:	e5832000 	str	r2, [r3]
}
   10e3c:	e24bd000 	sub	sp, fp, #0
   10e40:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10e44:	e12fff1e 	bx	lr

00010e48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   10e48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10e4c:	e28db000 	add	fp, sp, #0
   10e50:	e24dd014 	sub	sp, sp, #20
   10e54:	e50b0010 	str	r0, [fp, #-16]
   10e58:	e50b1014 	str	r1, [fp, #-20]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   10e5c:	e51b3014 	ldr	r3, [fp, #-20]
   10e60:	e5933000 	ldr	r3, [r3]
   10e64:	e50b300c 	str	r3, [fp, #-12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   10e68:	e51b300c 	ldr	r3, [fp, #-12]
   10e6c:	e3730001 	cmn	r3, #1
   10e70:	1a000003 	bne	10e84 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   10e74:	e51b3010 	ldr	r3, [fp, #-16]
   10e78:	e5933010 	ldr	r3, [r3, #16]
   10e7c:	e50b3008 	str	r3, [fp, #-8]
   10e80:	ea00000c 	b	10eb8 <vListInsert+0x70>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   10e84:	e51b3010 	ldr	r3, [fp, #-16]
   10e88:	e2833008 	add	r3, r3, #8
   10e8c:	e50b3008 	str	r3, [fp, #-8]
   10e90:	ea000002 	b	10ea0 <vListInsert+0x58>
   10e94:	e51b3008 	ldr	r3, [fp, #-8]
   10e98:	e5933004 	ldr	r3, [r3, #4]
   10e9c:	e50b3008 	str	r3, [fp, #-8]
   10ea0:	e51b3008 	ldr	r3, [fp, #-8]
   10ea4:	e5933004 	ldr	r3, [r3, #4]
   10ea8:	e5932000 	ldr	r2, [r3]
   10eac:	e51b300c 	ldr	r3, [fp, #-12]
   10eb0:	e1520003 	cmp	r2, r3
   10eb4:	9afffff6 	bls	10e94 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   10eb8:	e51b3008 	ldr	r3, [fp, #-8]
   10ebc:	e5932004 	ldr	r2, [r3, #4]
   10ec0:	e51b3014 	ldr	r3, [fp, #-20]
   10ec4:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10ec8:	e51b3014 	ldr	r3, [fp, #-20]
   10ecc:	e5933004 	ldr	r3, [r3, #4]
   10ed0:	e51b2014 	ldr	r2, [fp, #-20]
   10ed4:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   10ed8:	e51b3014 	ldr	r3, [fp, #-20]
   10edc:	e51b2008 	ldr	r2, [fp, #-8]
   10ee0:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   10ee4:	e51b3008 	ldr	r3, [fp, #-8]
   10ee8:	e51b2014 	ldr	r2, [fp, #-20]
   10eec:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10ef0:	e51b3014 	ldr	r3, [fp, #-20]
   10ef4:	e51b2010 	ldr	r2, [fp, #-16]
   10ef8:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10efc:	e51b3010 	ldr	r3, [fp, #-16]
   10f00:	e5933000 	ldr	r3, [r3]
   10f04:	e2832001 	add	r2, r3, #1
   10f08:	e51b3010 	ldr	r3, [fp, #-16]
   10f0c:	e5832000 	str	r2, [r3]
}
   10f10:	e24bd000 	sub	sp, fp, #0
   10f14:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10f18:	e12fff1e 	bx	lr

00010f1c <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   10f1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10f20:	e28db000 	add	fp, sp, #0
   10f24:	e24dd014 	sub	sp, sp, #20
   10f28:	e50b0010 	str	r0, [fp, #-16]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   10f2c:	e51b3010 	ldr	r3, [fp, #-16]
   10f30:	e5933004 	ldr	r3, [r3, #4]
   10f34:	e51b2010 	ldr	r2, [fp, #-16]
   10f38:	e5922008 	ldr	r2, [r2, #8]
   10f3c:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   10f40:	e51b3010 	ldr	r3, [fp, #-16]
   10f44:	e5933008 	ldr	r3, [r3, #8]
   10f48:	e51b2010 	ldr	r2, [fp, #-16]
   10f4c:	e5922004 	ldr	r2, [r2, #4]
   10f50:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   10f54:	e51b3010 	ldr	r3, [fp, #-16]
   10f58:	e5933010 	ldr	r3, [r3, #16]
   10f5c:	e50b3008 	str	r3, [fp, #-8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   10f60:	e51b3008 	ldr	r3, [fp, #-8]
   10f64:	e5932004 	ldr	r2, [r3, #4]
   10f68:	e51b3010 	ldr	r3, [fp, #-16]
   10f6c:	e1520003 	cmp	r2, r3
   10f70:	1a000003 	bne	10f84 <vListRemove+0x68>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   10f74:	e51b3010 	ldr	r3, [fp, #-16]
   10f78:	e5932008 	ldr	r2, [r3, #8]
   10f7c:	e51b3008 	ldr	r3, [fp, #-8]
   10f80:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   10f84:	e51b3010 	ldr	r3, [fp, #-16]
   10f88:	e3a02000 	mov	r2, #0
   10f8c:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   10f90:	e51b3008 	ldr	r3, [fp, #-8]
   10f94:	e5933000 	ldr	r3, [r3]
   10f98:	e2432001 	sub	r2, r3, #1
   10f9c:	e51b3008 	ldr	r3, [fp, #-8]
   10fa0:	e5832000 	str	r2, [r3]
}
   10fa4:	e24bd000 	sub	sp, fp, #0
   10fa8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10fac:	e12fff1e 	bx	lr

00010fb0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   10fb0:	e92d4800 	push	{fp, lr}
   10fb4:	e28db004 	add	fp, sp, #4
   10fb8:	e24dd008 	sub	sp, sp, #8
   10fbc:	e50b0008 	str	r0, [fp, #-8]
   10fc0:	e50b100c 	str	r1, [fp, #-12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   10fc4:	ebfffd57 	bl	10528 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   10fc8:	e51b3008 	ldr	r3, [fp, #-8]
   10fcc:	e5932000 	ldr	r2, [r3]
   10fd0:	e51b3008 	ldr	r3, [fp, #-8]
   10fd4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   10fd8:	e51b1008 	ldr	r1, [fp, #-8]
   10fdc:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   10fe0:	e0030391 	mul	r3, r1, r3
   10fe4:	e0822003 	add	r2, r2, r3
   10fe8:	e51b3008 	ldr	r3, [fp, #-8]
   10fec:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   10ff0:	e51b3008 	ldr	r3, [fp, #-8]
   10ff4:	e3a02000 	mov	r2, #0
   10ff8:	e5832038 	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   10ffc:	e51b3008 	ldr	r3, [fp, #-8]
   11000:	e5932000 	ldr	r2, [r3]
   11004:	e51b3008 	ldr	r3, [fp, #-8]
   11008:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   1100c:	e51b3008 	ldr	r3, [fp, #-8]
   11010:	e5932000 	ldr	r2, [r3]
   11014:	e51b3008 	ldr	r3, [fp, #-8]
   11018:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   1101c:	e2433001 	sub	r3, r3, #1
   11020:	e51b1008 	ldr	r1, [fp, #-8]
   11024:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11028:	e0030391 	mul	r3, r1, r3
   1102c:	e0822003 	add	r2, r2, r3
   11030:	e51b3008 	ldr	r3, [fp, #-8]
   11034:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   11038:	e51b3008 	ldr	r3, [fp, #-8]
   1103c:	e3e02000 	mvn	r2, #0
   11040:	e5832044 	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   11044:	e51b3008 	ldr	r3, [fp, #-8]
   11048:	e3e02000 	mvn	r2, #0
   1104c:	e5832048 	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   11050:	e51b300c 	ldr	r3, [fp, #-12]
   11054:	e3530000 	cmp	r3, #0
   11058:	1a00000c 	bne	11090 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1105c:	e51b3008 	ldr	r3, [fp, #-8]
   11060:	e5933010 	ldr	r3, [r3, #16]
   11064:	e3530000 	cmp	r3, #0
   11068:	0a000010 	beq	110b0 <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   1106c:	e51b3008 	ldr	r3, [fp, #-8]
   11070:	e2833010 	add	r3, r3, #16
   11074:	e1a00003 	mov	r0, r3
   11078:	eb000756 	bl	12dd8 <xTaskRemoveFromEventList>
   1107c:	e1a03000 	mov	r3, r0
   11080:	e3530001 	cmp	r3, #1
   11084:	1a000009 	bne	110b0 <xQueueGenericReset+0x100>
				{
					portYIELD_WITHIN_API();
   11088:	ef000000 	svc	0x00000000
   1108c:	ea000007 	b	110b0 <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   11090:	e51b3008 	ldr	r3, [fp, #-8]
   11094:	e2833010 	add	r3, r3, #16
   11098:	e1a00003 	mov	r0, r3
   1109c:	ebffff21 	bl	10d28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   110a0:	e51b3008 	ldr	r3, [fp, #-8]
   110a4:	e2833024 	add	r3, r3, #36	; 0x24
   110a8:	e1a00003 	mov	r0, r3
   110ac:	ebffff1d 	bl	10d28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   110b0:	ebfffd2c 	bl	10568 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   110b4:	e3a03001 	mov	r3, #1
}
   110b8:	e1a00003 	mov	r0, r3
   110bc:	e24bd004 	sub	sp, fp, #4
   110c0:	e8bd8800 	pop	{fp, pc}

000110c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   110c4:	e92d4800 	push	{fp, lr}
   110c8:	e28db004 	add	fp, sp, #4
   110cc:	e24dd020 	sub	sp, sp, #32
   110d0:	e50b0018 	str	r0, [fp, #-24]
   110d4:	e50b101c 	str	r1, [fp, #-28]
   110d8:	e1a03002 	mov	r3, r2
   110dc:	e54b301d 	strb	r3, [fp, #-29]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   110e0:	e3a03000 	mov	r3, #0
   110e4:	e50b3008 	str	r3, [fp, #-8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   110e8:	e51b3018 	ldr	r3, [fp, #-24]
   110ec:	e3530000 	cmp	r3, #0
   110f0:	0a000021 	beq	1117c <xQueueGenericCreate+0xb8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   110f4:	e3a0004c 	mov	r0, #76	; 0x4c
   110f8:	eb000b58 	bl	13e60 <pvPortMalloc>
   110fc:	e50b000c 	str	r0, [fp, #-12]
		if( pxNewQueue != NULL )
   11100:	e51b300c 	ldr	r3, [fp, #-12]
   11104:	e3530000 	cmp	r3, #0
   11108:	0a00001b 	beq	1117c <xQueueGenericCreate+0xb8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   1110c:	e51b3018 	ldr	r3, [fp, #-24]
   11110:	e51b201c 	ldr	r2, [fp, #-28]
   11114:	e0030392 	mul	r3, r2, r3
   11118:	e2833001 	add	r3, r3, #1
   1111c:	e50b3010 	str	r3, [fp, #-16]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   11120:	e51b0010 	ldr	r0, [fp, #-16]
   11124:	eb000b4d 	bl	13e60 <pvPortMalloc>
   11128:	e1a02000 	mov	r2, r0
   1112c:	e51b300c 	ldr	r3, [fp, #-12]
   11130:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   11134:	e51b300c 	ldr	r3, [fp, #-12]
   11138:	e5933000 	ldr	r3, [r3]
   1113c:	e3530000 	cmp	r3, #0
   11140:	0a00000b 	beq	11174 <xQueueGenericCreate+0xb0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   11144:	e51b300c 	ldr	r3, [fp, #-12]
   11148:	e51b2018 	ldr	r2, [fp, #-24]
   1114c:	e583203c 	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   11150:	e51b300c 	ldr	r3, [fp, #-12]
   11154:	e51b201c 	ldr	r2, [fp, #-28]
   11158:	e5832040 	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   1115c:	e51b000c 	ldr	r0, [fp, #-12]
   11160:	e3a01001 	mov	r1, #1
   11164:	ebffff91 	bl	10fb0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   11168:	e51b300c 	ldr	r3, [fp, #-12]
   1116c:	e50b3008 	str	r3, [fp, #-8]
   11170:	ea000001 	b	1117c <xQueueGenericCreate+0xb8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   11174:	e51b000c 	ldr	r0, [fp, #-12]
   11178:	eb000ba9 	bl	14024 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   1117c:	e51b3008 	ldr	r3, [fp, #-8]
}
   11180:	e1a00003 	mov	r0, r3
   11184:	e24bd004 	sub	sp, fp, #4
   11188:	e8bd8800 	pop	{fp, pc}

0001118c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   1118c:	e92d4800 	push	{fp, lr}
   11190:	e28db004 	add	fp, sp, #4
   11194:	e24dd020 	sub	sp, sp, #32
   11198:	e50b0018 	str	r0, [fp, #-24]
   1119c:	e50b101c 	str	r1, [fp, #-28]
   111a0:	e50b2020 	str	r2, [fp, #-32]
   111a4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   111a8:	e3a03000 	mov	r3, #0
   111ac:	e50b3008 	str	r3, [fp, #-8]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   111b0:	ebfffcdc 	bl	10528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   111b4:	e51b3018 	ldr	r3, [fp, #-24]
   111b8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   111bc:	e51b3018 	ldr	r3, [fp, #-24]
   111c0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   111c4:	e1520003 	cmp	r2, r3
   111c8:	2a000012 	bcs	11218 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   111cc:	e51b0018 	ldr	r0, [fp, #-24]
   111d0:	e51b101c 	ldr	r1, [fp, #-28]
   111d4:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
   111d8:	eb00016d 	bl	11794 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   111dc:	e51b3018 	ldr	r3, [fp, #-24]
   111e0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   111e4:	e3530000 	cmp	r3, #0
   111e8:	0a000007 	beq	1120c <xQueueGenericSend+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   111ec:	e51b3018 	ldr	r3, [fp, #-24]
   111f0:	e2833024 	add	r3, r3, #36	; 0x24
   111f4:	e1a00003 	mov	r0, r3
   111f8:	eb0006f6 	bl	12dd8 <xTaskRemoveFromEventList>
   111fc:	e1a03000 	mov	r3, r0
   11200:	e3530001 	cmp	r3, #1
   11204:	1a000000 	bne	1120c <xQueueGenericSend+0x80>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   11208:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   1120c:	ebfffcd5 	bl	10568 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   11210:	e3a03001 	mov	r3, #1
   11214:	ea000044 	b	1132c <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11218:	e51b3020 	ldr	r3, [fp, #-32]
   1121c:	e3530000 	cmp	r3, #0
   11220:	1a000002 	bne	11230 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11224:	ebfffccf 	bl	10568 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   11228:	e3a03000 	mov	r3, #0
   1122c:	ea00003e 	b	1132c <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   11230:	e51b3008 	ldr	r3, [fp, #-8]
   11234:	e3530000 	cmp	r3, #0
   11238:	1a000004 	bne	11250 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1123c:	e24b3010 	sub	r3, fp, #16
   11240:	e1a00003 	mov	r0, r3
   11244:	eb000729 	bl	12ef0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11248:	e3a03001 	mov	r3, #1
   1124c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11250:	ebfffcc4 	bl	10568 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11254:	eb00050d 	bl	12690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11258:	ebfffcb2 	bl	10528 <vPortEnterCritical>
   1125c:	e51b3018 	ldr	r3, [fp, #-24]
   11260:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11264:	e3730001 	cmn	r3, #1
   11268:	1a000002 	bne	11278 <xQueueGenericSend+0xec>
   1126c:	e51b3018 	ldr	r3, [fp, #-24]
   11270:	e3a02000 	mov	r2, #0
   11274:	e5832044 	str	r2, [r3, #68]	; 0x44
   11278:	e51b3018 	ldr	r3, [fp, #-24]
   1127c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   11280:	e3730001 	cmn	r3, #1
   11284:	1a000002 	bne	11294 <xQueueGenericSend+0x108>
   11288:	e51b3018 	ldr	r3, [fp, #-24]
   1128c:	e3a02000 	mov	r2, #0
   11290:	e5832048 	str	r2, [r3, #72]	; 0x48
   11294:	ebfffcb3 	bl	10568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   11298:	e24b2010 	sub	r2, fp, #16
   1129c:	e24b3020 	sub	r3, fp, #32
   112a0:	e1a00002 	mov	r0, r2
   112a4:	e1a01003 	mov	r1, r3
   112a8:	eb000721 	bl	12f34 <xTaskCheckForTimeOut>
   112ac:	e1a03000 	mov	r3, r0
   112b0:	e3530000 	cmp	r3, #0
   112b4:	1a000016 	bne	11314 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   112b8:	e51b0018 	ldr	r0, [fp, #-24]
   112bc:	eb000205 	bl	11ad8 <prvIsQueueFull>
   112c0:	e1a03000 	mov	r3, r0
   112c4:	e3530000 	cmp	r3, #0
   112c8:	0a00000d 	beq	11304 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   112cc:	e51b3018 	ldr	r3, [fp, #-24]
   112d0:	e2832010 	add	r2, r3, #16
   112d4:	e51b3020 	ldr	r3, [fp, #-32]
   112d8:	e1a00002 	mov	r0, r2
   112dc:	e1a01003 	mov	r1, r3
   112e0:	eb000696 	bl	12d40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   112e4:	e51b0018 	ldr	r0, [fp, #-24]
   112e8:	eb000199 	bl	11954 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   112ec:	eb0004f2 	bl	126bc <xTaskResumeAll>
   112f0:	e1a03000 	mov	r3, r0
   112f4:	e3530000 	cmp	r3, #0
   112f8:	1a00000a 	bne	11328 <xQueueGenericSend+0x19c>
				{
					portYIELD_WITHIN_API();
   112fc:	ef000000 	svc	0x00000000
   11300:	ea000008 	b	11328 <xQueueGenericSend+0x19c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11304:	e51b0018 	ldr	r0, [fp, #-24]
   11308:	eb000191 	bl	11954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1130c:	eb0004ea 	bl	126bc <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   11310:	eaffffa6 	b	111b0 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   11314:	e51b0018 	ldr	r0, [fp, #-24]
   11318:	eb00018d 	bl	11954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1131c:	eb0004e6 	bl	126bc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   11320:	e3a03000 	mov	r3, #0
   11324:	ea000000 	b	1132c <xQueueGenericSend+0x1a0>
		}
	}
   11328:	eaffffa0 	b	111b0 <xQueueGenericSend+0x24>
}
   1132c:	e1a00003 	mov	r0, r3
   11330:	e24bd004 	sub	sp, fp, #4
   11334:	e8bd8800 	pop	{fp, pc}

00011338 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   11338:	e92d4800 	push	{fp, lr}
   1133c:	e28db004 	add	fp, sp, #4
   11340:	e24dd018 	sub	sp, sp, #24
   11344:	e50b0010 	str	r0, [fp, #-16]
   11348:	e50b1014 	str	r1, [fp, #-20]
   1134c:	e50b2018 	str	r2, [fp, #-24]
   11350:	e50b301c 	str	r3, [fp, #-28]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11354:	e3a03000 	mov	r3, #0
   11358:	e50b300c 	str	r3, [fp, #-12]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   1135c:	e51b3010 	ldr	r3, [fp, #-16]
   11360:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11364:	e51b3010 	ldr	r3, [fp, #-16]
   11368:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   1136c:	e1520003 	cmp	r2, r3
   11370:	2a000021 	bcs	113fc <xQueueGenericSendFromISR+0xc4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   11374:	e51b0010 	ldr	r0, [fp, #-16]
   11378:	e51b1014 	ldr	r1, [fp, #-20]
   1137c:	e51b201c 	ldr	r2, [fp, #-28]
   11380:	eb000103 	bl	11794 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   11384:	e51b3010 	ldr	r3, [fp, #-16]
   11388:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1138c:	e3730001 	cmn	r3, #1
   11390:	1a000011 	bne	113dc <xQueueGenericSendFromISR+0xa4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   11394:	e51b3010 	ldr	r3, [fp, #-16]
   11398:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1139c:	e3530000 	cmp	r3, #0
   113a0:	0a000012 	beq	113f0 <xQueueGenericSendFromISR+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   113a4:	e51b3010 	ldr	r3, [fp, #-16]
   113a8:	e2833024 	add	r3, r3, #36	; 0x24
   113ac:	e1a00003 	mov	r0, r3
   113b0:	eb000688 	bl	12dd8 <xTaskRemoveFromEventList>
   113b4:	e1a03000 	mov	r3, r0
   113b8:	e3530000 	cmp	r3, #0
   113bc:	0a00000b 	beq	113f0 <xQueueGenericSendFromISR+0xb8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   113c0:	e51b3018 	ldr	r3, [fp, #-24]
   113c4:	e3530000 	cmp	r3, #0
   113c8:	0a000008 	beq	113f0 <xQueueGenericSendFromISR+0xb8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   113cc:	e51b3018 	ldr	r3, [fp, #-24]
   113d0:	e3a02001 	mov	r2, #1
   113d4:	e5832000 	str	r2, [r3]
   113d8:	ea000004 	b	113f0 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   113dc:	e51b3010 	ldr	r3, [fp, #-16]
   113e0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   113e4:	e2832001 	add	r2, r3, #1
   113e8:	e51b3010 	ldr	r3, [fp, #-16]
   113ec:	e5832048 	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   113f0:	e3a03001 	mov	r3, #1
   113f4:	e50b3008 	str	r3, [fp, #-8]
   113f8:	ea000001 	b	11404 <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   113fc:	e3a03000 	mov	r3, #0
   11400:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11404:	e51b3008 	ldr	r3, [fp, #-8]
}
   11408:	e1a00003 	mov	r0, r3
   1140c:	e24bd004 	sub	sp, fp, #4
   11410:	e8bd8800 	pop	{fp, pc}

00011414 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   11414:	e92d4800 	push	{fp, lr}
   11418:	e28db004 	add	fp, sp, #4
   1141c:	e24dd020 	sub	sp, sp, #32
   11420:	e50b0018 	str	r0, [fp, #-24]
   11424:	e50b101c 	str	r1, [fp, #-28]
   11428:	e50b2020 	str	r2, [fp, #-32]
   1142c:	e50b3024 	str	r3, [fp, #-36]	; 0x24
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   11430:	e3a03000 	mov	r3, #0
   11434:	e50b3008 	str	r3, [fp, #-8]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   11438:	ebfffc3a 	bl	10528 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   1143c:	e51b3018 	ldr	r3, [fp, #-24]
   11440:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11444:	e3530000 	cmp	r3, #0
   11448:	0a00002c 	beq	11500 <xQueueGenericReceive+0xec>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   1144c:	e51b3018 	ldr	r3, [fp, #-24]
   11450:	e593300c 	ldr	r3, [r3, #12]
   11454:	e50b300c 	str	r3, [fp, #-12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   11458:	e51b0018 	ldr	r0, [fp, #-24]
   1145c:	e51b101c 	ldr	r1, [fp, #-28]
   11460:	eb000117 	bl	118c4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   11464:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
   11468:	e3530000 	cmp	r3, #0
   1146c:	1a000011 	bne	114b8 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   11470:	e51b3018 	ldr	r3, [fp, #-24]
   11474:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11478:	e2432001 	sub	r2, r3, #1
   1147c:	e51b3018 	ldr	r3, [fp, #-24]
   11480:	e5832038 	str	r2, [r3, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11484:	e51b3018 	ldr	r3, [fp, #-24]
   11488:	e5933010 	ldr	r3, [r3, #16]
   1148c:	e3530000 	cmp	r3, #0
   11490:	0a000017 	beq	114f4 <xQueueGenericReceive+0xe0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   11494:	e51b3018 	ldr	r3, [fp, #-24]
   11498:	e2833010 	add	r3, r3, #16
   1149c:	e1a00003 	mov	r0, r3
   114a0:	eb00064c 	bl	12dd8 <xTaskRemoveFromEventList>
   114a4:	e1a03000 	mov	r3, r0
   114a8:	e3530001 	cmp	r3, #1
   114ac:	1a000010 	bne	114f4 <xQueueGenericReceive+0xe0>
						{
							portYIELD_WITHIN_API();
   114b0:	ef000000 	svc	0x00000000
   114b4:	ea00000e 	b	114f4 <xQueueGenericReceive+0xe0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   114b8:	e51b3018 	ldr	r3, [fp, #-24]
   114bc:	e51b200c 	ldr	r2, [fp, #-12]
   114c0:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   114c4:	e51b3018 	ldr	r3, [fp, #-24]
   114c8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   114cc:	e3530000 	cmp	r3, #0
   114d0:	0a000007 	beq	114f4 <xQueueGenericReceive+0xe0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   114d4:	e51b3018 	ldr	r3, [fp, #-24]
   114d8:	e2833024 	add	r3, r3, #36	; 0x24
   114dc:	e1a00003 	mov	r0, r3
   114e0:	eb00063c 	bl	12dd8 <xTaskRemoveFromEventList>
   114e4:	e1a03000 	mov	r3, r0
   114e8:	e3530000 	cmp	r3, #0
   114ec:	0a000000 	beq	114f4 <xQueueGenericReceive+0xe0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   114f0:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   114f4:	ebfffc1b 	bl	10568 <vPortExitCritical>
				return pdPASS;
   114f8:	e3a03001 	mov	r3, #1
   114fc:	ea000044 	b	11614 <xQueueGenericReceive+0x200>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11500:	e51b3020 	ldr	r3, [fp, #-32]
   11504:	e3530000 	cmp	r3, #0
   11508:	1a000002 	bne	11518 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1150c:	ebfffc15 	bl	10568 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   11510:	e3a03000 	mov	r3, #0
   11514:	ea00003e 	b	11614 <xQueueGenericReceive+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
   11518:	e51b3008 	ldr	r3, [fp, #-8]
   1151c:	e3530000 	cmp	r3, #0
   11520:	1a000004 	bne	11538 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   11524:	e24b3014 	sub	r3, fp, #20
   11528:	e1a00003 	mov	r0, r3
   1152c:	eb00066f 	bl	12ef0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11530:	e3a03001 	mov	r3, #1
   11534:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11538:	ebfffc0a 	bl	10568 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1153c:	eb000453 	bl	12690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11540:	ebfffbf8 	bl	10528 <vPortEnterCritical>
   11544:	e51b3018 	ldr	r3, [fp, #-24]
   11548:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   1154c:	e3730001 	cmn	r3, #1
   11550:	1a000002 	bne	11560 <xQueueGenericReceive+0x14c>
   11554:	e51b3018 	ldr	r3, [fp, #-24]
   11558:	e3a02000 	mov	r2, #0
   1155c:	e5832044 	str	r2, [r3, #68]	; 0x44
   11560:	e51b3018 	ldr	r3, [fp, #-24]
   11564:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   11568:	e3730001 	cmn	r3, #1
   1156c:	1a000002 	bne	1157c <xQueueGenericReceive+0x168>
   11570:	e51b3018 	ldr	r3, [fp, #-24]
   11574:	e3a02000 	mov	r2, #0
   11578:	e5832048 	str	r2, [r3, #72]	; 0x48
   1157c:	ebfffbf9 	bl	10568 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   11580:	e24b2014 	sub	r2, fp, #20
   11584:	e24b3020 	sub	r3, fp, #32
   11588:	e1a00002 	mov	r0, r2
   1158c:	e1a01003 	mov	r1, r3
   11590:	eb000667 	bl	12f34 <xTaskCheckForTimeOut>
   11594:	e1a03000 	mov	r3, r0
   11598:	e3530000 	cmp	r3, #0
   1159c:	1a000016 	bne	115fc <xQueueGenericReceive+0x1e8>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   115a0:	e51b0018 	ldr	r0, [fp, #-24]
   115a4:	eb00012a 	bl	11a54 <prvIsQueueEmpty>
   115a8:	e1a03000 	mov	r3, r0
   115ac:	e3530000 	cmp	r3, #0
   115b0:	0a00000d 	beq	115ec <xQueueGenericReceive+0x1d8>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   115b4:	e51b3018 	ldr	r3, [fp, #-24]
   115b8:	e2832024 	add	r2, r3, #36	; 0x24
   115bc:	e51b3020 	ldr	r3, [fp, #-32]
   115c0:	e1a00002 	mov	r0, r2
   115c4:	e1a01003 	mov	r1, r3
   115c8:	eb0005dc 	bl	12d40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   115cc:	e51b0018 	ldr	r0, [fp, #-24]
   115d0:	eb0000df 	bl	11954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   115d4:	eb000438 	bl	126bc <xTaskResumeAll>
   115d8:	e1a03000 	mov	r3, r0
   115dc:	e3530000 	cmp	r3, #0
   115e0:	1a00000a 	bne	11610 <xQueueGenericReceive+0x1fc>
				{
					portYIELD_WITHIN_API();
   115e4:	ef000000 	svc	0x00000000
   115e8:	ea000008 	b	11610 <xQueueGenericReceive+0x1fc>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   115ec:	e51b0018 	ldr	r0, [fp, #-24]
   115f0:	eb0000d7 	bl	11954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   115f4:	eb000430 	bl	126bc <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   115f8:	eaffff8e 	b	11438 <xQueueGenericReceive+0x24>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   115fc:	e51b0018 	ldr	r0, [fp, #-24]
   11600:	eb0000d3 	bl	11954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   11604:	eb00042c 	bl	126bc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   11608:	e3a03000 	mov	r3, #0
   1160c:	ea000000 	b	11614 <xQueueGenericReceive+0x200>
		}
	}
   11610:	eaffff88 	b	11438 <xQueueGenericReceive+0x24>
}
   11614:	e1a00003 	mov	r0, r3
   11618:	e24bd004 	sub	sp, fp, #4
   1161c:	e8bd8800 	pop	{fp, pc}

00011620 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   11620:	e92d4800 	push	{fp, lr}
   11624:	e28db004 	add	fp, sp, #4
   11628:	e24dd018 	sub	sp, sp, #24
   1162c:	e50b0010 	str	r0, [fp, #-16]
   11630:	e50b1014 	str	r1, [fp, #-20]
   11634:	e50b2018 	str	r2, [fp, #-24]
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11638:	e3a03000 	mov	r3, #0
   1163c:	e50b300c 	str	r3, [fp, #-12]
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11640:	e51b3010 	ldr	r3, [fp, #-16]
   11644:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11648:	e3530000 	cmp	r3, #0
   1164c:	0a000025 	beq	116e8 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   11650:	e51b0010 	ldr	r0, [fp, #-16]
   11654:	e51b1014 	ldr	r1, [fp, #-20]
   11658:	eb000099 	bl	118c4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   1165c:	e51b3010 	ldr	r3, [fp, #-16]
   11660:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11664:	e2432001 	sub	r2, r3, #1
   11668:	e51b3010 	ldr	r3, [fp, #-16]
   1166c:	e5832038 	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   11670:	e51b3010 	ldr	r3, [fp, #-16]
   11674:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11678:	e3730001 	cmn	r3, #1
   1167c:	1a000011 	bne	116c8 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11680:	e51b3010 	ldr	r3, [fp, #-16]
   11684:	e5933010 	ldr	r3, [r3, #16]
   11688:	e3530000 	cmp	r3, #0
   1168c:	0a000012 	beq	116dc <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11690:	e51b3010 	ldr	r3, [fp, #-16]
   11694:	e2833010 	add	r3, r3, #16
   11698:	e1a00003 	mov	r0, r3
   1169c:	eb0005cd 	bl	12dd8 <xTaskRemoveFromEventList>
   116a0:	e1a03000 	mov	r3, r0
   116a4:	e3530000 	cmp	r3, #0
   116a8:	0a00000b 	beq	116dc <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   116ac:	e51b3018 	ldr	r3, [fp, #-24]
   116b0:	e3530000 	cmp	r3, #0
   116b4:	0a000008 	beq	116dc <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   116b8:	e51b3018 	ldr	r3, [fp, #-24]
   116bc:	e3a02001 	mov	r2, #1
   116c0:	e5832000 	str	r2, [r3]
   116c4:	ea000004 	b	116dc <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   116c8:	e51b3010 	ldr	r3, [fp, #-16]
   116cc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   116d0:	e2832001 	add	r2, r3, #1
   116d4:	e51b3010 	ldr	r3, [fp, #-16]
   116d8:	e5832044 	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   116dc:	e3a03001 	mov	r3, #1
   116e0:	e50b3008 	str	r3, [fp, #-8]
   116e4:	ea000001 	b	116f0 <xQueueReceiveFromISR+0xd0>
		}
		else
		{
			xReturn = pdFAIL;
   116e8:	e3a03000 	mov	r3, #0
   116ec:	e50b3008 	str	r3, [fp, #-8]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   116f0:	e51b3008 	ldr	r3, [fp, #-8]
}
   116f4:	e1a00003 	mov	r0, r3
   116f8:	e24bd004 	sub	sp, fp, #4
   116fc:	e8bd8800 	pop	{fp, pc}

00011700 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   11700:	e92d4800 	push	{fp, lr}
   11704:	e28db004 	add	fp, sp, #4
   11708:	e24dd010 	sub	sp, sp, #16
   1170c:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11710:	ebfffb84 	bl	10528 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   11714:	e51b3010 	ldr	r3, [fp, #-16]
   11718:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1171c:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11720:	ebfffb90 	bl	10568 <vPortExitCritical>

	return uxReturn;
   11724:	e51b3008 	ldr	r3, [fp, #-8]
}
   11728:	e1a00003 	mov	r0, r3
   1172c:	e24bd004 	sub	sp, fp, #4
   11730:	e8bd8800 	pop	{fp, pc}

00011734 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   11734:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11738:	e28db000 	add	fp, sp, #0
   1173c:	e24dd014 	sub	sp, sp, #20
   11740:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   11744:	e51b3010 	ldr	r3, [fp, #-16]
   11748:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1174c:	e50b3008 	str	r3, [fp, #-8]

	return uxReturn;
   11750:	e51b3008 	ldr	r3, [fp, #-8]
}
   11754:	e1a00003 	mov	r0, r3
   11758:	e24bd000 	sub	sp, fp, #0
   1175c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11760:	e12fff1e 	bx	lr

00011764 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   11764:	e92d4800 	push	{fp, lr}
   11768:	e28db004 	add	fp, sp, #4
   1176c:	e24dd008 	sub	sp, sp, #8
   11770:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   11774:	e51b3008 	ldr	r3, [fp, #-8]
   11778:	e5933000 	ldr	r3, [r3]
   1177c:	e1a00003 	mov	r0, r3
   11780:	eb000a27 	bl	14024 <vPortFree>
	vPortFree( pxQueue );
   11784:	e51b0008 	ldr	r0, [fp, #-8]
   11788:	eb000a25 	bl	14024 <vPortFree>
}
   1178c:	e24bd004 	sub	sp, fp, #4
   11790:	e8bd8800 	pop	{fp, pc}

00011794 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   11794:	e92d4800 	push	{fp, lr}
   11798:	e28db004 	add	fp, sp, #4
   1179c:	e24dd010 	sub	sp, sp, #16
   117a0:	e50b0008 	str	r0, [fp, #-8]
   117a4:	e50b100c 	str	r1, [fp, #-12]
   117a8:	e50b2010 	str	r2, [fp, #-16]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   117ac:	e51b3008 	ldr	r3, [fp, #-8]
   117b0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   117b4:	e3530000 	cmp	r3, #0
   117b8:	0a00003a 	beq	118a8 <prvCopyDataToQueue+0x114>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   117bc:	e51b3010 	ldr	r3, [fp, #-16]
   117c0:	e3530000 	cmp	r3, #0
   117c4:	1a000019 	bne	11830 <prvCopyDataToQueue+0x9c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   117c8:	e51b3008 	ldr	r3, [fp, #-8]
   117cc:	e5932008 	ldr	r2, [r3, #8]
   117d0:	e51b3008 	ldr	r3, [fp, #-8]
   117d4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   117d8:	e1a00002 	mov	r0, r2
   117dc:	e51b100c 	ldr	r1, [fp, #-12]
   117e0:	e1a02003 	mov	r2, r3
   117e4:	eb000b1c 	bl	1445c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   117e8:	e51b3008 	ldr	r3, [fp, #-8]
   117ec:	e5932008 	ldr	r2, [r3, #8]
   117f0:	e51b3008 	ldr	r3, [fp, #-8]
   117f4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   117f8:	e0822003 	add	r2, r2, r3
   117fc:	e51b3008 	ldr	r3, [fp, #-8]
   11800:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   11804:	e51b3008 	ldr	r3, [fp, #-8]
   11808:	e5932008 	ldr	r2, [r3, #8]
   1180c:	e51b3008 	ldr	r3, [fp, #-8]
   11810:	e5933004 	ldr	r3, [r3, #4]
   11814:	e1520003 	cmp	r2, r3
   11818:	3a000022 	bcc	118a8 <prvCopyDataToQueue+0x114>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1181c:	e51b3008 	ldr	r3, [fp, #-8]
   11820:	e5932000 	ldr	r2, [r3]
   11824:	e51b3008 	ldr	r3, [fp, #-8]
   11828:	e5832008 	str	r2, [r3, #8]
   1182c:	ea00001d 	b	118a8 <prvCopyDataToQueue+0x114>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   11830:	e51b3008 	ldr	r3, [fp, #-8]
   11834:	e593200c 	ldr	r2, [r3, #12]
   11838:	e51b3008 	ldr	r3, [fp, #-8]
   1183c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11840:	e1a00002 	mov	r0, r2
   11844:	e51b100c 	ldr	r1, [fp, #-12]
   11848:	e1a02003 	mov	r2, r3
   1184c:	eb000b02 	bl	1445c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   11850:	e51b3008 	ldr	r3, [fp, #-8]
   11854:	e593200c 	ldr	r2, [r3, #12]
   11858:	e51b3008 	ldr	r3, [fp, #-8]
   1185c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11860:	e2633000 	rsb	r3, r3, #0
   11864:	e0822003 	add	r2, r2, r3
   11868:	e51b3008 	ldr	r3, [fp, #-8]
   1186c:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   11870:	e51b3008 	ldr	r3, [fp, #-8]
   11874:	e593200c 	ldr	r2, [r3, #12]
   11878:	e51b3008 	ldr	r3, [fp, #-8]
   1187c:	e5933000 	ldr	r3, [r3]
   11880:	e1520003 	cmp	r2, r3
   11884:	2a000007 	bcs	118a8 <prvCopyDataToQueue+0x114>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   11888:	e51b3008 	ldr	r3, [fp, #-8]
   1188c:	e5932004 	ldr	r2, [r3, #4]
   11890:	e51b3008 	ldr	r3, [fp, #-8]
   11894:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11898:	e2633000 	rsb	r3, r3, #0
   1189c:	e0822003 	add	r2, r2, r3
   118a0:	e51b3008 	ldr	r3, [fp, #-8]
   118a4:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   118a8:	e51b3008 	ldr	r3, [fp, #-8]
   118ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   118b0:	e2832001 	add	r2, r3, #1
   118b4:	e51b3008 	ldr	r3, [fp, #-8]
   118b8:	e5832038 	str	r2, [r3, #56]	; 0x38
}
   118bc:	e24bd004 	sub	sp, fp, #4
   118c0:	e8bd8800 	pop	{fp, pc}

000118c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   118c4:	e92d4800 	push	{fp, lr}
   118c8:	e28db004 	add	fp, sp, #4
   118cc:	e24dd008 	sub	sp, sp, #8
   118d0:	e50b0008 	str	r0, [fp, #-8]
   118d4:	e50b100c 	str	r1, [fp, #-12]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   118d8:	e51b3008 	ldr	r3, [fp, #-8]
   118dc:	e5933000 	ldr	r3, [r3]
   118e0:	e3530000 	cmp	r3, #0
   118e4:	0a000018 	beq	1194c <prvCopyDataFromQueue+0x88>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   118e8:	e51b3008 	ldr	r3, [fp, #-8]
   118ec:	e593200c 	ldr	r2, [r3, #12]
   118f0:	e51b3008 	ldr	r3, [fp, #-8]
   118f4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   118f8:	e0822003 	add	r2, r2, r3
   118fc:	e51b3008 	ldr	r3, [fp, #-8]
   11900:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   11904:	e51b3008 	ldr	r3, [fp, #-8]
   11908:	e593200c 	ldr	r2, [r3, #12]
   1190c:	e51b3008 	ldr	r3, [fp, #-8]
   11910:	e5933004 	ldr	r3, [r3, #4]
   11914:	e1520003 	cmp	r2, r3
   11918:	3a000003 	bcc	1192c <prvCopyDataFromQueue+0x68>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   1191c:	e51b3008 	ldr	r3, [fp, #-8]
   11920:	e5932000 	ldr	r2, [r3]
   11924:	e51b3008 	ldr	r3, [fp, #-8]
   11928:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   1192c:	e51b3008 	ldr	r3, [fp, #-8]
   11930:	e593200c 	ldr	r2, [r3, #12]
   11934:	e51b3008 	ldr	r3, [fp, #-8]
   11938:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1193c:	e51b000c 	ldr	r0, [fp, #-12]
   11940:	e1a01002 	mov	r1, r2
   11944:	e1a02003 	mov	r2, r3
   11948:	eb000ac3 	bl	1445c <memcpy>
	}
}
   1194c:	e24bd004 	sub	sp, fp, #4
   11950:	e8bd8800 	pop	{fp, pc}

00011954 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   11954:	e92d4800 	push	{fp, lr}
   11958:	e28db004 	add	fp, sp, #4
   1195c:	e24dd008 	sub	sp, sp, #8
   11960:	e50b0008 	str	r0, [fp, #-8]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   11964:	ebfffaef 	bl	10528 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   11968:	ea000012 	b	119b8 <prvUnlockQueue+0x64>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1196c:	e51b3008 	ldr	r3, [fp, #-8]
   11970:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11974:	e3530000 	cmp	r3, #0
   11978:	0a00000d 	beq	119b4 <prvUnlockQueue+0x60>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1197c:	e51b3008 	ldr	r3, [fp, #-8]
   11980:	e2833024 	add	r3, r3, #36	; 0x24
   11984:	e1a00003 	mov	r0, r3
   11988:	eb000512 	bl	12dd8 <xTaskRemoveFromEventList>
   1198c:	e1a03000 	mov	r3, r0
   11990:	e3530000 	cmp	r3, #0
   11994:	0a000000 	beq	1199c <prvUnlockQueue+0x48>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   11998:	eb0005a2 	bl	13028 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   1199c:	e51b3008 	ldr	r3, [fp, #-8]
   119a0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119a4:	e2432001 	sub	r2, r3, #1
   119a8:	e51b3008 	ldr	r3, [fp, #-8]
   119ac:	e5832048 	str	r2, [r3, #72]	; 0x48
   119b0:	ea000000 	b	119b8 <prvUnlockQueue+0x64>
			}
			else
			{
				break;
   119b4:	ea000003 	b	119c8 <prvUnlockQueue+0x74>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   119b8:	e51b3008 	ldr	r3, [fp, #-8]
   119bc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119c0:	e3530000 	cmp	r3, #0
   119c4:	caffffe8 	bgt	1196c <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   119c8:	e51b3008 	ldr	r3, [fp, #-8]
   119cc:	e3e02000 	mvn	r2, #0
   119d0:	e5832048 	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   119d4:	ebfffae3 	bl	10568 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   119d8:	ebfffad2 	bl	10528 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   119dc:	ea000012 	b	11a2c <prvUnlockQueue+0xd8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   119e0:	e51b3008 	ldr	r3, [fp, #-8]
   119e4:	e5933010 	ldr	r3, [r3, #16]
   119e8:	e3530000 	cmp	r3, #0
   119ec:	0a00000d 	beq	11a28 <prvUnlockQueue+0xd4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   119f0:	e51b3008 	ldr	r3, [fp, #-8]
   119f4:	e2833010 	add	r3, r3, #16
   119f8:	e1a00003 	mov	r0, r3
   119fc:	eb0004f5 	bl	12dd8 <xTaskRemoveFromEventList>
   11a00:	e1a03000 	mov	r3, r0
   11a04:	e3530000 	cmp	r3, #0
   11a08:	0a000000 	beq	11a10 <prvUnlockQueue+0xbc>
				{
					vTaskMissedYield();
   11a0c:	eb000585 	bl	13028 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   11a10:	e51b3008 	ldr	r3, [fp, #-8]
   11a14:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a18:	e2432001 	sub	r2, r3, #1
   11a1c:	e51b3008 	ldr	r3, [fp, #-8]
   11a20:	e5832044 	str	r2, [r3, #68]	; 0x44
   11a24:	ea000000 	b	11a2c <prvUnlockQueue+0xd8>
			}
			else
			{
				break;
   11a28:	ea000003 	b	11a3c <prvUnlockQueue+0xe8>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a2c:	e51b3008 	ldr	r3, [fp, #-8]
   11a30:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a34:	e3530000 	cmp	r3, #0
   11a38:	caffffe8 	bgt	119e0 <prvUnlockQueue+0x8c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   11a3c:	e51b3008 	ldr	r3, [fp, #-8]
   11a40:	e3e02000 	mvn	r2, #0
   11a44:	e5832044 	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   11a48:	ebfffac6 	bl	10568 <vPortExitCritical>
}
   11a4c:	e24bd004 	sub	sp, fp, #4
   11a50:	e8bd8800 	pop	{fp, pc}

00011a54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   11a54:	e92d4800 	push	{fp, lr}
   11a58:	e28db004 	add	fp, sp, #4
   11a5c:	e24dd010 	sub	sp, sp, #16
   11a60:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11a64:	ebfffaaf 	bl	10528 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11a68:	e51b3010 	ldr	r3, [fp, #-16]
   11a6c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11a70:	e3530000 	cmp	r3, #0
   11a74:	13a03000 	movne	r3, #0
   11a78:	03a03001 	moveq	r3, #1
   11a7c:	e6ef3073 	uxtb	r3, r3
   11a80:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11a84:	ebfffab7 	bl	10568 <vPortExitCritical>

	return xReturn;
   11a88:	e51b3008 	ldr	r3, [fp, #-8]
}
   11a8c:	e1a00003 	mov	r0, r3
   11a90:	e24bd004 	sub	sp, fp, #4
   11a94:	e8bd8800 	pop	{fp, pc}

00011a98 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   11a98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11a9c:	e28db000 	add	fp, sp, #0
   11aa0:	e24dd014 	sub	sp, sp, #20
   11aa4:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11aa8:	e51b3010 	ldr	r3, [fp, #-16]
   11aac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11ab0:	e3530000 	cmp	r3, #0
   11ab4:	13a03000 	movne	r3, #0
   11ab8:	03a03001 	moveq	r3, #1
   11abc:	e6ef3073 	uxtb	r3, r3
   11ac0:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11ac4:	e51b3008 	ldr	r3, [fp, #-8]
}
   11ac8:	e1a00003 	mov	r0, r3
   11acc:	e24bd000 	sub	sp, fp, #0
   11ad0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11ad4:	e12fff1e 	bx	lr

00011ad8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   11ad8:	e92d4800 	push	{fp, lr}
   11adc:	e28db004 	add	fp, sp, #4
   11ae0:	e24dd010 	sub	sp, sp, #16
   11ae4:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11ae8:	ebfffa8e 	bl	10528 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11aec:	e51b3010 	ldr	r3, [fp, #-16]
   11af0:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11af4:	e51b3010 	ldr	r3, [fp, #-16]
   11af8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11afc:	e1520003 	cmp	r2, r3
   11b00:	13a03000 	movne	r3, #0
   11b04:	03a03001 	moveq	r3, #1
   11b08:	e6ef3073 	uxtb	r3, r3
   11b0c:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11b10:	ebfffa94 	bl	10568 <vPortExitCritical>

	return xReturn;
   11b14:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b18:	e1a00003 	mov	r0, r3
   11b1c:	e24bd004 	sub	sp, fp, #4
   11b20:	e8bd8800 	pop	{fp, pc}

00011b24 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   11b24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11b28:	e28db000 	add	fp, sp, #0
   11b2c:	e24dd014 	sub	sp, sp, #20
   11b30:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b34:	e51b3010 	ldr	r3, [fp, #-16]
   11b38:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b3c:	e51b3010 	ldr	r3, [fp, #-16]
   11b40:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b44:	e1520003 	cmp	r2, r3
   11b48:	13a03000 	movne	r3, #0
   11b4c:	03a03001 	moveq	r3, #1
   11b50:	e6ef3073 	uxtb	r3, r3
   11b54:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11b58:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b5c:	e1a00003 	mov	r0, r3
   11b60:	e24bd000 	sub	sp, fp, #0
   11b64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b68:	e12fff1e 	bx	lr

00011b6c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   11b6c:	e92d4800 	push	{fp, lr}
   11b70:	e28db004 	add	fp, sp, #4
   11b74:	e24dd028 	sub	sp, sp, #40	; 0x28
   11b78:	e50b0018 	str	r0, [fp, #-24]
   11b7c:	e50b101c 	str	r1, [fp, #-28]
   11b80:	e50b3024 	str	r3, [fp, #-36]	; 0x24
   11b84:	e14b21be 	strh	r2, [fp, #-30]	; 0xffffffe2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   11b88:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11b8c:	e1a00003 	mov	r0, r3
   11b90:	e59b100c 	ldr	r1, [fp, #12]
   11b94:	eb0005f2 	bl	13364 <prvAllocateTCBAndStack>
   11b98:	e50b000c 	str	r0, [fp, #-12]

	if( pxNewTCB != NULL )
   11b9c:	e51b300c 	ldr	r3, [fp, #-12]
   11ba0:	e3530000 	cmp	r3, #0
   11ba4:	0a000067 	beq	11d48 <xTaskGenericCreate+0x1dc>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   11ba8:	e51b300c 	ldr	r3, [fp, #-12]
   11bac:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   11bb0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11bb4:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   11bb8:	e1a03103 	lsl	r3, r3, #2
   11bbc:	e0823003 	add	r3, r2, r3
   11bc0:	e50b3010 	str	r3, [fp, #-16]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   11bc4:	e51b3010 	ldr	r3, [fp, #-16]
   11bc8:	e3c33007 	bic	r3, r3, #7
   11bcc:	e50b3010 	str	r3, [fp, #-16]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   11bd0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11bd4:	e58d3000 	str	r3, [sp]
   11bd8:	e51b000c 	ldr	r0, [fp, #-12]
   11bdc:	e51b101c 	ldr	r1, [fp, #-28]
   11be0:	e59b2004 	ldr	r2, [fp, #4]
   11be4:	e59b3010 	ldr	r3, [fp, #16]
   11be8:	eb000524 	bl	13080 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   11bec:	e51b0010 	ldr	r0, [fp, #-16]
   11bf0:	e51b1018 	ldr	r1, [fp, #-24]
   11bf4:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
   11bf8:	ebfff900 	bl	10000 <pxPortInitialiseStack>
   11bfc:	e1a02000 	mov	r2, r0
   11c00:	e51b300c 	ldr	r3, [fp, #-12]
   11c04:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   11c08:	e59b3008 	ldr	r3, [fp, #8]
   11c0c:	e3530000 	cmp	r3, #0
   11c10:	0a000002 	beq	11c20 <xTaskGenericCreate+0xb4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   11c14:	e59b3008 	ldr	r3, [fp, #8]
   11c18:	e51b200c 	ldr	r2, [fp, #-12]
   11c1c:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   11c20:	ebfffa40 	bl	10528 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   11c24:	e59f316c 	ldr	r3, [pc, #364]	; 11d98 <xTaskGenericCreate+0x22c>
   11c28:	e5933000 	ldr	r3, [r3]
   11c2c:	e2832001 	add	r2, r3, #1
   11c30:	e59f3160 	ldr	r3, [pc, #352]	; 11d98 <xTaskGenericCreate+0x22c>
   11c34:	e5832000 	str	r2, [r3]
			if( pxCurrentTCB == NULL )
   11c38:	e59f315c 	ldr	r3, [pc, #348]	; 11d9c <xTaskGenericCreate+0x230>
   11c3c:	e5933000 	ldr	r3, [r3]
   11c40:	e3530000 	cmp	r3, #0
   11c44:	1a000008 	bne	11c6c <xTaskGenericCreate+0x100>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   11c48:	e59f314c 	ldr	r3, [pc, #332]	; 11d9c <xTaskGenericCreate+0x230>
   11c4c:	e51b200c 	ldr	r2, [fp, #-12]
   11c50:	e5832000 	str	r2, [r3]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   11c54:	e59f313c 	ldr	r3, [pc, #316]	; 11d98 <xTaskGenericCreate+0x22c>
   11c58:	e5933000 	ldr	r3, [r3]
   11c5c:	e3530001 	cmp	r3, #1
   11c60:	1a00000e 	bne	11ca0 <xTaskGenericCreate+0x134>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   11c64:	eb000534 	bl	1313c <prvInitialiseTaskLists>
   11c68:	ea00000c 	b	11ca0 <xTaskGenericCreate+0x134>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   11c6c:	e59f312c 	ldr	r3, [pc, #300]	; 11da0 <xTaskGenericCreate+0x234>
   11c70:	e5933000 	ldr	r3, [r3]
   11c74:	e3530000 	cmp	r3, #0
   11c78:	1a000008 	bne	11ca0 <xTaskGenericCreate+0x134>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   11c7c:	e59f3118 	ldr	r3, [pc, #280]	; 11d9c <xTaskGenericCreate+0x230>
   11c80:	e5933000 	ldr	r3, [r3]
   11c84:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11c88:	e59b3004 	ldr	r3, [fp, #4]
   11c8c:	e1520003 	cmp	r2, r3
   11c90:	8a000002 	bhi	11ca0 <xTaskGenericCreate+0x134>
					{
						pxCurrentTCB = pxNewTCB;
   11c94:	e59f3100 	ldr	r3, [pc, #256]	; 11d9c <xTaskGenericCreate+0x230>
   11c98:	e51b200c 	ldr	r2, [fp, #-12]
   11c9c:	e5832000 	str	r2, [r3]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   11ca0:	e51b300c 	ldr	r3, [fp, #-12]
   11ca4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11ca8:	e59f30f4 	ldr	r3, [pc, #244]	; 11da4 <xTaskGenericCreate+0x238>
   11cac:	e5933000 	ldr	r3, [r3]
   11cb0:	e1520003 	cmp	r2, r3
   11cb4:	9a000003 	bls	11cc8 <xTaskGenericCreate+0x15c>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   11cb8:	e51b300c 	ldr	r3, [fp, #-12]
   11cbc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cc0:	e59f30dc 	ldr	r3, [pc, #220]	; 11da4 <xTaskGenericCreate+0x238>
   11cc4:	e5832000 	str	r2, [r3]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   11cc8:	e59f30d8 	ldr	r3, [pc, #216]	; 11da8 <xTaskGenericCreate+0x23c>
   11ccc:	e5933000 	ldr	r3, [r3]
   11cd0:	e2832001 	add	r2, r3, #1
   11cd4:	e59f30cc 	ldr	r3, [pc, #204]	; 11da8 <xTaskGenericCreate+0x23c>
   11cd8:	e5832000 	str	r2, [r3]

			prvAddTaskToReadyQueue( pxNewTCB );
   11cdc:	e51b300c 	ldr	r3, [fp, #-12]
   11ce0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11ce4:	e59f30c0 	ldr	r3, [pc, #192]	; 11dac <xTaskGenericCreate+0x240>
   11ce8:	e5933000 	ldr	r3, [r3]
   11cec:	e1520003 	cmp	r2, r3
   11cf0:	9a000003 	bls	11d04 <xTaskGenericCreate+0x198>
   11cf4:	e51b300c 	ldr	r3, [fp, #-12]
   11cf8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11cfc:	e59f30a8 	ldr	r3, [pc, #168]	; 11dac <xTaskGenericCreate+0x240>
   11d00:	e5832000 	str	r2, [r3]
   11d04:	e51b300c 	ldr	r3, [fp, #-12]
   11d08:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d0c:	e1a03002 	mov	r3, r2
   11d10:	e1a03103 	lsl	r3, r3, #2
   11d14:	e0833002 	add	r3, r3, r2
   11d18:	e1a03103 	lsl	r3, r3, #2
   11d1c:	e59f208c 	ldr	r2, [pc, #140]	; 11db0 <xTaskGenericCreate+0x244>
   11d20:	e0832002 	add	r2, r3, r2
   11d24:	e51b300c 	ldr	r3, [fp, #-12]
   11d28:	e2833004 	add	r3, r3, #4
   11d2c:	e1a00002 	mov	r0, r2
   11d30:	e1a01003 	mov	r1, r3
   11d34:	ebfffc1e 	bl	10db4 <vListInsertEnd>

			xReturn = pdPASS;
   11d38:	e3a03001 	mov	r3, #1
   11d3c:	e50b3008 	str	r3, [fp, #-8]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   11d40:	ebfffa08 	bl	10568 <vPortExitCritical>
   11d44:	ea000001 	b	11d50 <xTaskGenericCreate+0x1e4>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   11d48:	e3e03000 	mvn	r3, #0
   11d4c:	e50b3008 	str	r3, [fp, #-8]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   11d50:	e51b3008 	ldr	r3, [fp, #-8]
   11d54:	e3530001 	cmp	r3, #1
   11d58:	1a00000a 	bne	11d88 <xTaskGenericCreate+0x21c>
	{
		if( xSchedulerRunning != pdFALSE )
   11d5c:	e59f303c 	ldr	r3, [pc, #60]	; 11da0 <xTaskGenericCreate+0x234>
   11d60:	e5933000 	ldr	r3, [r3]
   11d64:	e3530000 	cmp	r3, #0
   11d68:	0a000006 	beq	11d88 <xTaskGenericCreate+0x21c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   11d6c:	e59f3028 	ldr	r3, [pc, #40]	; 11d9c <xTaskGenericCreate+0x230>
   11d70:	e5933000 	ldr	r3, [r3]
   11d74:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d78:	e59b3004 	ldr	r3, [fp, #4]
   11d7c:	e1520003 	cmp	r2, r3
   11d80:	2a000000 	bcs	11d88 <xTaskGenericCreate+0x21c>
			{
				portYIELD_WITHIN_API();
   11d84:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   11d88:	e51b3008 	ldr	r3, [fp, #-8]
}
   11d8c:	e1a00003 	mov	r0, r3
   11d90:	e24bd004 	sub	sp, fp, #4
   11d94:	e8bd8800 	pop	{fp, pc}
   11d98:	0001487c 	andeq	r4, r1, ip, ror r8
   11d9c:	000147a4 	andeq	r4, r1, r4, lsr #15
   11da0:	0001488c 	andeq	r4, r1, ip, lsl #17
   11da4:	00014884 	andeq	r4, r1, r4, lsl #17
   11da8:	000148a0 	andeq	r4, r1, r0, lsr #17
   11dac:	00014888 	andeq	r4, r1, r8, lsl #17
   11db0:	000147a8 	andeq	r4, r1, r8, lsr #15

00011db4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   11db4:	e92d4800 	push	{fp, lr}
   11db8:	e28db004 	add	fp, sp, #4
   11dbc:	e24dd010 	sub	sp, sp, #16
   11dc0:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   11dc4:	ebfff9d7 	bl	10528 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   11dc8:	e59f30cc 	ldr	r3, [pc, #204]	; 11e9c <vTaskDelete+0xe8>
   11dcc:	e5933000 	ldr	r3, [r3]
   11dd0:	e51b2010 	ldr	r2, [fp, #-16]
   11dd4:	e1520003 	cmp	r2, r3
   11dd8:	1a000001 	bne	11de4 <vTaskDelete+0x30>
			{
				pxTaskToDelete = NULL;
   11ddc:	e3a03000 	mov	r3, #0
   11de0:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   11de4:	e51b3010 	ldr	r3, [fp, #-16]
   11de8:	e3530000 	cmp	r3, #0
   11dec:	1a000002 	bne	11dfc <vTaskDelete+0x48>
   11df0:	e59f30a4 	ldr	r3, [pc, #164]	; 11e9c <vTaskDelete+0xe8>
   11df4:	e5933000 	ldr	r3, [r3]
   11df8:	ea000000 	b	11e00 <vTaskDelete+0x4c>
   11dfc:	e51b3010 	ldr	r3, [fp, #-16]
   11e00:	e50b3008 	str	r3, [fp, #-8]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   11e04:	e51b3008 	ldr	r3, [fp, #-8]
   11e08:	e2833004 	add	r3, r3, #4
   11e0c:	e1a00003 	mov	r0, r3
   11e10:	ebfffc41 	bl	10f1c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   11e14:	e51b3008 	ldr	r3, [fp, #-8]
   11e18:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   11e1c:	e3530000 	cmp	r3, #0
   11e20:	0a000003 	beq	11e34 <vTaskDelete+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   11e24:	e51b3008 	ldr	r3, [fp, #-8]
   11e28:	e2833018 	add	r3, r3, #24
   11e2c:	e1a00003 	mov	r0, r3
   11e30:	ebfffc39 	bl	10f1c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   11e34:	e51b3008 	ldr	r3, [fp, #-8]
   11e38:	e2833004 	add	r3, r3, #4
   11e3c:	e59f005c 	ldr	r0, [pc, #92]	; 11ea0 <vTaskDelete+0xec>
   11e40:	e1a01003 	mov	r1, r3
   11e44:	ebfffbda 	bl	10db4 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   11e48:	e59f3054 	ldr	r3, [pc, #84]	; 11ea4 <vTaskDelete+0xf0>
   11e4c:	e5933000 	ldr	r3, [r3]
   11e50:	e2832001 	add	r2, r3, #1
   11e54:	e59f3048 	ldr	r3, [pc, #72]	; 11ea4 <vTaskDelete+0xf0>
   11e58:	e5832000 	str	r2, [r3]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   11e5c:	e59f3044 	ldr	r3, [pc, #68]	; 11ea8 <vTaskDelete+0xf4>
   11e60:	e5933000 	ldr	r3, [r3]
   11e64:	e2832001 	add	r2, r3, #1
   11e68:	e59f3038 	ldr	r3, [pc, #56]	; 11ea8 <vTaskDelete+0xf4>
   11e6c:	e5832000 	str	r2, [r3]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   11e70:	ebfff9bc 	bl	10568 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   11e74:	e59f3030 	ldr	r3, [pc, #48]	; 11eac <vTaskDelete+0xf8>
   11e78:	e5933000 	ldr	r3, [r3]
   11e7c:	e3530000 	cmp	r3, #0
   11e80:	0a000003 	beq	11e94 <vTaskDelete+0xe0>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   11e84:	e51b3010 	ldr	r3, [fp, #-16]
   11e88:	e3530000 	cmp	r3, #0
   11e8c:	1a000000 	bne	11e94 <vTaskDelete+0xe0>
			{
				portYIELD_WITHIN_API();
   11e90:	ef000000 	svc	0x00000000
			}
		}
	}
   11e94:	e24bd004 	sub	sp, fp, #4
   11e98:	e8bd8800 	pop	{fp, pc}
   11e9c:	000147a4 	andeq	r4, r1, r4, lsr #15
   11ea0:	00014850 	andeq	r4, r1, r0, asr r8
   11ea4:	00014864 	andeq	r4, r1, r4, ror #16
   11ea8:	000148a0 	andeq	r4, r1, r0, lsr #17
   11eac:	0001488c 	andeq	r4, r1, ip, lsl #17

00011eb0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   11eb0:	e92d4800 	push	{fp, lr}
   11eb4:	e28db004 	add	fp, sp, #4
   11eb8:	e24dd018 	sub	sp, sp, #24
   11ebc:	e50b0018 	str	r0, [fp, #-24]
   11ec0:	e50b101c 	str	r1, [fp, #-28]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   11ec4:	e3a03000 	mov	r3, #0
   11ec8:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   11ecc:	eb0001ef 	bl	12690 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   11ed0:	e51b3018 	ldr	r3, [fp, #-24]
   11ed4:	e5932000 	ldr	r2, [r3]
   11ed8:	e51b301c 	ldr	r3, [fp, #-28]
   11edc:	e0823003 	add	r3, r2, r3
   11ee0:	e50b300c 	str	r3, [fp, #-12]

			if( xTickCount < *pxPreviousWakeTime )
   11ee4:	e51b3018 	ldr	r3, [fp, #-24]
   11ee8:	e5932000 	ldr	r2, [r3]
   11eec:	e59f30c0 	ldr	r3, [pc, #192]	; 11fb4 <vTaskDelayUntil+0x104>
   11ef0:	e5933000 	ldr	r3, [r3]
   11ef4:	e1520003 	cmp	r2, r3
   11ef8:	9a00000c 	bls	11f30 <vTaskDelayUntil+0x80>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   11efc:	e51b3018 	ldr	r3, [fp, #-24]
   11f00:	e5932000 	ldr	r2, [r3]
   11f04:	e51b300c 	ldr	r3, [fp, #-12]
   11f08:	e1520003 	cmp	r2, r3
   11f0c:	9a000013 	bls	11f60 <vTaskDelayUntil+0xb0>
   11f10:	e59f309c 	ldr	r3, [pc, #156]	; 11fb4 <vTaskDelayUntil+0x104>
   11f14:	e5933000 	ldr	r3, [r3]
   11f18:	e51b200c 	ldr	r2, [fp, #-12]
   11f1c:	e1520003 	cmp	r2, r3
   11f20:	9a00000e 	bls	11f60 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f24:	e3a03001 	mov	r3, #1
   11f28:	e50b3008 	str	r3, [fp, #-8]
   11f2c:	ea00000b 	b	11f60 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   11f30:	e51b3018 	ldr	r3, [fp, #-24]
   11f34:	e5932000 	ldr	r2, [r3]
   11f38:	e51b300c 	ldr	r3, [fp, #-12]
   11f3c:	e1520003 	cmp	r2, r3
   11f40:	8a000004 	bhi	11f58 <vTaskDelayUntil+0xa8>
   11f44:	e59f3068 	ldr	r3, [pc, #104]	; 11fb4 <vTaskDelayUntil+0x104>
   11f48:	e5933000 	ldr	r3, [r3]
   11f4c:	e51b200c 	ldr	r2, [fp, #-12]
   11f50:	e1520003 	cmp	r2, r3
   11f54:	9a000001 	bls	11f60 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f58:	e3a03001 	mov	r3, #1
   11f5c:	e50b3008 	str	r3, [fp, #-8]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   11f60:	e51b3018 	ldr	r3, [fp, #-24]
   11f64:	e51b200c 	ldr	r2, [fp, #-12]
   11f68:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   11f6c:	e51b3008 	ldr	r3, [fp, #-8]
   11f70:	e3530000 	cmp	r3, #0
   11f74:	0a000006 	beq	11f94 <vTaskDelayUntil+0xe4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   11f78:	e59f3038 	ldr	r3, [pc, #56]	; 11fb8 <vTaskDelayUntil+0x108>
   11f7c:	e5933000 	ldr	r3, [r3]
   11f80:	e2833004 	add	r3, r3, #4
   11f84:	e1a00003 	mov	r0, r3
   11f88:	ebfffbe3 	bl	10f1c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   11f8c:	e51b000c 	ldr	r0, [fp, #-12]
   11f90:	eb0004c6 	bl	132b0 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   11f94:	eb0001c8 	bl	126bc <xTaskResumeAll>
   11f98:	e50b0010 	str	r0, [fp, #-16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   11f9c:	e51b3010 	ldr	r3, [fp, #-16]
   11fa0:	e3530000 	cmp	r3, #0
   11fa4:	1a000000 	bne	11fac <vTaskDelayUntil+0xfc>
		{
			portYIELD_WITHIN_API();
   11fa8:	ef000000 	svc	0x00000000
		}
	}
   11fac:	e24bd004 	sub	sp, fp, #4
   11fb0:	e8bd8800 	pop	{fp, pc}
   11fb4:	00014880 	andeq	r4, r1, r0, lsl #17
   11fb8:	000147a4 	andeq	r4, r1, r4, lsr #15

00011fbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   11fbc:	e92d4800 	push	{fp, lr}
   11fc0:	e28db004 	add	fp, sp, #4
   11fc4:	e24dd010 	sub	sp, sp, #16
   11fc8:	e50b0010 	str	r0, [fp, #-16]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   11fcc:	e3a03000 	mov	r3, #0
   11fd0:	e50b3008 	str	r3, [fp, #-8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   11fd4:	e51b3010 	ldr	r3, [fp, #-16]
   11fd8:	e3530000 	cmp	r3, #0
   11fdc:	0a00000e 	beq	1201c <vTaskDelay+0x60>
		{
			vTaskSuspendAll();
   11fe0:	eb0001aa 	bl	12690 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   11fe4:	e59f3048 	ldr	r3, [pc, #72]	; 12034 <vTaskDelay+0x78>
   11fe8:	e5932000 	ldr	r2, [r3]
   11fec:	e51b3010 	ldr	r3, [fp, #-16]
   11ff0:	e0823003 	add	r3, r2, r3
   11ff4:	e50b300c 	str	r3, [fp, #-12]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   11ff8:	e59f3038 	ldr	r3, [pc, #56]	; 12038 <vTaskDelay+0x7c>
   11ffc:	e5933000 	ldr	r3, [r3]
   12000:	e2833004 	add	r3, r3, #4
   12004:	e1a00003 	mov	r0, r3
   12008:	ebfffbc3 	bl	10f1c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   1200c:	e51b000c 	ldr	r0, [fp, #-12]
   12010:	eb0004a6 	bl	132b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   12014:	eb0001a8 	bl	126bc <xTaskResumeAll>
   12018:	e50b0008 	str	r0, [fp, #-8]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1201c:	e51b3008 	ldr	r3, [fp, #-8]
   12020:	e3530000 	cmp	r3, #0
   12024:	1a000000 	bne	1202c <vTaskDelay+0x70>
		{
			portYIELD_WITHIN_API();
   12028:	ef000000 	svc	0x00000000
		}
	}
   1202c:	e24bd004 	sub	sp, fp, #4
   12030:	e8bd8800 	pop	{fp, pc}
   12034:	00014880 	andeq	r4, r1, r0, lsl #17
   12038:	000147a4 	andeq	r4, r1, r4, lsr #15

0001203c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   1203c:	e92d4800 	push	{fp, lr}
   12040:	e28db004 	add	fp, sp, #4
   12044:	e24dd010 	sub	sp, sp, #16
   12048:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   1204c:	ebfff935 	bl	10528 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12050:	e51b3010 	ldr	r3, [fp, #-16]
   12054:	e3530000 	cmp	r3, #0
   12058:	1a000002 	bne	12068 <uxTaskPriorityGet+0x2c>
   1205c:	e59f302c 	ldr	r3, [pc, #44]	; 12090 <uxTaskPriorityGet+0x54>
   12060:	e5933000 	ldr	r3, [r3]
   12064:	ea000000 	b	1206c <uxTaskPriorityGet+0x30>
   12068:	e51b3010 	ldr	r3, [fp, #-16]
   1206c:	e50b3008 	str	r3, [fp, #-8]
			uxReturn = pxTCB->uxPriority;
   12070:	e51b3008 	ldr	r3, [fp, #-8]
   12074:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12078:	e50b300c 	str	r3, [fp, #-12]
		}
		taskEXIT_CRITICAL();
   1207c:	ebfff939 	bl	10568 <vPortExitCritical>

		return uxReturn;
   12080:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12084:	e1a00003 	mov	r0, r3
   12088:	e24bd004 	sub	sp, fp, #4
   1208c:	e8bd8800 	pop	{fp, pc}
   12090:	000147a4 	andeq	r4, r1, r4, lsr #15

00012094 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   12094:	e92d4800 	push	{fp, lr}
   12098:	e28db004 	add	fp, sp, #4
   1209c:	e24dd018 	sub	sp, sp, #24
   120a0:	e50b0018 	str	r0, [fp, #-24]
   120a4:	e50b101c 	str	r1, [fp, #-28]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   120a8:	e3a03000 	mov	r3, #0
   120ac:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   120b0:	e51b301c 	ldr	r3, [fp, #-28]
   120b4:	e3530004 	cmp	r3, #4
   120b8:	9a000001 	bls	120c4 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   120bc:	e3a03004 	mov	r3, #4
   120c0:	e50b301c 	str	r3, [fp, #-28]
		}

		taskENTER_CRITICAL();
   120c4:	ebfff917 	bl	10528 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   120c8:	e59f315c 	ldr	r3, [pc, #348]	; 1222c <vTaskPrioritySet+0x198>
   120cc:	e5933000 	ldr	r3, [r3]
   120d0:	e51b2018 	ldr	r2, [fp, #-24]
   120d4:	e1520003 	cmp	r2, r3
   120d8:	1a000001 	bne	120e4 <vTaskPrioritySet+0x50>
			{
				pxTask = NULL;
   120dc:	e3a03000 	mov	r3, #0
   120e0:	e50b3018 	str	r3, [fp, #-24]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   120e4:	e51b3018 	ldr	r3, [fp, #-24]
   120e8:	e3530000 	cmp	r3, #0
   120ec:	1a000002 	bne	120fc <vTaskPrioritySet+0x68>
   120f0:	e59f3134 	ldr	r3, [pc, #308]	; 1222c <vTaskPrioritySet+0x198>
   120f4:	e5933000 	ldr	r3, [r3]
   120f8:	ea000000 	b	12100 <vTaskPrioritySet+0x6c>
   120fc:	e51b3018 	ldr	r3, [fp, #-24]
   12100:	e50b300c 	str	r3, [fp, #-12]
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   12104:	e51b300c 	ldr	r3, [fp, #-12]
   12108:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1210c:	e50b3010 	str	r3, [fp, #-16]
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   12110:	e51b2010 	ldr	r2, [fp, #-16]
   12114:	e51b301c 	ldr	r3, [fp, #-28]
   12118:	e1520003 	cmp	r2, r3
   1211c:	0a00003f 	beq	12220 <vTaskPrioritySet+0x18c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   12120:	e51b201c 	ldr	r2, [fp, #-28]
   12124:	e51b3010 	ldr	r3, [fp, #-16]
   12128:	e1520003 	cmp	r2, r3
   1212c:	9a000005 	bls	12148 <vTaskPrioritySet+0xb4>
				{
					if( pxTask != NULL )
   12130:	e51b3018 	ldr	r3, [fp, #-24]
   12134:	e3530000 	cmp	r3, #0
   12138:	0a000007 	beq	1215c <vTaskPrioritySet+0xc8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   1213c:	e3a03001 	mov	r3, #1
   12140:	e50b3008 	str	r3, [fp, #-8]
   12144:	ea000004 	b	1215c <vTaskPrioritySet+0xc8>
					}
				}
				else if( pxTask == NULL )
   12148:	e51b3018 	ldr	r3, [fp, #-24]
   1214c:	e3530000 	cmp	r3, #0
   12150:	1a000001 	bne	1215c <vTaskPrioritySet+0xc8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   12154:	e3a03001 	mov	r3, #1
   12158:	e50b3008 	str	r3, [fp, #-8]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   1215c:	e51b300c 	ldr	r3, [fp, #-12]
   12160:	e51b201c 	ldr	r2, [fp, #-28]
   12164:	e583202c 	str	r2, [r3, #44]	; 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   12168:	e51b301c 	ldr	r3, [fp, #-28]
   1216c:	e2632005 	rsb	r2, r3, #5
   12170:	e51b300c 	ldr	r3, [fp, #-12]
   12174:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   12178:	e51b300c 	ldr	r3, [fp, #-12]
   1217c:	e5931014 	ldr	r1, [r3, #20]
   12180:	e51b2010 	ldr	r2, [fp, #-16]
   12184:	e1a03002 	mov	r3, r2
   12188:	e1a03103 	lsl	r3, r3, #2
   1218c:	e0833002 	add	r3, r3, r2
   12190:	e1a03103 	lsl	r3, r3, #2
   12194:	e59f2094 	ldr	r2, [pc, #148]	; 12230 <vTaskPrioritySet+0x19c>
   12198:	e0833002 	add	r3, r3, r2
   1219c:	e1510003 	cmp	r1, r3
   121a0:	1a00001a 	bne	12210 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   121a4:	e51b300c 	ldr	r3, [fp, #-12]
   121a8:	e2833004 	add	r3, r3, #4
   121ac:	e1a00003 	mov	r0, r3
   121b0:	ebfffb59 	bl	10f1c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   121b4:	e51b300c 	ldr	r3, [fp, #-12]
   121b8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   121bc:	e59f3070 	ldr	r3, [pc, #112]	; 12234 <vTaskPrioritySet+0x1a0>
   121c0:	e5933000 	ldr	r3, [r3]
   121c4:	e1520003 	cmp	r2, r3
   121c8:	9a000003 	bls	121dc <vTaskPrioritySet+0x148>
   121cc:	e51b300c 	ldr	r3, [fp, #-12]
   121d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   121d4:	e59f3058 	ldr	r3, [pc, #88]	; 12234 <vTaskPrioritySet+0x1a0>
   121d8:	e5832000 	str	r2, [r3]
   121dc:	e51b300c 	ldr	r3, [fp, #-12]
   121e0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   121e4:	e1a03002 	mov	r3, r2
   121e8:	e1a03103 	lsl	r3, r3, #2
   121ec:	e0833002 	add	r3, r3, r2
   121f0:	e1a03103 	lsl	r3, r3, #2
   121f4:	e59f2034 	ldr	r2, [pc, #52]	; 12230 <vTaskPrioritySet+0x19c>
   121f8:	e0832002 	add	r2, r3, r2
   121fc:	e51b300c 	ldr	r3, [fp, #-12]
   12200:	e2833004 	add	r3, r3, #4
   12204:	e1a00002 	mov	r0, r2
   12208:	e1a01003 	mov	r1, r3
   1220c:	ebfffae8 	bl	10db4 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   12210:	e51b3008 	ldr	r3, [fp, #-8]
   12214:	e3530001 	cmp	r3, #1
   12218:	1a000000 	bne	12220 <vTaskPrioritySet+0x18c>
				{
					portYIELD_WITHIN_API();
   1221c:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   12220:	ebfff8d0 	bl	10568 <vPortExitCritical>
	}
   12224:	e24bd004 	sub	sp, fp, #4
   12228:	e8bd8800 	pop	{fp, pc}
   1222c:	000147a4 	andeq	r4, r1, r4, lsr #15
   12230:	000147a8 	andeq	r4, r1, r8, lsr #15
   12234:	00014888 	andeq	r4, r1, r8, lsl #17

00012238 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   12238:	e92d4800 	push	{fp, lr}
   1223c:	e28db004 	add	fp, sp, #4
   12240:	e24dd010 	sub	sp, sp, #16
   12244:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   12248:	ebfff8b6 	bl	10528 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   1224c:	e59f30d4 	ldr	r3, [pc, #212]	; 12328 <vTaskSuspend+0xf0>
   12250:	e5933000 	ldr	r3, [r3]
   12254:	e51b2010 	ldr	r2, [fp, #-16]
   12258:	e1520003 	cmp	r2, r3
   1225c:	1a000001 	bne	12268 <vTaskSuspend+0x30>
			{
				pxTaskToSuspend = NULL;
   12260:	e3a03000 	mov	r3, #0
   12264:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   12268:	e51b3010 	ldr	r3, [fp, #-16]
   1226c:	e3530000 	cmp	r3, #0
   12270:	1a000002 	bne	12280 <vTaskSuspend+0x48>
   12274:	e59f30ac 	ldr	r3, [pc, #172]	; 12328 <vTaskSuspend+0xf0>
   12278:	e5933000 	ldr	r3, [r3]
   1227c:	ea000000 	b	12284 <vTaskSuspend+0x4c>
   12280:	e51b3010 	ldr	r3, [fp, #-16]
   12284:	e50b3008 	str	r3, [fp, #-8]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   12288:	e51b3008 	ldr	r3, [fp, #-8]
   1228c:	e2833004 	add	r3, r3, #4
   12290:	e1a00003 	mov	r0, r3
   12294:	ebfffb20 	bl	10f1c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   12298:	e51b3008 	ldr	r3, [fp, #-8]
   1229c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   122a0:	e3530000 	cmp	r3, #0
   122a4:	0a000003 	beq	122b8 <vTaskSuspend+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   122a8:	e51b3008 	ldr	r3, [fp, #-8]
   122ac:	e2833018 	add	r3, r3, #24
   122b0:	e1a00003 	mov	r0, r3
   122b4:	ebfffb18 	bl	10f1c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   122b8:	e51b3008 	ldr	r3, [fp, #-8]
   122bc:	e2833004 	add	r3, r3, #4
   122c0:	e59f0064 	ldr	r0, [pc, #100]	; 1232c <vTaskSuspend+0xf4>
   122c4:	e1a01003 	mov	r1, r3
   122c8:	ebfffab9 	bl	10db4 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   122cc:	ebfff8a5 	bl	10568 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   122d0:	e51b3010 	ldr	r3, [fp, #-16]
   122d4:	e3530000 	cmp	r3, #0
   122d8:	1a000010 	bne	12320 <vTaskSuspend+0xe8>
		{
			if( xSchedulerRunning != pdFALSE )
   122dc:	e59f304c 	ldr	r3, [pc, #76]	; 12330 <vTaskSuspend+0xf8>
   122e0:	e5933000 	ldr	r3, [r3]
   122e4:	e3530000 	cmp	r3, #0
   122e8:	0a000001 	beq	122f4 <vTaskSuspend+0xbc>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   122ec:	ef000000 	svc	0x00000000
   122f0:	ea00000a 	b	12320 <vTaskSuspend+0xe8>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   122f4:	e59f3030 	ldr	r3, [pc, #48]	; 1232c <vTaskSuspend+0xf4>
   122f8:	e5932000 	ldr	r2, [r3]
   122fc:	e59f3030 	ldr	r3, [pc, #48]	; 12334 <vTaskSuspend+0xfc>
   12300:	e5933000 	ldr	r3, [r3]
   12304:	e1520003 	cmp	r2, r3
   12308:	1a000003 	bne	1231c <vTaskSuspend+0xe4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
   1230c:	e59f3014 	ldr	r3, [pc, #20]	; 12328 <vTaskSuspend+0xf0>
   12310:	e3a02000 	mov	r2, #0
   12314:	e5832000 	str	r2, [r3]
   12318:	ea000000 	b	12320 <vTaskSuspend+0xe8>
				}
				else
				{
					vTaskSwitchContext();
   1231c:	eb000245 	bl	12c38 <vTaskSwitchContext>
				}
			}
		}
	}
   12320:	e24bd004 	sub	sp, fp, #4
   12324:	e8bd8800 	pop	{fp, pc}
   12328:	000147a4 	andeq	r4, r1, r4, lsr #15
   1232c:	00014868 	andeq	r4, r1, r8, ror #16
   12330:	0001488c 	andeq	r4, r1, ip, lsl #17
   12334:	0001487c 	andeq	r4, r1, ip, ror r8

00012338 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   12338:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1233c:	e28db000 	add	fp, sp, #0
   12340:	e24dd014 	sub	sp, sp, #20
   12344:	e50b0010 	str	r0, [fp, #-16]
	portBASE_TYPE xReturn = pdFALSE;
   12348:	e3a03000 	mov	r3, #0
   1234c:	e50b3008 	str	r3, [fp, #-8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   12350:	e51b3010 	ldr	r3, [fp, #-16]
   12354:	e50b300c 	str	r3, [fp, #-12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   12358:	e51b300c 	ldr	r3, [fp, #-12]
   1235c:	e5932014 	ldr	r2, [r3, #20]
   12360:	e59f3044 	ldr	r3, [pc, #68]	; 123ac <xTaskIsTaskSuspended+0x74>
   12364:	e1520003 	cmp	r2, r3
   12368:	1a00000a 	bne	12398 <xTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   1236c:	e51b300c 	ldr	r3, [fp, #-12]
   12370:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   12374:	e59f3034 	ldr	r3, [pc, #52]	; 123b0 <xTaskIsTaskSuspended+0x78>
   12378:	e1520003 	cmp	r2, r3
   1237c:	0a000005 	beq	12398 <xTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   12380:	e51b300c 	ldr	r3, [fp, #-12]
   12384:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12388:	e3530000 	cmp	r3, #0
   1238c:	1a000001 	bne	12398 <xTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
   12390:	e3a03001 	mov	r3, #1
   12394:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}

		return xReturn;
   12398:	e51b3008 	ldr	r3, [fp, #-8]
	}
   1239c:	e1a00003 	mov	r0, r3
   123a0:	e24bd000 	sub	sp, fp, #0
   123a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   123a8:	e12fff1e 	bx	lr
   123ac:	00014868 	andeq	r4, r1, r8, ror #16
   123b0:	0001483c 	andeq	r4, r1, ip, lsr r8

000123b4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   123b4:	e92d4800 	push	{fp, lr}
   123b8:	e28db004 	add	fp, sp, #4
   123bc:	e24dd010 	sub	sp, sp, #16
   123c0:	e50b0010 	str	r0, [fp, #-16]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   123c4:	e51b3010 	ldr	r3, [fp, #-16]
   123c8:	e50b3008 	str	r3, [fp, #-8]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   123cc:	e51b3008 	ldr	r3, [fp, #-8]
   123d0:	e3530000 	cmp	r3, #0
   123d4:	0a00002e 	beq	12494 <vTaskResume+0xe0>
   123d8:	e59f30bc 	ldr	r3, [pc, #188]	; 1249c <vTaskResume+0xe8>
   123dc:	e5933000 	ldr	r3, [r3]
   123e0:	e51b2008 	ldr	r2, [fp, #-8]
   123e4:	e1520003 	cmp	r2, r3
   123e8:	0a000029 	beq	12494 <vTaskResume+0xe0>
		{
			taskENTER_CRITICAL();
   123ec:	ebfff84d 	bl	10528 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   123f0:	e51b0008 	ldr	r0, [fp, #-8]
   123f4:	ebffffcf 	bl	12338 <xTaskIsTaskSuspended>
   123f8:	e1a03000 	mov	r3, r0
   123fc:	e3530001 	cmp	r3, #1
   12400:	1a000022 	bne	12490 <vTaskResume+0xdc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   12404:	e51b3008 	ldr	r3, [fp, #-8]
   12408:	e2833004 	add	r3, r3, #4
   1240c:	e1a00003 	mov	r0, r3
   12410:	ebfffac1 	bl	10f1c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12414:	e51b3008 	ldr	r3, [fp, #-8]
   12418:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1241c:	e59f307c 	ldr	r3, [pc, #124]	; 124a0 <vTaskResume+0xec>
   12420:	e5933000 	ldr	r3, [r3]
   12424:	e1520003 	cmp	r2, r3
   12428:	9a000003 	bls	1243c <vTaskResume+0x88>
   1242c:	e51b3008 	ldr	r3, [fp, #-8]
   12430:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12434:	e59f3064 	ldr	r3, [pc, #100]	; 124a0 <vTaskResume+0xec>
   12438:	e5832000 	str	r2, [r3]
   1243c:	e51b3008 	ldr	r3, [fp, #-8]
   12440:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12444:	e1a03002 	mov	r3, r2
   12448:	e1a03103 	lsl	r3, r3, #2
   1244c:	e0833002 	add	r3, r3, r2
   12450:	e1a03103 	lsl	r3, r3, #2
   12454:	e59f2048 	ldr	r2, [pc, #72]	; 124a4 <vTaskResume+0xf0>
   12458:	e0832002 	add	r2, r3, r2
   1245c:	e51b3008 	ldr	r3, [fp, #-8]
   12460:	e2833004 	add	r3, r3, #4
   12464:	e1a00002 	mov	r0, r2
   12468:	e1a01003 	mov	r1, r3
   1246c:	ebfffa50 	bl	10db4 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12470:	e51b3008 	ldr	r3, [fp, #-8]
   12474:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12478:	e59f301c 	ldr	r3, [pc, #28]	; 1249c <vTaskResume+0xe8>
   1247c:	e5933000 	ldr	r3, [r3]
   12480:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12484:	e1520003 	cmp	r2, r3
   12488:	3a000000 	bcc	12490 <vTaskResume+0xdc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   1248c:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   12490:	ebfff834 	bl	10568 <vPortExitCritical>
		}
	}
   12494:	e24bd004 	sub	sp, fp, #4
   12498:	e8bd8800 	pop	{fp, pc}
   1249c:	000147a4 	andeq	r4, r1, r4, lsr #15
   124a0:	00014888 	andeq	r4, r1, r8, lsl #17
   124a4:	000147a8 	andeq	r4, r1, r8, lsr #15

000124a8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   124a8:	e92d4800 	push	{fp, lr}
   124ac:	e28db004 	add	fp, sp, #4
   124b0:	e24dd018 	sub	sp, sp, #24
   124b4:	e50b0018 	str	r0, [fp, #-24]
	portBASE_TYPE xYieldRequired = pdFALSE;
   124b8:	e3a03000 	mov	r3, #0
   124bc:	e50b3008 	str	r3, [fp, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   124c0:	e51b3018 	ldr	r3, [fp, #-24]
   124c4:	e50b300c 	str	r3, [fp, #-12]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   124c8:	e3a03000 	mov	r3, #0
   124cc:	e50b3010 	str	r3, [fp, #-16]
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   124d0:	e51b000c 	ldr	r0, [fp, #-12]
   124d4:	ebffff97 	bl	12338 <xTaskIsTaskSuspended>
   124d8:	e1a03000 	mov	r3, r0
   124dc:	e3530001 	cmp	r3, #1
   124e0:	1a00002e 	bne	125a0 <xTaskResumeFromISR+0xf8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   124e4:	e59f30c4 	ldr	r3, [pc, #196]	; 125b0 <xTaskResumeFromISR+0x108>
   124e8:	e5933000 	ldr	r3, [r3]
   124ec:	e3530000 	cmp	r3, #0
   124f0:	1a000025 	bne	1258c <xTaskResumeFromISR+0xe4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   124f4:	e51b300c 	ldr	r3, [fp, #-12]
   124f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   124fc:	e59f30b0 	ldr	r3, [pc, #176]	; 125b4 <xTaskResumeFromISR+0x10c>
   12500:	e5933000 	ldr	r3, [r3]
   12504:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12508:	e1520003 	cmp	r2, r3
   1250c:	33a03000 	movcc	r3, #0
   12510:	23a03001 	movcs	r3, #1
   12514:	e6ef3073 	uxtb	r3, r3
   12518:	e50b3008 	str	r3, [fp, #-8]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   1251c:	e51b300c 	ldr	r3, [fp, #-12]
   12520:	e2833004 	add	r3, r3, #4
   12524:	e1a00003 	mov	r0, r3
   12528:	ebfffa7b 	bl	10f1c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   1252c:	e51b300c 	ldr	r3, [fp, #-12]
   12530:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12534:	e59f307c 	ldr	r3, [pc, #124]	; 125b8 <xTaskResumeFromISR+0x110>
   12538:	e5933000 	ldr	r3, [r3]
   1253c:	e1520003 	cmp	r2, r3
   12540:	9a000003 	bls	12554 <xTaskResumeFromISR+0xac>
   12544:	e51b300c 	ldr	r3, [fp, #-12]
   12548:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1254c:	e59f3064 	ldr	r3, [pc, #100]	; 125b8 <xTaskResumeFromISR+0x110>
   12550:	e5832000 	str	r2, [r3]
   12554:	e51b300c 	ldr	r3, [fp, #-12]
   12558:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1255c:	e1a03002 	mov	r3, r2
   12560:	e1a03103 	lsl	r3, r3, #2
   12564:	e0833002 	add	r3, r3, r2
   12568:	e1a03103 	lsl	r3, r3, #2
   1256c:	e59f2048 	ldr	r2, [pc, #72]	; 125bc <xTaskResumeFromISR+0x114>
   12570:	e0832002 	add	r2, r3, r2
   12574:	e51b300c 	ldr	r3, [fp, #-12]
   12578:	e2833004 	add	r3, r3, #4
   1257c:	e1a00002 	mov	r0, r2
   12580:	e1a01003 	mov	r1, r3
   12584:	ebfffa0a 	bl	10db4 <vListInsertEnd>
   12588:	ea000004 	b	125a0 <xTaskResumeFromISR+0xf8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   1258c:	e51b300c 	ldr	r3, [fp, #-12]
   12590:	e2833018 	add	r3, r3, #24
   12594:	e59f0024 	ldr	r0, [pc, #36]	; 125c0 <xTaskResumeFromISR+0x118>
   12598:	e1a01003 	mov	r1, r3
   1259c:	ebfffa04 	bl	10db4 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   125a0:	e51b3008 	ldr	r3, [fp, #-8]
	}
   125a4:	e1a00003 	mov	r0, r3
   125a8:	e24bd004 	sub	sp, fp, #4
   125ac:	e8bd8800 	pop	{fp, pc}
   125b0:	00014890 	muleq	r1, r0, r8
   125b4:	000147a4 	andeq	r4, r1, r4, lsr #15
   125b8:	00014888 	andeq	r4, r1, r8, lsl #17
   125bc:	000147a8 	andeq	r4, r1, r8, lsr #15
   125c0:	0001483c 	andeq	r4, r1, ip, lsr r8

000125c4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   125c4:	e92d4800 	push	{fp, lr}
   125c8:	e28db004 	add	fp, sp, #4
   125cc:	e24dd018 	sub	sp, sp, #24
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   125d0:	e3a03000 	mov	r3, #0
   125d4:	e58d3000 	str	r3, [sp]
   125d8:	e3a03000 	mov	r3, #0
   125dc:	e58d3004 	str	r3, [sp, #4]
   125e0:	e3a03000 	mov	r3, #0
   125e4:	e58d3008 	str	r3, [sp, #8]
   125e8:	e3a03000 	mov	r3, #0
   125ec:	e58d300c 	str	r3, [sp, #12]
   125f0:	e59f0054 	ldr	r0, [pc, #84]	; 1264c <vTaskStartScheduler+0x88>
   125f4:	e59f1054 	ldr	r1, [pc, #84]	; 12650 <vTaskStartScheduler+0x8c>
   125f8:	e3a02080 	mov	r2, #128	; 0x80
   125fc:	e3a03000 	mov	r3, #0
   12600:	ebfffd59 	bl	11b6c <xTaskGenericCreate>
   12604:	e50b0008 	str	r0, [fp, #-8]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   12608:	e51b3008 	ldr	r3, [fp, #-8]
   1260c:	e3530001 	cmp	r3, #1
   12610:	1a00000b 	bne	12644 <vTaskStartScheduler+0x80>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   12614:	e92d0001 	stmfd	sp!, {r0}
   12618:	e10f0000 	mrs	r0, CPSR
   1261c:	e38000c0 	orr	r0, r0, #192	; 0xc0
   12620:	e129f000 	msr	CPSR_fc, r0
   12624:	e8bd0001 	ldmfd	sp!, {r0}

		xSchedulerRunning = pdTRUE;
   12628:	e59f3024 	ldr	r3, [pc, #36]	; 12654 <vTaskStartScheduler+0x90>
   1262c:	e3a02001 	mov	r2, #1
   12630:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   12634:	e59f301c 	ldr	r3, [pc, #28]	; 12658 <vTaskStartScheduler+0x94>
   12638:	e3a02000 	mov	r2, #0
   1263c:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   12640:	ebfff6fe 	bl	10240 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   12644:	e24bd004 	sub	sp, fp, #4
   12648:	e8bd8800 	pop	{fp, pc}
   1264c:	0001304c 	andeq	r3, r1, ip, asr #32
   12650:	00014434 	andeq	r4, r1, r4, lsr r4
   12654:	0001488c 	andeq	r4, r1, ip, lsl #17
   12658:	00014880 	andeq	r4, r1, r0, lsl #17

0001265c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   1265c:	e92d4800 	push	{fp, lr}
   12660:	e28db004 	add	fp, sp, #4
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   12664:	e92d0001 	stmfd	sp!, {r0}
   12668:	e10f0000 	mrs	r0, CPSR
   1266c:	e38000c0 	orr	r0, r0, #192	; 0xc0
   12670:	e129f000 	msr	CPSR_fc, r0
   12674:	e8bd0001 	ldmfd	sp!, {r0}
	xSchedulerRunning = pdFALSE;
   12678:	e59f300c 	ldr	r3, [pc, #12]	; 1268c <vTaskEndScheduler+0x30>
   1267c:	e3a02000 	mov	r2, #0
   12680:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   12684:	ebfff6f4 	bl	1025c <vPortEndScheduler>
}
   12688:	e8bd8800 	pop	{fp, pc}
   1268c:	0001488c 	andeq	r4, r1, ip, lsl #17

00012690 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   12690:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12694:	e28db000 	add	fp, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   12698:	e59f3018 	ldr	r3, [pc, #24]	; 126b8 <vTaskSuspendAll+0x28>
   1269c:	e5933000 	ldr	r3, [r3]
   126a0:	e2832001 	add	r2, r3, #1
   126a4:	e59f300c 	ldr	r3, [pc, #12]	; 126b8 <vTaskSuspendAll+0x28>
   126a8:	e5832000 	str	r2, [r3]
}
   126ac:	e24bd000 	sub	sp, fp, #0
   126b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   126b4:	e12fff1e 	bx	lr
   126b8:	00014890 	muleq	r1, r0, r8

000126bc <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   126bc:	e92d4810 	push	{r4, fp, lr}
   126c0:	e28db008 	add	fp, sp, #8
   126c4:	e24dd00c 	sub	sp, sp, #12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   126c8:	e3a03000 	mov	r3, #0
   126cc:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   126d0:	ebfff794 	bl	10528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   126d4:	e59f3164 	ldr	r3, [pc, #356]	; 12840 <xTaskResumeAll+0x184>
   126d8:	e5933000 	ldr	r3, [r3]
   126dc:	e2432001 	sub	r2, r3, #1
   126e0:	e59f3158 	ldr	r3, [pc, #344]	; 12840 <xTaskResumeAll+0x184>
   126e4:	e5832000 	str	r2, [r3]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   126e8:	e59f3150 	ldr	r3, [pc, #336]	; 12840 <xTaskResumeAll+0x184>
   126ec:	e5933000 	ldr	r3, [r3]
   126f0:	e3530000 	cmp	r3, #0
   126f4:	1a00004c 	bne	1282c <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   126f8:	e59f3144 	ldr	r3, [pc, #324]	; 12844 <xTaskResumeAll+0x188>
   126fc:	e5933000 	ldr	r3, [r3]
   12700:	e3530000 	cmp	r3, #0
   12704:	0a000048 	beq	1282c <xTaskResumeAll+0x170>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   12708:	e3a03000 	mov	r3, #0
   1270c:	e50b3014 	str	r3, [fp, #-20]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   12710:	ea000023 	b	127a4 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   12714:	e59f312c 	ldr	r3, [pc, #300]	; 12848 <xTaskResumeAll+0x18c>
   12718:	e593300c 	ldr	r3, [r3, #12]
   1271c:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   12720:	e2843018 	add	r3, r4, #24
   12724:	e1a00003 	mov	r0, r3
   12728:	ebfff9fb 	bl	10f1c <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   1272c:	e2843004 	add	r3, r4, #4
   12730:	e1a00003 	mov	r0, r3
   12734:	ebfff9f8 	bl	10f1c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12738:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1273c:	e59f3108 	ldr	r3, [pc, #264]	; 1284c <xTaskResumeAll+0x190>
   12740:	e5933000 	ldr	r3, [r3]
   12744:	e1520003 	cmp	r2, r3
   12748:	9a000002 	bls	12758 <xTaskResumeAll+0x9c>
   1274c:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12750:	e59f30f4 	ldr	r3, [pc, #244]	; 1284c <xTaskResumeAll+0x190>
   12754:	e5832000 	str	r2, [r3]
   12758:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1275c:	e1a03002 	mov	r3, r2
   12760:	e1a03103 	lsl	r3, r3, #2
   12764:	e0833002 	add	r3, r3, r2
   12768:	e1a03103 	lsl	r3, r3, #2
   1276c:	e59f20dc 	ldr	r2, [pc, #220]	; 12850 <xTaskResumeAll+0x194>
   12770:	e0832002 	add	r2, r3, r2
   12774:	e2843004 	add	r3, r4, #4
   12778:	e1a00002 	mov	r0, r2
   1277c:	e1a01003 	mov	r1, r3
   12780:	ebfff98b 	bl	10db4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12784:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12788:	e59f30c4 	ldr	r3, [pc, #196]	; 12854 <xTaskResumeAll+0x198>
   1278c:	e5933000 	ldr	r3, [r3]
   12790:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12794:	e1520003 	cmp	r2, r3
   12798:	3a000001 	bcc	127a4 <xTaskResumeAll+0xe8>
					{
						xYieldRequired = pdTRUE;
   1279c:	e3a03001 	mov	r3, #1
   127a0:	e50b3014 	str	r3, [fp, #-20]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   127a4:	e59f309c 	ldr	r3, [pc, #156]	; 12848 <xTaskResumeAll+0x18c>
   127a8:	e5933000 	ldr	r3, [r3]
   127ac:	e3530000 	cmp	r3, #0
   127b0:	1affffd7 	bne	12714 <xTaskResumeAll+0x58>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   127b4:	e59f309c 	ldr	r3, [pc, #156]	; 12858 <xTaskResumeAll+0x19c>
   127b8:	e5933000 	ldr	r3, [r3]
   127bc:	e3530000 	cmp	r3, #0
   127c0:	0a00000c 	beq	127f8 <xTaskResumeAll+0x13c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   127c4:	ea000005 	b	127e0 <xTaskResumeAll+0x124>
					{
						vTaskIncrementTick();
   127c8:	eb000048 	bl	128f0 <vTaskIncrementTick>
						--uxMissedTicks;
   127cc:	e59f3084 	ldr	r3, [pc, #132]	; 12858 <xTaskResumeAll+0x19c>
   127d0:	e5933000 	ldr	r3, [r3]
   127d4:	e2432001 	sub	r2, r3, #1
   127d8:	e59f3078 	ldr	r3, [pc, #120]	; 12858 <xTaskResumeAll+0x19c>
   127dc:	e5832000 	str	r2, [r3]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   127e0:	e59f3070 	ldr	r3, [pc, #112]	; 12858 <xTaskResumeAll+0x19c>
   127e4:	e5933000 	ldr	r3, [r3]
   127e8:	e3530000 	cmp	r3, #0
   127ec:	1afffff5 	bne	127c8 <xTaskResumeAll+0x10c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   127f0:	e3a03001 	mov	r3, #1
   127f4:	e50b3014 	str	r3, [fp, #-20]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   127f8:	e51b3014 	ldr	r3, [fp, #-20]
   127fc:	e3530001 	cmp	r3, #1
   12800:	0a000003 	beq	12814 <xTaskResumeAll+0x158>
   12804:	e59f3050 	ldr	r3, [pc, #80]	; 1285c <xTaskResumeAll+0x1a0>
   12808:	e5933000 	ldr	r3, [r3]
   1280c:	e3530001 	cmp	r3, #1
   12810:	1a000005 	bne	1282c <xTaskResumeAll+0x170>
				{
					xAlreadyYielded = pdTRUE;
   12814:	e3a03001 	mov	r3, #1
   12818:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   1281c:	e59f3038 	ldr	r3, [pc, #56]	; 1285c <xTaskResumeAll+0x1a0>
   12820:	e3a02000 	mov	r2, #0
   12824:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   12828:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   1282c:	ebfff74d 	bl	10568 <vPortExitCritical>

	return xAlreadyYielded;
   12830:	e51b3010 	ldr	r3, [fp, #-16]
}
   12834:	e1a00003 	mov	r0, r3
   12838:	e24bd008 	sub	sp, fp, #8
   1283c:	e8bd8810 	pop	{r4, fp, pc}
   12840:	00014890 	muleq	r1, r0, r8
   12844:	0001487c 	andeq	r4, r1, ip, ror r8
   12848:	0001483c 	andeq	r4, r1, ip, lsr r8
   1284c:	00014888 	andeq	r4, r1, r8, lsl #17
   12850:	000147a8 	andeq	r4, r1, r8, lsr #15
   12854:	000147a4 	andeq	r4, r1, r4, lsr #15
   12858:	00014894 	muleq	r1, r4, r8
   1285c:	00014898 	muleq	r1, r8, r8

00012860 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   12860:	e92d4800 	push	{fp, lr}
   12864:	e28db004 	add	fp, sp, #4
   12868:	e24dd008 	sub	sp, sp, #8
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   1286c:	ebfff72d 	bl	10528 <vPortEnterCritical>
	{
		xTicks = xTickCount;
   12870:	e59f3018 	ldr	r3, [pc, #24]	; 12890 <xTaskGetTickCount+0x30>
   12874:	e5933000 	ldr	r3, [r3]
   12878:	e50b3008 	str	r3, [fp, #-8]
	}
	taskEXIT_CRITICAL();
   1287c:	ebfff739 	bl	10568 <vPortExitCritical>

	return xTicks;
   12880:	e51b3008 	ldr	r3, [fp, #-8]
}
   12884:	e1a00003 	mov	r0, r3
   12888:	e24bd004 	sub	sp, fp, #4
   1288c:	e8bd8800 	pop	{fp, pc}
   12890:	00014880 	andeq	r4, r1, r0, lsl #17

00012894 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   12894:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12898:	e28db000 	add	fp, sp, #0
   1289c:	e24dd00c 	sub	sp, sp, #12
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   128a0:	e3a03000 	mov	r3, #0
   128a4:	e50b3008 	str	r3, [fp, #-8]
	xReturn = xTickCount;
   128a8:	e59f3018 	ldr	r3, [pc, #24]	; 128c8 <xTaskGetTickCountFromISR+0x34>
   128ac:	e5933000 	ldr	r3, [r3]
   128b0:	e50b300c 	str	r3, [fp, #-12]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   128b4:	e51b300c 	ldr	r3, [fp, #-12]
}
   128b8:	e1a00003 	mov	r0, r3
   128bc:	e24bd000 	sub	sp, fp, #0
   128c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   128c4:	e12fff1e 	bx	lr
   128c8:	00014880 	andeq	r4, r1, r0, lsl #17

000128cc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   128cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   128d0:	e28db000 	add	fp, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   128d4:	e59f3010 	ldr	r3, [pc, #16]	; 128ec <uxTaskGetNumberOfTasks+0x20>
   128d8:	e5933000 	ldr	r3, [r3]
}
   128dc:	e1a00003 	mov	r0, r3
   128e0:	e24bd000 	sub	sp, fp, #0
   128e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   128e8:	e12fff1e 	bx	lr
   128ec:	0001487c 	andeq	r4, r1, ip, ror r8

000128f0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   128f0:	e92d4800 	push	{fp, lr}
   128f4:	e28db004 	add	fp, sp, #4
   128f8:	e24dd010 	sub	sp, sp, #16
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   128fc:	e59f31e0 	ldr	r3, [pc, #480]	; 12ae4 <vTaskIncrementTick+0x1f4>
   12900:	e5933000 	ldr	r3, [r3]
   12904:	e3530000 	cmp	r3, #0
   12908:	1a00006e 	bne	12ac8 <vTaskIncrementTick+0x1d8>
	{
		++xTickCount;
   1290c:	e59f31d4 	ldr	r3, [pc, #468]	; 12ae8 <vTaskIncrementTick+0x1f8>
   12910:	e5933000 	ldr	r3, [r3]
   12914:	e2832001 	add	r2, r3, #1
   12918:	e59f31c8 	ldr	r3, [pc, #456]	; 12ae8 <vTaskIncrementTick+0x1f8>
   1291c:	e5832000 	str	r2, [r3]
		if( xTickCount == ( portTickType ) 0U )
   12920:	e59f31c0 	ldr	r3, [pc, #448]	; 12ae8 <vTaskIncrementTick+0x1f8>
   12924:	e5933000 	ldr	r3, [r3]
   12928:	e3530000 	cmp	r3, #0
   1292c:	1a000020 	bne	129b4 <vTaskIncrementTick+0xc4>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   12930:	e59f31b4 	ldr	r3, [pc, #436]	; 12aec <vTaskIncrementTick+0x1fc>
   12934:	e5933000 	ldr	r3, [r3]
   12938:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   1293c:	e59f31ac 	ldr	r3, [pc, #428]	; 12af0 <vTaskIncrementTick+0x200>
   12940:	e5932000 	ldr	r2, [r3]
   12944:	e59f31a0 	ldr	r3, [pc, #416]	; 12aec <vTaskIncrementTick+0x1fc>
   12948:	e5832000 	str	r2, [r3]
			pxOverflowDelayedTaskList = pxTemp;
   1294c:	e59f319c 	ldr	r3, [pc, #412]	; 12af0 <vTaskIncrementTick+0x200>
   12950:	e51b2008 	ldr	r2, [fp, #-8]
   12954:	e5832000 	str	r2, [r3]
			xNumOfOverflows++;
   12958:	e59f3194 	ldr	r3, [pc, #404]	; 12af4 <vTaskIncrementTick+0x204>
   1295c:	e5933000 	ldr	r3, [r3]
   12960:	e2832001 	add	r2, r3, #1
   12964:	e59f3188 	ldr	r3, [pc, #392]	; 12af4 <vTaskIncrementTick+0x204>
   12968:	e5832000 	str	r2, [r3]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1296c:	e59f3178 	ldr	r3, [pc, #376]	; 12aec <vTaskIncrementTick+0x1fc>
   12970:	e5933000 	ldr	r3, [r3]
   12974:	e5933000 	ldr	r3, [r3]
   12978:	e3530000 	cmp	r3, #0
   1297c:	1a000003 	bne	12990 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   12980:	e59f3170 	ldr	r3, [pc, #368]	; 12af8 <vTaskIncrementTick+0x208>
   12984:	e3e02000 	mvn	r2, #0
   12988:	e5832000 	str	r2, [r3]
   1298c:	ea000008 	b	129b4 <vTaskIncrementTick+0xc4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   12990:	e59f3154 	ldr	r3, [pc, #340]	; 12aec <vTaskIncrementTick+0x1fc>
   12994:	e5933000 	ldr	r3, [r3]
   12998:	e593300c 	ldr	r3, [r3, #12]
   1299c:	e593300c 	ldr	r3, [r3, #12]
   129a0:	e50b300c 	str	r3, [fp, #-12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   129a4:	e51b300c 	ldr	r3, [fp, #-12]
   129a8:	e5932004 	ldr	r2, [r3, #4]
   129ac:	e59f3144 	ldr	r3, [pc, #324]	; 12af8 <vTaskIncrementTick+0x208>
   129b0:	e5832000 	str	r2, [r3]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   129b4:	e59f312c 	ldr	r3, [pc, #300]	; 12ae8 <vTaskIncrementTick+0x1f8>
   129b8:	e5932000 	ldr	r2, [r3]
   129bc:	e59f3134 	ldr	r3, [pc, #308]	; 12af8 <vTaskIncrementTick+0x208>
   129c0:	e5933000 	ldr	r3, [r3]
   129c4:	e1520003 	cmp	r2, r3
   129c8:	3a00003d 	bcc	12ac4 <vTaskIncrementTick+0x1d4>
   129cc:	e59f3118 	ldr	r3, [pc, #280]	; 12aec <vTaskIncrementTick+0x1fc>
   129d0:	e5933000 	ldr	r3, [r3]
   129d4:	e5933000 	ldr	r3, [r3]
   129d8:	e3530000 	cmp	r3, #0
   129dc:	1a000003 	bne	129f0 <vTaskIncrementTick+0x100>
   129e0:	e59f3110 	ldr	r3, [pc, #272]	; 12af8 <vTaskIncrementTick+0x208>
   129e4:	e3e02000 	mvn	r2, #0
   129e8:	e5832000 	str	r2, [r3]
   129ec:	ea000034 	b	12ac4 <vTaskIncrementTick+0x1d4>
   129f0:	e59f30f4 	ldr	r3, [pc, #244]	; 12aec <vTaskIncrementTick+0x1fc>
   129f4:	e5933000 	ldr	r3, [r3]
   129f8:	e593300c 	ldr	r3, [r3, #12]
   129fc:	e593300c 	ldr	r3, [r3, #12]
   12a00:	e50b300c 	str	r3, [fp, #-12]
   12a04:	e51b300c 	ldr	r3, [fp, #-12]
   12a08:	e5933004 	ldr	r3, [r3, #4]
   12a0c:	e50b3010 	str	r3, [fp, #-16]
   12a10:	e59f30d0 	ldr	r3, [pc, #208]	; 12ae8 <vTaskIncrementTick+0x1f8>
   12a14:	e5932000 	ldr	r2, [r3]
   12a18:	e51b3010 	ldr	r3, [fp, #-16]
   12a1c:	e1520003 	cmp	r2, r3
   12a20:	2a000003 	bcs	12a34 <vTaskIncrementTick+0x144>
   12a24:	e59f30cc 	ldr	r3, [pc, #204]	; 12af8 <vTaskIncrementTick+0x208>
   12a28:	e51b2010 	ldr	r2, [fp, #-16]
   12a2c:	e5832000 	str	r2, [r3]
   12a30:	ea000023 	b	12ac4 <vTaskIncrementTick+0x1d4>
   12a34:	e51b300c 	ldr	r3, [fp, #-12]
   12a38:	e2833004 	add	r3, r3, #4
   12a3c:	e1a00003 	mov	r0, r3
   12a40:	ebfff935 	bl	10f1c <vListRemove>
   12a44:	e51b300c 	ldr	r3, [fp, #-12]
   12a48:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12a4c:	e3530000 	cmp	r3, #0
   12a50:	0a000003 	beq	12a64 <vTaskIncrementTick+0x174>
   12a54:	e51b300c 	ldr	r3, [fp, #-12]
   12a58:	e2833018 	add	r3, r3, #24
   12a5c:	e1a00003 	mov	r0, r3
   12a60:	ebfff92d 	bl	10f1c <vListRemove>
   12a64:	e51b300c 	ldr	r3, [fp, #-12]
   12a68:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12a6c:	e59f3088 	ldr	r3, [pc, #136]	; 12afc <vTaskIncrementTick+0x20c>
   12a70:	e5933000 	ldr	r3, [r3]
   12a74:	e1520003 	cmp	r2, r3
   12a78:	9a000003 	bls	12a8c <vTaskIncrementTick+0x19c>
   12a7c:	e51b300c 	ldr	r3, [fp, #-12]
   12a80:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12a84:	e59f3070 	ldr	r3, [pc, #112]	; 12afc <vTaskIncrementTick+0x20c>
   12a88:	e5832000 	str	r2, [r3]
   12a8c:	e51b300c 	ldr	r3, [fp, #-12]
   12a90:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12a94:	e1a03002 	mov	r3, r2
   12a98:	e1a03103 	lsl	r3, r3, #2
   12a9c:	e0833002 	add	r3, r3, r2
   12aa0:	e1a03103 	lsl	r3, r3, #2
   12aa4:	e59f2054 	ldr	r2, [pc, #84]	; 12b00 <vTaskIncrementTick+0x210>
   12aa8:	e0832002 	add	r2, r3, r2
   12aac:	e51b300c 	ldr	r3, [fp, #-12]
   12ab0:	e2833004 	add	r3, r3, #4
   12ab4:	e1a00002 	mov	r0, r2
   12ab8:	e1a01003 	mov	r1, r3
   12abc:	ebfff8bc 	bl	10db4 <vListInsertEnd>
   12ac0:	eaffffc1 	b	129cc <vTaskIncrementTick+0xdc>
   12ac4:	ea000004 	b	12adc <vTaskIncrementTick+0x1ec>
	}
	else
	{
		++uxMissedTicks;
   12ac8:	e59f3034 	ldr	r3, [pc, #52]	; 12b04 <vTaskIncrementTick+0x214>
   12acc:	e5933000 	ldr	r3, [r3]
   12ad0:	e2832001 	add	r2, r3, #1
   12ad4:	e59f3028 	ldr	r3, [pc, #40]	; 12b04 <vTaskIncrementTick+0x214>
   12ad8:	e5832000 	str	r2, [r3]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   12adc:	e24bd004 	sub	sp, fp, #4
   12ae0:	e8bd8800 	pop	{fp, pc}
   12ae4:	00014890 	muleq	r1, r0, r8
   12ae8:	00014880 	andeq	r4, r1, r0, lsl #17
   12aec:	00014834 	andeq	r4, r1, r4, lsr r8
   12af0:	00014838 	andeq	r4, r1, r8, lsr r8
   12af4:	0001489c 	muleq	r1, ip, r8
   12af8:	00014718 	andeq	r4, r1, r8, lsl r7
   12afc:	00014888 	andeq	r4, r1, r8, lsl #17
   12b00:	000147a8 	andeq	r4, r1, r8, lsr #15
   12b04:	00014894 	muleq	r1, r4, r8

00012b08 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   12b08:	e92d4800 	push	{fp, lr}
   12b0c:	e28db004 	add	fp, sp, #4
   12b10:	e24dd010 	sub	sp, sp, #16
   12b14:	e50b0010 	str	r0, [fp, #-16]
   12b18:	e50b1014 	str	r1, [fp, #-20]
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12b1c:	e51b3010 	ldr	r3, [fp, #-16]
   12b20:	e3530000 	cmp	r3, #0
   12b24:	1a000003 	bne	12b38 <vTaskSetApplicationTaskTag+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12b28:	e59f302c 	ldr	r3, [pc, #44]	; 12b5c <vTaskSetApplicationTaskTag+0x54>
   12b2c:	e5933000 	ldr	r3, [r3]
   12b30:	e50b3008 	str	r3, [fp, #-8]
   12b34:	ea000001 	b	12b40 <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12b38:	e51b3010 	ldr	r3, [fp, #-16]
   12b3c:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12b40:	ebfff678 	bl	10528 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   12b44:	e51b3008 	ldr	r3, [fp, #-8]
   12b48:	e51b2014 	ldr	r2, [fp, #-20]
   12b4c:	e5832044 	str	r2, [r3, #68]	; 0x44
		taskEXIT_CRITICAL();
   12b50:	ebfff684 	bl	10568 <vPortExitCritical>
	}
   12b54:	e24bd004 	sub	sp, fp, #4
   12b58:	e8bd8800 	pop	{fp, pc}
   12b5c:	000147a4 	andeq	r4, r1, r4, lsr #15

00012b60 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   12b60:	e92d4800 	push	{fp, lr}
   12b64:	e28db004 	add	fp, sp, #4
   12b68:	e24dd010 	sub	sp, sp, #16
   12b6c:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12b70:	e51b3010 	ldr	r3, [fp, #-16]
   12b74:	e3530000 	cmp	r3, #0
   12b78:	1a000003 	bne	12b8c <xTaskGetApplicationTaskTag+0x2c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12b7c:	e59f3034 	ldr	r3, [pc, #52]	; 12bb8 <xTaskGetApplicationTaskTag+0x58>
   12b80:	e5933000 	ldr	r3, [r3]
   12b84:	e50b3008 	str	r3, [fp, #-8]
   12b88:	ea000001 	b	12b94 <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12b8c:	e51b3010 	ldr	r3, [fp, #-16]
   12b90:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12b94:	ebfff663 	bl	10528 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   12b98:	e51b3008 	ldr	r3, [fp, #-8]
   12b9c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12ba0:	e50b300c 	str	r3, [fp, #-12]
		taskEXIT_CRITICAL();
   12ba4:	ebfff66f 	bl	10568 <vPortExitCritical>

		return xReturn;
   12ba8:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12bac:	e1a00003 	mov	r0, r3
   12bb0:	e24bd004 	sub	sp, fp, #4
   12bb4:	e8bd8800 	pop	{fp, pc}
   12bb8:	000147a4 	andeq	r4, r1, r4, lsr #15

00012bbc <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   12bbc:	e92d4800 	push	{fp, lr}
   12bc0:	e28db004 	add	fp, sp, #4
   12bc4:	e24dd010 	sub	sp, sp, #16
   12bc8:	e50b0010 	str	r0, [fp, #-16]
   12bcc:	e50b1014 	str	r1, [fp, #-20]
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   12bd0:	e51b3010 	ldr	r3, [fp, #-16]
   12bd4:	e3530000 	cmp	r3, #0
   12bd8:	1a000003 	bne	12bec <xTaskCallApplicationTaskHook+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12bdc:	e59f3050 	ldr	r3, [pc, #80]	; 12c34 <xTaskCallApplicationTaskHook+0x78>
   12be0:	e5933000 	ldr	r3, [r3]
   12be4:	e50b3008 	str	r3, [fp, #-8]
   12be8:	ea000001 	b	12bf4 <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12bec:	e51b3010 	ldr	r3, [fp, #-16]
   12bf0:	e50b3008 	str	r3, [fp, #-8]
		}

		if( xTCB->pxTaskTag != NULL )
   12bf4:	e51b3008 	ldr	r3, [fp, #-8]
   12bf8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12bfc:	e3530000 	cmp	r3, #0
   12c00:	0a000005 	beq	12c1c <xTaskCallApplicationTaskHook+0x60>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   12c04:	e51b3008 	ldr	r3, [fp, #-8]
   12c08:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c0c:	e51b0014 	ldr	r0, [fp, #-20]
   12c10:	e12fff33 	blx	r3
   12c14:	e50b000c 	str	r0, [fp, #-12]
   12c18:	ea000001 	b	12c24 <xTaskCallApplicationTaskHook+0x68>
		}
		else
		{
			xReturn = pdFAIL;
   12c1c:	e3a03000 	mov	r3, #0
   12c20:	e50b300c 	str	r3, [fp, #-12]
		}

		return xReturn;
   12c24:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12c28:	e1a00003 	mov	r0, r3
   12c2c:	e24bd004 	sub	sp, fp, #4
   12c30:	e8bd8800 	pop	{fp, pc}
   12c34:	000147a4 	andeq	r4, r1, r4, lsr #15

00012c38 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12c38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12c3c:	e28db000 	add	fp, sp, #0
   12c40:	e24dd00c 	sub	sp, sp, #12
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   12c44:	e59f30e0 	ldr	r3, [pc, #224]	; 12d2c <vTaskSwitchContext+0xf4>
   12c48:	e5933000 	ldr	r3, [r3]
   12c4c:	e3530000 	cmp	r3, #0
   12c50:	0a000003 	beq	12c64 <vTaskSwitchContext+0x2c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   12c54:	e59f30d4 	ldr	r3, [pc, #212]	; 12d30 <vTaskSwitchContext+0xf8>
   12c58:	e3a02001 	mov	r2, #1
   12c5c:	e5832000 	str	r2, [r3]
   12c60:	ea00002e 	b	12d20 <vTaskSwitchContext+0xe8>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   12c64:	ea000004 	b	12c7c <vTaskSwitchContext+0x44>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
   12c68:	e59f30c4 	ldr	r3, [pc, #196]	; 12d34 <vTaskSwitchContext+0xfc>
   12c6c:	e5933000 	ldr	r3, [r3]
   12c70:	e2432001 	sub	r2, r3, #1
   12c74:	e59f30b8 	ldr	r3, [pc, #184]	; 12d34 <vTaskSwitchContext+0xfc>
   12c78:	e5832000 	str	r2, [r3]

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   12c7c:	e59f30b0 	ldr	r3, [pc, #176]	; 12d34 <vTaskSwitchContext+0xfc>
   12c80:	e5932000 	ldr	r2, [r3]
   12c84:	e59f10ac 	ldr	r1, [pc, #172]	; 12d38 <vTaskSwitchContext+0x100>
   12c88:	e1a03002 	mov	r3, r2
   12c8c:	e1a03103 	lsl	r3, r3, #2
   12c90:	e0833002 	add	r3, r3, r2
   12c94:	e1a03103 	lsl	r3, r3, #2
   12c98:	e0813003 	add	r3, r1, r3
   12c9c:	e5933000 	ldr	r3, [r3]
   12ca0:	e3530000 	cmp	r3, #0
   12ca4:	0affffef 	beq	12c68 <vTaskSwitchContext+0x30>

#if (configBLUETHUNDER == 1)
		pxCurrentTCB->pTraceEvent = pTraceEvent;	// Save Trace event pointer state to TCB.
#endif

		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   12ca8:	e59f3084 	ldr	r3, [pc, #132]	; 12d34 <vTaskSwitchContext+0xfc>
   12cac:	e5932000 	ldr	r2, [r3]
   12cb0:	e1a03002 	mov	r3, r2
   12cb4:	e1a03103 	lsl	r3, r3, #2
   12cb8:	e0833002 	add	r3, r3, r2
   12cbc:	e1a03103 	lsl	r3, r3, #2
   12cc0:	e59f2070 	ldr	r2, [pc, #112]	; 12d38 <vTaskSwitchContext+0x100>
   12cc4:	e0833002 	add	r3, r3, r2
   12cc8:	e50b3008 	str	r3, [fp, #-8]
   12ccc:	e51b3008 	ldr	r3, [fp, #-8]
   12cd0:	e5933004 	ldr	r3, [r3, #4]
   12cd4:	e5932004 	ldr	r2, [r3, #4]
   12cd8:	e51b3008 	ldr	r3, [fp, #-8]
   12cdc:	e5832004 	str	r2, [r3, #4]
   12ce0:	e51b3008 	ldr	r3, [fp, #-8]
   12ce4:	e5932004 	ldr	r2, [r3, #4]
   12ce8:	e51b3008 	ldr	r3, [fp, #-8]
   12cec:	e2833008 	add	r3, r3, #8
   12cf0:	e1520003 	cmp	r2, r3
   12cf4:	1a000004 	bne	12d0c <vTaskSwitchContext+0xd4>
   12cf8:	e51b3008 	ldr	r3, [fp, #-8]
   12cfc:	e5933004 	ldr	r3, [r3, #4]
   12d00:	e5932004 	ldr	r2, [r3, #4]
   12d04:	e51b3008 	ldr	r3, [fp, #-8]
   12d08:	e5832004 	str	r2, [r3, #4]
   12d0c:	e51b3008 	ldr	r3, [fp, #-8]
   12d10:	e5933004 	ldr	r3, [r3, #4]
   12d14:	e593200c 	ldr	r2, [r3, #12]
   12d18:	e59f301c 	ldr	r3, [pc, #28]	; 12d3c <vTaskSwitchContext+0x104>
   12d1c:	e5832000 	str	r2, [r3]
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   12d20:	e24bd000 	sub	sp, fp, #0
   12d24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12d28:	e12fff1e 	bx	lr
   12d2c:	00014890 	muleq	r1, r0, r8
   12d30:	00014898 	muleq	r1, r8, r8
   12d34:	00014888 	andeq	r4, r1, r8, lsl #17
   12d38:	000147a8 	andeq	r4, r1, r8, lsr #15
   12d3c:	000147a4 	andeq	r4, r1, r4, lsr #15

00012d40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   12d40:	e92d4800 	push	{fp, lr}
   12d44:	e28db004 	add	fp, sp, #4
   12d48:	e24dd010 	sub	sp, sp, #16
   12d4c:	e50b0010 	str	r0, [fp, #-16]
   12d50:	e50b1014 	str	r1, [fp, #-20]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   12d54:	e59f3070 	ldr	r3, [pc, #112]	; 12dcc <vTaskPlaceOnEventList+0x8c>
   12d58:	e5933000 	ldr	r3, [r3]
   12d5c:	e2833018 	add	r3, r3, #24
   12d60:	e51b0010 	ldr	r0, [fp, #-16]
   12d64:	e1a01003 	mov	r1, r3
   12d68:	ebfff836 	bl	10e48 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12d6c:	e59f3058 	ldr	r3, [pc, #88]	; 12dcc <vTaskPlaceOnEventList+0x8c>
   12d70:	e5933000 	ldr	r3, [r3]
   12d74:	e2833004 	add	r3, r3, #4
   12d78:	e1a00003 	mov	r0, r3
   12d7c:	ebfff866 	bl	10f1c <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   12d80:	e51b3014 	ldr	r3, [fp, #-20]
   12d84:	e3730001 	cmn	r3, #1
   12d88:	1a000006 	bne	12da8 <vTaskPlaceOnEventList+0x68>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12d8c:	e59f3038 	ldr	r3, [pc, #56]	; 12dcc <vTaskPlaceOnEventList+0x8c>
   12d90:	e5933000 	ldr	r3, [r3]
   12d94:	e2833004 	add	r3, r3, #4
   12d98:	e59f0030 	ldr	r0, [pc, #48]	; 12dd0 <vTaskPlaceOnEventList+0x90>
   12d9c:	e1a01003 	mov	r1, r3
   12da0:	ebfff803 	bl	10db4 <vListInsertEnd>
   12da4:	ea000006 	b	12dc4 <vTaskPlaceOnEventList+0x84>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   12da8:	e59f3024 	ldr	r3, [pc, #36]	; 12dd4 <vTaskPlaceOnEventList+0x94>
   12dac:	e5932000 	ldr	r2, [r3]
   12db0:	e51b3014 	ldr	r3, [fp, #-20]
   12db4:	e0823003 	add	r3, r2, r3
   12db8:	e50b3008 	str	r3, [fp, #-8]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   12dbc:	e51b0008 	ldr	r0, [fp, #-8]
   12dc0:	eb00013a 	bl	132b0 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   12dc4:	e24bd004 	sub	sp, fp, #4
   12dc8:	e8bd8800 	pop	{fp, pc}
   12dcc:	000147a4 	andeq	r4, r1, r4, lsr #15
   12dd0:	00014868 	andeq	r4, r1, r8, ror #16
   12dd4:	00014880 	andeq	r4, r1, r0, lsl #17

00012dd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   12dd8:	e92d4800 	push	{fp, lr}
   12ddc:	e28db004 	add	fp, sp, #4
   12de0:	e24dd010 	sub	sp, sp, #16
   12de4:	e50b0010 	str	r0, [fp, #-16]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   12de8:	e51b3010 	ldr	r3, [fp, #-16]
   12dec:	e593300c 	ldr	r3, [r3, #12]
   12df0:	e593300c 	ldr	r3, [r3, #12]
   12df4:	e50b300c 	str	r3, [fp, #-12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   12df8:	e51b300c 	ldr	r3, [fp, #-12]
   12dfc:	e2833018 	add	r3, r3, #24
   12e00:	e1a00003 	mov	r0, r3
   12e04:	ebfff844 	bl	10f1c <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12e08:	e59f30cc 	ldr	r3, [pc, #204]	; 12edc <xTaskRemoveFromEventList+0x104>
   12e0c:	e5933000 	ldr	r3, [r3]
   12e10:	e3530000 	cmp	r3, #0
   12e14:	1a00001b 	bne	12e88 <xTaskRemoveFromEventList+0xb0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   12e18:	e51b300c 	ldr	r3, [fp, #-12]
   12e1c:	e2833004 	add	r3, r3, #4
   12e20:	e1a00003 	mov	r0, r3
   12e24:	ebfff83c 	bl	10f1c <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   12e28:	e51b300c 	ldr	r3, [fp, #-12]
   12e2c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e30:	e59f30a8 	ldr	r3, [pc, #168]	; 12ee0 <xTaskRemoveFromEventList+0x108>
   12e34:	e5933000 	ldr	r3, [r3]
   12e38:	e1520003 	cmp	r2, r3
   12e3c:	9a000003 	bls	12e50 <xTaskRemoveFromEventList+0x78>
   12e40:	e51b300c 	ldr	r3, [fp, #-12]
   12e44:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e48:	e59f3090 	ldr	r3, [pc, #144]	; 12ee0 <xTaskRemoveFromEventList+0x108>
   12e4c:	e5832000 	str	r2, [r3]
   12e50:	e51b300c 	ldr	r3, [fp, #-12]
   12e54:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e58:	e1a03002 	mov	r3, r2
   12e5c:	e1a03103 	lsl	r3, r3, #2
   12e60:	e0833002 	add	r3, r3, r2
   12e64:	e1a03103 	lsl	r3, r3, #2
   12e68:	e59f2074 	ldr	r2, [pc, #116]	; 12ee4 <xTaskRemoveFromEventList+0x10c>
   12e6c:	e0832002 	add	r2, r3, r2
   12e70:	e51b300c 	ldr	r3, [fp, #-12]
   12e74:	e2833004 	add	r3, r3, #4
   12e78:	e1a00002 	mov	r0, r2
   12e7c:	e1a01003 	mov	r1, r3
   12e80:	ebfff7cb 	bl	10db4 <vListInsertEnd>
   12e84:	ea000004 	b	12e9c <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   12e88:	e51b300c 	ldr	r3, [fp, #-12]
   12e8c:	e2833018 	add	r3, r3, #24
   12e90:	e59f0050 	ldr	r0, [pc, #80]	; 12ee8 <xTaskRemoveFromEventList+0x110>
   12e94:	e1a01003 	mov	r1, r3
   12e98:	ebfff7c5 	bl	10db4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12e9c:	e51b300c 	ldr	r3, [fp, #-12]
   12ea0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ea4:	e59f3040 	ldr	r3, [pc, #64]	; 12eec <xTaskRemoveFromEventList+0x114>
   12ea8:	e5933000 	ldr	r3, [r3]
   12eac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12eb0:	e1520003 	cmp	r2, r3
   12eb4:	3a000002 	bcc	12ec4 <xTaskRemoveFromEventList+0xec>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   12eb8:	e3a03001 	mov	r3, #1
   12ebc:	e50b3008 	str	r3, [fp, #-8]
   12ec0:	ea000001 	b	12ecc <xTaskRemoveFromEventList+0xf4>
	}
	else
	{
		xReturn = pdFALSE;
   12ec4:	e3a03000 	mov	r3, #0
   12ec8:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   12ecc:	e51b3008 	ldr	r3, [fp, #-8]
}
   12ed0:	e1a00003 	mov	r0, r3
   12ed4:	e24bd004 	sub	sp, fp, #4
   12ed8:	e8bd8800 	pop	{fp, pc}
   12edc:	00014890 	muleq	r1, r0, r8
   12ee0:	00014888 	andeq	r4, r1, r8, lsl #17
   12ee4:	000147a8 	andeq	r4, r1, r8, lsr #15
   12ee8:	0001483c 	andeq	r4, r1, ip, lsr r8
   12eec:	000147a4 	andeq	r4, r1, r4, lsr #15

00012ef0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   12ef0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12ef4:	e28db000 	add	fp, sp, #0
   12ef8:	e24dd00c 	sub	sp, sp, #12
   12efc:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   12f00:	e59f3024 	ldr	r3, [pc, #36]	; 12f2c <vTaskSetTimeOutState+0x3c>
   12f04:	e5932000 	ldr	r2, [r3]
   12f08:	e51b3008 	ldr	r3, [fp, #-8]
   12f0c:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   12f10:	e59f3018 	ldr	r3, [pc, #24]	; 12f30 <vTaskSetTimeOutState+0x40>
   12f14:	e5932000 	ldr	r2, [r3]
   12f18:	e51b3008 	ldr	r3, [fp, #-8]
   12f1c:	e5832004 	str	r2, [r3, #4]
}
   12f20:	e24bd000 	sub	sp, fp, #0
   12f24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12f28:	e12fff1e 	bx	lr
   12f2c:	0001489c 	muleq	r1, ip, r8
   12f30:	00014880 	andeq	r4, r1, r0, lsl #17

00012f34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   12f34:	e92d4800 	push	{fp, lr}
   12f38:	e28db004 	add	fp, sp, #4
   12f3c:	e24dd010 	sub	sp, sp, #16
   12f40:	e50b0010 	str	r0, [fp, #-16]
   12f44:	e50b1014 	str	r1, [fp, #-20]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   12f48:	ebfff576 	bl	10528 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   12f4c:	e51b3014 	ldr	r3, [fp, #-20]
   12f50:	e5933000 	ldr	r3, [r3]
   12f54:	e3730001 	cmn	r3, #1
   12f58:	1a000002 	bne	12f68 <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   12f5c:	e3a03000 	mov	r3, #0
   12f60:	e50b3008 	str	r3, [fp, #-8]
   12f64:	ea000028 	b	1300c <xTaskCheckForTimeOut+0xd8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   12f68:	e51b3010 	ldr	r3, [fp, #-16]
   12f6c:	e5932000 	ldr	r2, [r3]
   12f70:	e59f30a8 	ldr	r3, [pc, #168]	; 13020 <xTaskCheckForTimeOut+0xec>
   12f74:	e5933000 	ldr	r3, [r3]
   12f78:	e1520003 	cmp	r2, r3
   12f7c:	0a000008 	beq	12fa4 <xTaskCheckForTimeOut+0x70>
   12f80:	e51b3010 	ldr	r3, [fp, #-16]
   12f84:	e5932004 	ldr	r2, [r3, #4]
   12f88:	e59f3094 	ldr	r3, [pc, #148]	; 13024 <xTaskCheckForTimeOut+0xf0>
   12f8c:	e5933000 	ldr	r3, [r3]
   12f90:	e1520003 	cmp	r2, r3
   12f94:	8a000002 	bhi	12fa4 <xTaskCheckForTimeOut+0x70>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   12f98:	e3a03001 	mov	r3, #1
   12f9c:	e50b3008 	str	r3, [fp, #-8]
   12fa0:	ea000019 	b	1300c <xTaskCheckForTimeOut+0xd8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   12fa4:	e59f3078 	ldr	r3, [pc, #120]	; 13024 <xTaskCheckForTimeOut+0xf0>
   12fa8:	e5932000 	ldr	r2, [r3]
   12fac:	e51b3010 	ldr	r3, [fp, #-16]
   12fb0:	e5933004 	ldr	r3, [r3, #4]
   12fb4:	e0632002 	rsb	r2, r3, r2
   12fb8:	e51b3014 	ldr	r3, [fp, #-20]
   12fbc:	e5933000 	ldr	r3, [r3]
   12fc0:	e1520003 	cmp	r2, r3
   12fc4:	2a00000e 	bcs	13004 <xTaskCheckForTimeOut+0xd0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   12fc8:	e51b3014 	ldr	r3, [fp, #-20]
   12fcc:	e5932000 	ldr	r2, [r3]
   12fd0:	e51b3010 	ldr	r3, [fp, #-16]
   12fd4:	e5931004 	ldr	r1, [r3, #4]
   12fd8:	e59f3044 	ldr	r3, [pc, #68]	; 13024 <xTaskCheckForTimeOut+0xf0>
   12fdc:	e5933000 	ldr	r3, [r3]
   12fe0:	e0633001 	rsb	r3, r3, r1
   12fe4:	e0822003 	add	r2, r2, r3
   12fe8:	e51b3014 	ldr	r3, [fp, #-20]
   12fec:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   12ff0:	e51b0010 	ldr	r0, [fp, #-16]
   12ff4:	ebffffbd 	bl	12ef0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   12ff8:	e3a03000 	mov	r3, #0
   12ffc:	e50b3008 	str	r3, [fp, #-8]
   13000:	ea000001 	b	1300c <xTaskCheckForTimeOut+0xd8>
		}
		else
		{
			xReturn = pdTRUE;
   13004:	e3a03001 	mov	r3, #1
   13008:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	taskEXIT_CRITICAL();
   1300c:	ebfff555 	bl	10568 <vPortExitCritical>

	return xReturn;
   13010:	e51b3008 	ldr	r3, [fp, #-8]
}
   13014:	e1a00003 	mov	r0, r3
   13018:	e24bd004 	sub	sp, fp, #4
   1301c:	e8bd8800 	pop	{fp, pc}
   13020:	0001489c 	muleq	r1, ip, r8
   13024:	00014880 	andeq	r4, r1, r0, lsl #17

00013028 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   13028:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1302c:	e28db000 	add	fp, sp, #0
	xMissedYield = pdTRUE;
   13030:	e59f3010 	ldr	r3, [pc, #16]	; 13048 <vTaskMissedYield+0x20>
   13034:	e3a02001 	mov	r2, #1
   13038:	e5832000 	str	r2, [r3]
}
   1303c:	e24bd000 	sub	sp, fp, #0
   13040:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13044:	e12fff1e 	bx	lr
   13048:	00014898 	muleq	r1, r8, r8

0001304c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1304c:	e92d4800 	push	{fp, lr}
   13050:	e28db004 	add	fp, sp, #4
   13054:	e24dd008 	sub	sp, sp, #8
   13058:	e50b0008 	str	r0, [fp, #-8]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   1305c:	eb000065 	bl	131f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   13060:	e59f3014 	ldr	r3, [pc, #20]	; 1307c <prvIdleTask+0x30>
   13064:	e5933000 	ldr	r3, [r3]
   13068:	e3530001 	cmp	r3, #1
   1306c:	9a000001 	bls	13078 <prvIdleTask+0x2c>
			{
				taskYIELD();
   13070:	ef000000 	svc	0x00000000
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
   13074:	eafffff8 	b	1305c <prvIdleTask+0x10>
   13078:	eafffff7 	b	1305c <prvIdleTask+0x10>
   1307c:	000147a8 	andeq	r4, r1, r8, lsr #15

00013080 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   13080:	e92d4800 	push	{fp, lr}
   13084:	e28db004 	add	fp, sp, #4
   13088:	e24dd010 	sub	sp, sp, #16
   1308c:	e50b0008 	str	r0, [fp, #-8]
   13090:	e50b100c 	str	r1, [fp, #-12]
   13094:	e50b2010 	str	r2, [fp, #-16]
   13098:	e50b3014 	str	r3, [fp, #-20]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   1309c:	e51b3008 	ldr	r3, [fp, #-8]
   130a0:	e2833034 	add	r3, r3, #52	; 0x34
   130a4:	e1a00003 	mov	r0, r3
   130a8:	e51b100c 	ldr	r1, [fp, #-12]
   130ac:	e3a02010 	mov	r2, #16
   130b0:	eb000562 	bl	14640 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   130b4:	e51b3008 	ldr	r3, [fp, #-8]
   130b8:	e3a02000 	mov	r2, #0
   130bc:	e5c32043 	strb	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   130c0:	e51b3010 	ldr	r3, [fp, #-16]
   130c4:	e3530004 	cmp	r3, #4
   130c8:	9a000001 	bls	130d4 <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   130cc:	e3a03004 	mov	r3, #4
   130d0:	e50b3010 	str	r3, [fp, #-16]
	}

	pxTCB->uxPriority = uxPriority;
   130d4:	e51b3008 	ldr	r3, [fp, #-8]
   130d8:	e51b2010 	ldr	r2, [fp, #-16]
   130dc:	e583202c 	str	r2, [r3, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   130e0:	e51b3008 	ldr	r3, [fp, #-8]
   130e4:	e2833004 	add	r3, r3, #4
   130e8:	e1a00003 	mov	r0, r3
   130ec:	ebfff726 	bl	10d8c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   130f0:	e51b3008 	ldr	r3, [fp, #-8]
   130f4:	e2833018 	add	r3, r3, #24
   130f8:	e1a00003 	mov	r0, r3
   130fc:	ebfff722 	bl	10d8c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   13100:	e51b3008 	ldr	r3, [fp, #-8]
   13104:	e51b2008 	ldr	r2, [fp, #-8]
   13108:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   1310c:	e51b3010 	ldr	r3, [fp, #-16]
   13110:	e2632005 	rsb	r2, r3, #5
   13114:	e51b3008 	ldr	r3, [fp, #-8]
   13118:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   1311c:	e51b3008 	ldr	r3, [fp, #-8]
   13120:	e51b2008 	ldr	r2, [fp, #-8]
   13124:	e5832024 	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   13128:	e51b3008 	ldr	r3, [fp, #-8]
   1312c:	e3a02000 	mov	r2, #0
   13130:	e5832044 	str	r2, [r3, #68]	; 0x44
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   13134:	e24bd004 	sub	sp, fp, #4
   13138:	e8bd8800 	pop	{fp, pc}

0001313c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   1313c:	e92d4800 	push	{fp, lr}
   13140:	e28db004 	add	fp, sp, #4
   13144:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   13148:	e3a03000 	mov	r3, #0
   1314c:	e50b3008 	str	r3, [fp, #-8]
   13150:	ea00000b 	b	13184 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   13154:	e51b2008 	ldr	r2, [fp, #-8]
   13158:	e1a03002 	mov	r3, r2
   1315c:	e1a03103 	lsl	r3, r3, #2
   13160:	e0833002 	add	r3, r3, r2
   13164:	e1a03103 	lsl	r3, r3, #2
   13168:	e59f2068 	ldr	r2, [pc, #104]	; 131d8 <prvInitialiseTaskLists+0x9c>
   1316c:	e0833002 	add	r3, r3, r2
   13170:	e1a00003 	mov	r0, r3
   13174:	ebfff6eb 	bl	10d28 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   13178:	e51b3008 	ldr	r3, [fp, #-8]
   1317c:	e2833001 	add	r3, r3, #1
   13180:	e50b3008 	str	r3, [fp, #-8]
   13184:	e51b3008 	ldr	r3, [fp, #-8]
   13188:	e3530004 	cmp	r3, #4
   1318c:	9afffff0 	bls	13154 <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   13190:	e59f0044 	ldr	r0, [pc, #68]	; 131dc <prvInitialiseTaskLists+0xa0>
   13194:	ebfff6e3 	bl	10d28 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   13198:	e59f0040 	ldr	r0, [pc, #64]	; 131e0 <prvInitialiseTaskLists+0xa4>
   1319c:	ebfff6e1 	bl	10d28 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   131a0:	e59f003c 	ldr	r0, [pc, #60]	; 131e4 <prvInitialiseTaskLists+0xa8>
   131a4:	ebfff6df 	bl	10d28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   131a8:	e59f0038 	ldr	r0, [pc, #56]	; 131e8 <prvInitialiseTaskLists+0xac>
   131ac:	ebfff6dd 	bl	10d28 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   131b0:	e59f0034 	ldr	r0, [pc, #52]	; 131ec <prvInitialiseTaskLists+0xb0>
   131b4:	ebfff6db 	bl	10d28 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   131b8:	e59f3030 	ldr	r3, [pc, #48]	; 131f0 <prvInitialiseTaskLists+0xb4>
   131bc:	e59f2018 	ldr	r2, [pc, #24]	; 131dc <prvInitialiseTaskLists+0xa0>
   131c0:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   131c4:	e59f3028 	ldr	r3, [pc, #40]	; 131f4 <prvInitialiseTaskLists+0xb8>
   131c8:	e59f2010 	ldr	r2, [pc, #16]	; 131e0 <prvInitialiseTaskLists+0xa4>
   131cc:	e5832000 	str	r2, [r3]
}
   131d0:	e24bd004 	sub	sp, fp, #4
   131d4:	e8bd8800 	pop	{fp, pc}
   131d8:	000147a8 	andeq	r4, r1, r8, lsr #15
   131dc:	0001480c 	andeq	r4, r1, ip, lsl #16
   131e0:	00014820 	andeq	r4, r1, r0, lsr #16
   131e4:	0001483c 	andeq	r4, r1, ip, lsr r8
   131e8:	00014850 	andeq	r4, r1, r0, asr r8
   131ec:	00014868 	andeq	r4, r1, r8, ror #16
   131f0:	00014834 	andeq	r4, r1, r4, lsr r8
   131f4:	00014838 	andeq	r4, r1, r8, lsr r8

000131f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   131f8:	e92d4800 	push	{fp, lr}
   131fc:	e28db004 	add	fp, sp, #4
   13200:	e24dd008 	sub	sp, sp, #8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   13204:	e59f3098 	ldr	r3, [pc, #152]	; 132a4 <prvCheckTasksWaitingTermination+0xac>
   13208:	e5933000 	ldr	r3, [r3]
   1320c:	e3530000 	cmp	r3, #0
   13210:	0a000021 	beq	1329c <prvCheckTasksWaitingTermination+0xa4>
		{
			vTaskSuspendAll();
   13214:	ebfffd1d 	bl	12690 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   13218:	e59f3088 	ldr	r3, [pc, #136]	; 132a8 <prvCheckTasksWaitingTermination+0xb0>
   1321c:	e5933000 	ldr	r3, [r3]
   13220:	e3530000 	cmp	r3, #0
   13224:	13a03000 	movne	r3, #0
   13228:	03a03001 	moveq	r3, #1
   1322c:	e6ef3073 	uxtb	r3, r3
   13230:	e50b3008 	str	r3, [fp, #-8]
			xTaskResumeAll();
   13234:	ebfffd20 	bl	126bc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   13238:	e51b3008 	ldr	r3, [fp, #-8]
   1323c:	e3530000 	cmp	r3, #0
   13240:	1a000015 	bne	1329c <prvCheckTasksWaitingTermination+0xa4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   13244:	ebfff4b7 	bl	10528 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   13248:	e59f3058 	ldr	r3, [pc, #88]	; 132a8 <prvCheckTasksWaitingTermination+0xb0>
   1324c:	e593300c 	ldr	r3, [r3, #12]
   13250:	e593300c 	ldr	r3, [r3, #12]
   13254:	e50b300c 	str	r3, [fp, #-12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   13258:	e51b300c 	ldr	r3, [fp, #-12]
   1325c:	e2833004 	add	r3, r3, #4
   13260:	e1a00003 	mov	r0, r3
   13264:	ebfff72c 	bl	10f1c <vListRemove>
					--uxCurrentNumberOfTasks;
   13268:	e59f303c 	ldr	r3, [pc, #60]	; 132ac <prvCheckTasksWaitingTermination+0xb4>
   1326c:	e5933000 	ldr	r3, [r3]
   13270:	e2432001 	sub	r2, r3, #1
   13274:	e59f3030 	ldr	r3, [pc, #48]	; 132ac <prvCheckTasksWaitingTermination+0xb4>
   13278:	e5832000 	str	r2, [r3]
					--uxTasksDeleted;
   1327c:	e59f3020 	ldr	r3, [pc, #32]	; 132a4 <prvCheckTasksWaitingTermination+0xac>
   13280:	e5933000 	ldr	r3, [r3]
   13284:	e2432001 	sub	r2, r3, #1
   13288:	e59f3014 	ldr	r3, [pc, #20]	; 132a4 <prvCheckTasksWaitingTermination+0xac>
   1328c:	e5832000 	str	r2, [r3]
				}
				taskEXIT_CRITICAL();
   13290:	ebfff4b4 	bl	10568 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   13294:	e51b000c 	ldr	r0, [fp, #-12]
   13298:	eb00005e 	bl	13418 <prvDeleteTCB>
			}
		}
	}
	#endif
}
   1329c:	e24bd004 	sub	sp, fp, #4
   132a0:	e8bd8800 	pop	{fp, pc}
   132a4:	00014864 	andeq	r4, r1, r4, ror #16
   132a8:	00014850 	andeq	r4, r1, r0, asr r8
   132ac:	0001487c 	andeq	r4, r1, ip, ror r8

000132b0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   132b0:	e92d4800 	push	{fp, lr}
   132b4:	e28db004 	add	fp, sp, #4
   132b8:	e24dd008 	sub	sp, sp, #8
   132bc:	e50b0008 	str	r0, [fp, #-8]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   132c0:	e59f3088 	ldr	r3, [pc, #136]	; 13350 <prvAddCurrentTaskToDelayedList+0xa0>
   132c4:	e5933000 	ldr	r3, [r3]
   132c8:	e51b2008 	ldr	r2, [fp, #-8]
   132cc:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   132d0:	e59f307c 	ldr	r3, [pc, #124]	; 13354 <prvAddCurrentTaskToDelayedList+0xa4>
   132d4:	e5933000 	ldr	r3, [r3]
   132d8:	e51b2008 	ldr	r2, [fp, #-8]
   132dc:	e1520003 	cmp	r2, r3
   132e0:	2a000008 	bcs	13308 <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   132e4:	e59f306c 	ldr	r3, [pc, #108]	; 13358 <prvAddCurrentTaskToDelayedList+0xa8>
   132e8:	e5932000 	ldr	r2, [r3]
   132ec:	e59f305c 	ldr	r3, [pc, #92]	; 13350 <prvAddCurrentTaskToDelayedList+0xa0>
   132f0:	e5933000 	ldr	r3, [r3]
   132f4:	e2833004 	add	r3, r3, #4
   132f8:	e1a00002 	mov	r0, r2
   132fc:	e1a01003 	mov	r1, r3
   13300:	ebfff6d0 	bl	10e48 <vListInsert>
   13304:	ea00000f 	b	13348 <prvAddCurrentTaskToDelayedList+0x98>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   13308:	e59f304c 	ldr	r3, [pc, #76]	; 1335c <prvAddCurrentTaskToDelayedList+0xac>
   1330c:	e5932000 	ldr	r2, [r3]
   13310:	e59f3038 	ldr	r3, [pc, #56]	; 13350 <prvAddCurrentTaskToDelayedList+0xa0>
   13314:	e5933000 	ldr	r3, [r3]
   13318:	e2833004 	add	r3, r3, #4
   1331c:	e1a00002 	mov	r0, r2
   13320:	e1a01003 	mov	r1, r3
   13324:	ebfff6c7 	bl	10e48 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   13328:	e59f3030 	ldr	r3, [pc, #48]	; 13360 <prvAddCurrentTaskToDelayedList+0xb0>
   1332c:	e5933000 	ldr	r3, [r3]
   13330:	e51b2008 	ldr	r2, [fp, #-8]
   13334:	e1520003 	cmp	r2, r3
   13338:	2a000002 	bcs	13348 <prvAddCurrentTaskToDelayedList+0x98>
		{
			xNextTaskUnblockTime = xTimeToWake;
   1333c:	e59f301c 	ldr	r3, [pc, #28]	; 13360 <prvAddCurrentTaskToDelayedList+0xb0>
   13340:	e51b2008 	ldr	r2, [fp, #-8]
   13344:	e5832000 	str	r2, [r3]
		}
	}
}
   13348:	e24bd004 	sub	sp, fp, #4
   1334c:	e8bd8800 	pop	{fp, pc}
   13350:	000147a4 	andeq	r4, r1, r4, lsr #15
   13354:	00014880 	andeq	r4, r1, r0, lsl #17
   13358:	00014838 	andeq	r4, r1, r8, lsr r8
   1335c:	00014834 	andeq	r4, r1, r4, lsr r8
   13360:	00014718 	andeq	r4, r1, r8, lsl r7

00013364 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   13364:	e92d4800 	push	{fp, lr}
   13368:	e28db004 	add	fp, sp, #4
   1336c:	e24dd010 	sub	sp, sp, #16
   13370:	e1a03000 	mov	r3, r0
   13374:	e50b1014 	str	r1, [fp, #-20]
   13378:	e14b30be 	strh	r3, [fp, #-14]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   1337c:	e3a00048 	mov	r0, #72	; 0x48
   13380:	eb0002b6 	bl	13e60 <pvPortMalloc>
   13384:	e50b0008 	str	r0, [fp, #-8]

	if( pxNewTCB != NULL )
   13388:	e51b3008 	ldr	r3, [fp, #-8]
   1338c:	e3530000 	cmp	r3, #0
   13390:	0a00001c 	beq	13408 <prvAllocateTCBAndStack+0xa4>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   13394:	e51b3014 	ldr	r3, [fp, #-20]
   13398:	e3530000 	cmp	r3, #0
   1339c:	1a000005 	bne	133b8 <prvAllocateTCBAndStack+0x54>
   133a0:	e15b30be 	ldrh	r3, [fp, #-14]
   133a4:	e1a03103 	lsl	r3, r3, #2
   133a8:	e1a00003 	mov	r0, r3
   133ac:	eb0002ab 	bl	13e60 <pvPortMalloc>
   133b0:	e1a03000 	mov	r3, r0
   133b4:	ea000000 	b	133bc <prvAllocateTCBAndStack+0x58>
   133b8:	e51b3014 	ldr	r3, [fp, #-20]
   133bc:	e51b2008 	ldr	r2, [fp, #-8]
   133c0:	e5823030 	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   133c4:	e51b3008 	ldr	r3, [fp, #-8]
   133c8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   133cc:	e3530000 	cmp	r3, #0
   133d0:	1a000004 	bne	133e8 <prvAllocateTCBAndStack+0x84>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   133d4:	e51b0008 	ldr	r0, [fp, #-8]
   133d8:	eb000311 	bl	14024 <vPortFree>
			pxNewTCB = NULL;
   133dc:	e3a03000 	mov	r3, #0
   133e0:	e50b3008 	str	r3, [fp, #-8]
   133e4:	ea000007 	b	13408 <prvAllocateTCBAndStack+0xa4>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   133e8:	e51b3008 	ldr	r3, [fp, #-8]
   133ec:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   133f0:	e15b30be 	ldrh	r3, [fp, #-14]
   133f4:	e1a03103 	lsl	r3, r3, #2
   133f8:	e1a00002 	mov	r0, r2
   133fc:	e3a010a5 	mov	r1, #165	; 0xa5
   13400:	e1a02003 	mov	r2, r3
   13404:	eb000450 	bl	1454c <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   13408:	e51b3008 	ldr	r3, [fp, #-8]
}
   1340c:	e1a00003 	mov	r0, r3
   13410:	e24bd004 	sub	sp, fp, #4
   13414:	e8bd8800 	pop	{fp, pc}

00013418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   13418:	e92d4800 	push	{fp, lr}
   1341c:	e28db004 	add	fp, sp, #4
   13420:	e24dd008 	sub	sp, sp, #8
   13424:	e50b0008 	str	r0, [fp, #-8]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   13428:	e51b3008 	ldr	r3, [fp, #-8]
   1342c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   13430:	e1a00003 	mov	r0, r3
   13434:	eb0002fa 	bl	14024 <vPortFree>
		vPortFree( pxTCB );
   13438:	e51b0008 	ldr	r0, [fp, #-8]
   1343c:	eb0002f8 	bl	14024 <vPortFree>
	}
   13440:	e24bd004 	sub	sp, fp, #4
   13444:	e8bd8800 	pop	{fp, pc}

00013448 <irqEnable>:
static volatile BCM2835_INTC_REGS * const pRegs = (BCM2835_INTC_REGS *) (BCM2835_BASE_INTC);

/**
 *	Enables all IRQ's in the CPU's CPSR register.
 **/
static void irqEnable() {
   13448:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1344c:	e28db000 	add	fp, sp, #0
	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   13450:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled.
   13454:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   13458:	e121f000 	msr	CPSR_c, r0
}
   1345c:	e24bd000 	sub	sp, fp, #0
   13460:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13464:	e12fff1e 	bx	lr

00013468 <irqDisable>:

static void irqDisable() {
   13468:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1346c:	e28db000 	add	fp, sp, #0
	__asm volatile("mrs		r0,cpsr");		// Read in the cpsr register.
   13470:	e10f0000 	mrs	r0, CPSR
	__asm volatile("orr		r0,r0,#0x80");	// Set bit 8, (0x80) -- Causes IRQs to be disabled.
   13474:	e3800080 	orr	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register.
   13478:	e121f000 	msr	CPSR_c, r0

}
   1347c:	e24bd000 	sub	sp, fp, #0
   13480:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13484:	e12fff1e 	bx	lr

00013488 <irqHandler>:
/**
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler() {
   13488:	e92d4830 	push	{r4, r5, fp, lr}
   1348c:	e28db00c 	add	fp, sp, #12
   13490:	e24dd008 	sub	sp, sp, #8
	register unsigned long ulMaskedStatus;
	register unsigned long irqNumber;

	ulMaskedStatus = pRegs->IRQBasic;
   13494:	e59f30a8 	ldr	r3, [pc, #168]	; 13544 <irqHandler+0xbc>
   13498:	e5934000 	ldr	r4, [r3]

	/* Bits 7 through 0 in IRQBasic represent interrupts 64-71 */
	if (ulMaskedStatus & 0xFF) {
   1349c:	e6ef3074 	uxtb	r3, r4
   134a0:	e3530000 	cmp	r3, #0
   134a4:	0a000001 	beq	134b0 <irqHandler+0x28>
		irqNumber=64 + 31;
   134a8:	e3a0505f 	mov	r5, #95	; 0x5f
   134ac:	ea00000e 	b	134ec <irqHandler+0x64>
	}

	/* Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0) */
	else if(ulMaskedStatus & 0x100) {
   134b0:	e2043c01 	and	r3, r4, #256	; 0x100
   134b4:	e3530000 	cmp	r3, #0
   134b8:	0a000003 	beq	134cc <irqHandler+0x44>
		ulMaskedStatus = pRegs->Pending1;
   134bc:	e59f3080 	ldr	r3, [pc, #128]	; 13544 <irqHandler+0xbc>
   134c0:	e5934004 	ldr	r4, [r3, #4]
		irqNumber = 0 + 31;
   134c4:	e3a0501f 	mov	r5, #31
   134c8:	ea000007 	b	134ec <irqHandler+0x64>
	}

	/* Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32) */
	else if(ulMaskedStatus & 0x200) {
   134cc:	e2043c02 	and	r3, r4, #512	; 0x200
   134d0:	e3530000 	cmp	r3, #0
   134d4:	0a000003 	beq	134e8 <irqHandler+0x60>
		ulMaskedStatus = pRegs->Pending2;
   134d8:	e59f3064 	ldr	r3, [pc, #100]	; 13544 <irqHandler+0xbc>
   134dc:	e5934008 	ldr	r4, [r3, #8]
		irqNumber = 32 + 31;
   134e0:	e3a0503f 	mov	r5, #63	; 0x3f
   134e4:	ea000000 	b	134ec <irqHandler+0x64>
	}

	else {
		// No interrupt avaialbe, so just return.
		return;
   134e8:	ea000013 	b	1353c <irqHandler+0xb4>
	}

	/* Keep only least significant bit, in case multiple interrupts have occured */
	ulMaskedStatus&=-ulMaskedStatus;
   134ec:	e2643000 	rsb	r3, r4, #0
   134f0:	e0044003 	and	r4, r4, r3
	/* Some magic to determine number of interrupt to serve */
	irqNumber=irqNumber-clz(ulMaskedStatus);
   134f4:	e50b4010 	str	r4, [fp, #-16]
   134f8:	e51b3010 	ldr	r3, [fp, #-16]
   134fc:	e16f3f13 	clz	r3, r3
   13500:	e50b3014 	str	r3, [fp, #-20]
   13504:	e51b3014 	ldr	r3, [fp, #-20]
   13508:	e0635005 	rsb	r5, r3, r5
	/* Call interrupt handler */
	g_VectorTable[irqNumber].pfnHandler(irqNumber, g_VectorTable[irqNumber].pParam);
   1350c:	e59f3034 	ldr	r3, [pc, #52]	; 13548 <irqHandler+0xc0>
   13510:	e7933185 	ldr	r3, [r3, r5, lsl #3]
   13514:	e1a01005 	mov	r1, r5
   13518:	e59fc028 	ldr	ip, [pc, #40]	; 13548 <irqHandler+0xc0>
   1351c:	e3a02004 	mov	r2, #4
   13520:	e1a00185 	lsl	r0, r5, #3
   13524:	e08c0000 	add	r0, ip, r0
   13528:	e0802002 	add	r2, r0, r2
   1352c:	e5922000 	ldr	r2, [r2]
   13530:	e1a00001 	mov	r0, r1
   13534:	e1a01002 	mov	r1, r2
   13538:	e12fff33 	blx	r3
}
   1353c:	e24bd00c 	sub	sp, fp, #12
   13540:	e8bd8830 	pop	{r4, r5, fp, pc}
   13544:	2000b200 	andcs	fp, r0, r0, lsl #4
   13548:	000148a4 	andeq	r4, r1, r4, lsr #17

0001354c <stubHandler>:


static void stubHandler(int nIRQ, void *pParam) {
   1354c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13550:	e28db000 	add	fp, sp, #0
   13554:	e24dd00c 	sub	sp, sp, #12
   13558:	e50b0008 	str	r0, [fp, #-8]
   1355c:	e50b100c 	str	r1, [fp, #-12]
	/**
	 *	Actually if we get here, we should probably disable the IRQ,
	 *	otherwise we could lock up this system, as there is nothing to
	 *	ackknowledge the interrupt.
	 **/
}
   13560:	e24bd000 	sub	sp, fp, #0
   13564:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13568:	e12fff1e 	bx	lr

0001356c <InitInterruptController>:

int InitInterruptController() {
   1356c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13570:	e28db000 	add	fp, sp, #0
   13574:	e24dd00c 	sub	sp, sp, #12
	int i;
	for(i = 0; i < BCM2835_INTC_TOTAL_IRQ; i++) {
   13578:	e3a03000 	mov	r3, #0
   1357c:	e50b3008 	str	r3, [fp, #-8]
   13580:	ea00000e 	b	135c0 <InitInterruptController+0x54>
		g_VectorTable[i].pfnHandler 	= stubHandler;
   13584:	e59f3054 	ldr	r3, [pc, #84]	; 135e0 <InitInterruptController+0x74>
   13588:	e51b2008 	ldr	r2, [fp, #-8]
   1358c:	e59f1050 	ldr	r1, [pc, #80]	; 135e4 <InitInterruptController+0x78>
   13590:	e7831182 	str	r1, [r3, r2, lsl #3]
		g_VectorTable[i].pParam			= (void *) 0;
   13594:	e59f1044 	ldr	r1, [pc, #68]	; 135e0 <InitInterruptController+0x74>
   13598:	e51b2008 	ldr	r2, [fp, #-8]
   1359c:	e3a03004 	mov	r3, #4
   135a0:	e1a02182 	lsl	r2, r2, #3
   135a4:	e0812002 	add	r2, r1, r2
   135a8:	e0823003 	add	r3, r2, r3
   135ac:	e3a02000 	mov	r2, #0
   135b0:	e5832000 	str	r2, [r3]
	 **/
}

int InitInterruptController() {
	int i;
	for(i = 0; i < BCM2835_INTC_TOTAL_IRQ; i++) {
   135b4:	e51b3008 	ldr	r3, [fp, #-8]
   135b8:	e2833001 	add	r3, r3, #1
   135bc:	e50b3008 	str	r3, [fp, #-8]
   135c0:	e51b3008 	ldr	r3, [fp, #-8]
   135c4:	e3530047 	cmp	r3, #71	; 0x47
   135c8:	daffffed 	ble	13584 <InitInterruptController+0x18>
		g_VectorTable[i].pfnHandler 	= stubHandler;
		g_VectorTable[i].pParam			= (void *) 0;
	}
	return 0;
   135cc:	e3a03000 	mov	r3, #0
}
   135d0:	e1a00003 	mov	r0, r3
   135d4:	e24bd000 	sub	sp, fp, #0
   135d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   135dc:	e12fff1e 	bx	lr
   135e0:	000148a4 	andeq	r4, r1, r4, lsr #17
   135e4:	0001354c 	andeq	r3, r1, ip, asr #10

000135e8 <RegisterInterrupt>:



int RegisterInterrupt(int nIRQ, FN_INTERRUPT_HANDLER pfnHandler, void *pParam) {
   135e8:	e92d4800 	push	{fp, lr}
   135ec:	e28db004 	add	fp, sp, #4
   135f0:	e24dd010 	sub	sp, sp, #16
   135f4:	e50b0008 	str	r0, [fp, #-8]
   135f8:	e50b100c 	str	r1, [fp, #-12]
   135fc:	e50b2010 	str	r2, [fp, #-16]
	if(nIRQ<0 || nIRQ>71)
   13600:	e51b3008 	ldr	r3, [fp, #-8]
   13604:	e3530000 	cmp	r3, #0
   13608:	ba000002 	blt	13618 <RegisterInterrupt+0x30>
   1360c:	e51b3008 	ldr	r3, [fp, #-8]
   13610:	e3530047 	cmp	r3, #71	; 0x47
   13614:	da000001 	ble	13620 <RegisterInterrupt+0x38>
		return -1;
   13618:	e3e03000 	mvn	r3, #0
   1361c:	ea00000e 	b	1365c <RegisterInterrupt+0x74>

	irqDisable();
   13620:	ebffff90 	bl	13468 <irqDisable>
	{
		g_VectorTable[nIRQ].pfnHandler = pfnHandler;
   13624:	e59f303c 	ldr	r3, [pc, #60]	; 13668 <RegisterInterrupt+0x80>
   13628:	e51b2008 	ldr	r2, [fp, #-8]
   1362c:	e51b100c 	ldr	r1, [fp, #-12]
   13630:	e7831182 	str	r1, [r3, r2, lsl #3]
		g_VectorTable[nIRQ].pParam		= pParam;
   13634:	e59f102c 	ldr	r1, [pc, #44]	; 13668 <RegisterInterrupt+0x80>
   13638:	e51b2008 	ldr	r2, [fp, #-8]
   1363c:	e3a03004 	mov	r3, #4
   13640:	e1a02182 	lsl	r2, r2, #3
   13644:	e0812002 	add	r2, r1, r2
   13648:	e0823003 	add	r3, r2, r3
   1364c:	e51b2010 	ldr	r2, [fp, #-16]
   13650:	e5832000 	str	r2, [r3]
	}
	irqEnable();
   13654:	ebffff7b 	bl	13448 <irqEnable>
	return 0;
   13658:	e3a03000 	mov	r3, #0
}
   1365c:	e1a00003 	mov	r0, r3
   13660:	e24bd004 	sub	sp, fp, #4
   13664:	e8bd8800 	pop	{fp, pc}
   13668:	000148a4 	andeq	r4, r1, r4, lsr #17

0001366c <EnableInterrupt>:

int EnableInterrupt(int nIRQ) {
   1366c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13670:	e28db000 	add	fp, sp, #0
   13674:	e24dd014 	sub	sp, sp, #20
   13678:	e50b0010 	str	r0, [fp, #-16]
	/* Datasheet says "All other bits are unaffected", and I'm counting on that. */
	unsigned int mask=1<<(nIRQ%32);
   1367c:	e51b2010 	ldr	r2, [fp, #-16]
   13680:	e1a03fc2 	asr	r3, r2, #31
   13684:	e1a03da3 	lsr	r3, r3, #27
   13688:	e0822003 	add	r2, r2, r3
   1368c:	e202201f 	and	r2, r2, #31
   13690:	e0633002 	rsb	r3, r3, r2
   13694:	e3a02001 	mov	r2, #1
   13698:	e1a03312 	lsl	r3, r2, r3
   1369c:	e50b3008 	str	r3, [fp, #-8]

	if(nIRQ >=0 && nIRQ <=31) {
   136a0:	e51b3010 	ldr	r3, [fp, #-16]
   136a4:	e3530000 	cmp	r3, #0
   136a8:	ba000006 	blt	136c8 <EnableInterrupt+0x5c>
   136ac:	e51b3010 	ldr	r3, [fp, #-16]
   136b0:	e353001f 	cmp	r3, #31
   136b4:	ca000003 	bgt	136c8 <EnableInterrupt+0x5c>
		pRegs->Enable1 = mask;
   136b8:	e59f3074 	ldr	r3, [pc, #116]	; 13734 <EnableInterrupt+0xc8>
   136bc:	e51b2008 	ldr	r2, [fp, #-8]
   136c0:	e5832010 	str	r2, [r3, #16]
   136c4:	ea000015 	b	13720 <EnableInterrupt+0xb4>
	} else
	if(nIRQ >=32 && nIRQ <=63){
   136c8:	e51b3010 	ldr	r3, [fp, #-16]
   136cc:	e353001f 	cmp	r3, #31
   136d0:	da000006 	ble	136f0 <EnableInterrupt+0x84>
   136d4:	e51b3010 	ldr	r3, [fp, #-16]
   136d8:	e353003f 	cmp	r3, #63	; 0x3f
   136dc:	ca000003 	bgt	136f0 <EnableInterrupt+0x84>
		pRegs->Enable2 = mask;
   136e0:	e59f304c 	ldr	r3, [pc, #76]	; 13734 <EnableInterrupt+0xc8>
   136e4:	e51b2008 	ldr	r2, [fp, #-8]
   136e8:	e5832014 	str	r2, [r3, #20]
   136ec:	ea00000b 	b	13720 <EnableInterrupt+0xb4>
	} else
	if(nIRQ >= 64 && nIRQ <= 71) {	// Basic IRQ enables
   136f0:	e51b3010 	ldr	r3, [fp, #-16]
   136f4:	e353003f 	cmp	r3, #63	; 0x3f
   136f8:	da000006 	ble	13718 <EnableInterrupt+0xac>
   136fc:	e51b3010 	ldr	r3, [fp, #-16]
   13700:	e3530047 	cmp	r3, #71	; 0x47
   13704:	ca000003 	bgt	13718 <EnableInterrupt+0xac>
		pRegs->EnableBasic = mask;
   13708:	e59f3024 	ldr	r3, [pc, #36]	; 13734 <EnableInterrupt+0xc8>
   1370c:	e51b2008 	ldr	r2, [fp, #-8]
   13710:	e5832018 	str	r2, [r3, #24]
   13714:	ea000001 	b	13720 <EnableInterrupt+0xb4>
	} else
		return -1;
   13718:	e3e03000 	mvn	r3, #0
   1371c:	ea000000 	b	13724 <EnableInterrupt+0xb8>

	return 0;
   13720:	e3a03000 	mov	r3, #0
}
   13724:	e1a00003 	mov	r0, r3
   13728:	e24bd000 	sub	sp, fp, #0
   1372c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13730:	e12fff1e 	bx	lr
   13734:	2000b200 	andcs	fp, r0, r0, lsl #4

00013738 <DisableInterrupt>:

int DisableInterrupt(int nIRQ) {
   13738:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1373c:	e28db000 	add	fp, sp, #0
   13740:	e24dd014 	sub	sp, sp, #20
   13744:	e50b0010 	str	r0, [fp, #-16]
	/* Datasheet says "All other bits are unaffected", and I'm counting on that. */
	unsigned int mask=1<<(nIRQ%32);
   13748:	e51b2010 	ldr	r2, [fp, #-16]
   1374c:	e1a03fc2 	asr	r3, r2, #31
   13750:	e1a03da3 	lsr	r3, r3, #27
   13754:	e0822003 	add	r2, r2, r3
   13758:	e202201f 	and	r2, r2, #31
   1375c:	e0633002 	rsb	r3, r3, r2
   13760:	e3a02001 	mov	r2, #1
   13764:	e1a03312 	lsl	r3, r2, r3
   13768:	e50b3008 	str	r3, [fp, #-8]

	if(nIRQ >=0 && nIRQ <=31) {
   1376c:	e51b3010 	ldr	r3, [fp, #-16]
   13770:	e3530000 	cmp	r3, #0
   13774:	ba000006 	blt	13794 <DisableInterrupt+0x5c>
   13778:	e51b3010 	ldr	r3, [fp, #-16]
   1377c:	e353001f 	cmp	r3, #31
   13780:	ca000003 	bgt	13794 <DisableInterrupt+0x5c>
		pRegs->Disable1 = mask;
   13784:	e59f3074 	ldr	r3, [pc, #116]	; 13800 <DisableInterrupt+0xc8>
   13788:	e51b2008 	ldr	r2, [fp, #-8]
   1378c:	e583201c 	str	r2, [r3, #28]
   13790:	ea000015 	b	137ec <DisableInterrupt+0xb4>
	} else
	if(nIRQ >=32 && nIRQ <=63){
   13794:	e51b3010 	ldr	r3, [fp, #-16]
   13798:	e353001f 	cmp	r3, #31
   1379c:	da000006 	ble	137bc <DisableInterrupt+0x84>
   137a0:	e51b3010 	ldr	r3, [fp, #-16]
   137a4:	e353003f 	cmp	r3, #63	; 0x3f
   137a8:	ca000003 	bgt	137bc <DisableInterrupt+0x84>
		pRegs->Disable2 = mask;
   137ac:	e59f304c 	ldr	r3, [pc, #76]	; 13800 <DisableInterrupt+0xc8>
   137b0:	e51b2008 	ldr	r2, [fp, #-8]
   137b4:	e5832020 	str	r2, [r3, #32]
   137b8:	ea00000b 	b	137ec <DisableInterrupt+0xb4>
	} else
	if(nIRQ >= 64 && nIRQ <= 71) {
   137bc:	e51b3010 	ldr	r3, [fp, #-16]
   137c0:	e353003f 	cmp	r3, #63	; 0x3f
   137c4:	da000006 	ble	137e4 <DisableInterrupt+0xac>
   137c8:	e51b3010 	ldr	r3, [fp, #-16]
   137cc:	e3530047 	cmp	r3, #71	; 0x47
   137d0:	ca000003 	bgt	137e4 <DisableInterrupt+0xac>
		pRegs->DisableBasic = mask;
   137d4:	e59f3024 	ldr	r3, [pc, #36]	; 13800 <DisableInterrupt+0xc8>
   137d8:	e51b2008 	ldr	r2, [fp, #-8]
   137dc:	e5832024 	str	r2, [r3, #36]	; 0x24
   137e0:	ea000001 	b	137ec <DisableInterrupt+0xb4>
	} else
		return -1;
   137e4:	e3e03000 	mvn	r3, #0
   137e8:	ea000000 	b	137f0 <DisableInterrupt+0xb8>

	return 0;
   137ec:	e3a03000 	mov	r3, #0
}
   137f0:	e1a00003 	mov	r0, r3
   137f4:	e24bd000 	sub	sp, fp, #0
   137f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   137fc:	e12fff1e 	bx	lr
   13800:	2000b200 	andcs	fp, r0, r0, lsl #4

00013804 <EnableInterrupts>:

int EnableInterrupts() {
   13804:	e92d4800 	push	{fp, lr}
   13808:	e28db004 	add	fp, sp, #4
	irqEnable();
   1380c:	ebffff0d 	bl	13448 <irqEnable>
	return 0;
   13810:	e3a03000 	mov	r3, #0
}
   13814:	e1a00003 	mov	r0, r3
   13818:	e8bd8800 	pop	{fp, pc}

0001381c <DisableInterrupts>:

int DisableInterrupts() {
   1381c:	e92d4800 	push	{fp, lr}
   13820:	e28db004 	add	fp, sp, #4
	irqDisable();
   13824:	ebffff0f 	bl	13468 <irqDisable>
	return 0;
   13828:	e3a03000 	mov	r3, #0
}
   1382c:	e1a00003 	mov	r0, r3
   13830:	e8bd8800 	pop	{fp, pc}

00013834 <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   13834:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13838:	e28db000 	add	fp, sp, #0
   1383c:	e24dd01c 	sub	sp, sp, #28
   13840:	e50b0018 	str	r0, [fp, #-24]
   13844:	e50b101c 	str	r1, [fp, #-28]

	int offset = pinNum / 10;
   13848:	e51b2018 	ldr	r2, [fp, #-24]
   1384c:	e59f30ac 	ldr	r3, [pc, #172]	; 13900 <SetGpioFunction+0xcc>
   13850:	e0831293 	umull	r1, r3, r3, r2
   13854:	e1a031a3 	lsr	r3, r3, #3
   13858:	e50b3008 	str	r3, [fp, #-8]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   1385c:	e59f30a0 	ldr	r3, [pc, #160]	; 13904 <SetGpioFunction+0xd0>
   13860:	e51b2008 	ldr	r2, [fp, #-8]
   13864:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   13868:	e50b300c 	str	r3, [fp, #-12]

	int item = pinNum % 10;
   1386c:	e51b1018 	ldr	r1, [fp, #-24]
   13870:	e59f3088 	ldr	r3, [pc, #136]	; 13900 <SetGpioFunction+0xcc>
   13874:	e0832193 	umull	r2, r3, r3, r1
   13878:	e1a021a3 	lsr	r2, r3, #3
   1387c:	e1a03002 	mov	r3, r2
   13880:	e1a03103 	lsl	r3, r3, #2
   13884:	e0833002 	add	r3, r3, r2
   13888:	e1a03083 	lsl	r3, r3, #1
   1388c:	e0632001 	rsb	r2, r3, r1
   13890:	e50b2010 	str	r2, [fp, #-16]
	val &= ~(0x7 << (item * 3));
   13894:	e51b2010 	ldr	r2, [fp, #-16]
   13898:	e1a03002 	mov	r3, r2
   1389c:	e1a03083 	lsl	r3, r3, #1
   138a0:	e0833002 	add	r3, r3, r2
   138a4:	e3a02007 	mov	r2, #7
   138a8:	e1a03312 	lsl	r3, r2, r3
   138ac:	e1e03003 	mvn	r3, r3
   138b0:	e51b200c 	ldr	r2, [fp, #-12]
   138b4:	e0023003 	and	r3, r2, r3
   138b8:	e50b300c 	str	r3, [fp, #-12]
	val |= ((funcNum & 0x7) << (item * 3));
   138bc:	e51b301c 	ldr	r3, [fp, #-28]
   138c0:	e2031007 	and	r1, r3, #7
   138c4:	e51b2010 	ldr	r2, [fp, #-16]
   138c8:	e1a03002 	mov	r3, r2
   138cc:	e1a03083 	lsl	r3, r3, #1
   138d0:	e0833002 	add	r3, r3, r2
   138d4:	e1a03311 	lsl	r3, r1, r3
   138d8:	e51b200c 	ldr	r2, [fp, #-12]
   138dc:	e1823003 	orr	r3, r2, r3
   138e0:	e50b300c 	str	r3, [fp, #-12]
	pRegs->GPFSEL[offset] = val;
   138e4:	e59f3018 	ldr	r3, [pc, #24]	; 13904 <SetGpioFunction+0xd0>
   138e8:	e51b2008 	ldr	r2, [fp, #-8]
   138ec:	e51b100c 	ldr	r1, [fp, #-12]
   138f0:	e7831102 	str	r1, [r3, r2, lsl #2]
}
   138f4:	e24bd000 	sub	sp, fp, #0
   138f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   138fc:	e12fff1e 	bx	lr
   13900:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
   13904:	20200000 	eorcs	r0, r0, r0

00013908 <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   13908:	e92d4800 	push	{fp, lr}
   1390c:	e28db004 	add	fp, sp, #4
   13910:	e24dd008 	sub	sp, sp, #8
   13914:	e50b0008 	str	r0, [fp, #-8]
   13918:	e1a03001 	mov	r3, r1
   1391c:	e54b3009 	strb	r3, [fp, #-9]
	SetGpioFunction(pinNum,dir);
   13920:	e55b3009 	ldrb	r3, [fp, #-9]
   13924:	e51b0008 	ldr	r0, [fp, #-8]
   13928:	e1a01003 	mov	r1, r3
   1392c:	ebffffc0 	bl	13834 <SetGpioFunction>
}
   13930:	e24bd004 	sub	sp, fp, #4
   13934:	e8bd8800 	pop	{fp, pc}

00013938 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   13938:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1393c:	e28db000 	add	fp, sp, #0
   13940:	e24dd014 	sub	sp, sp, #20
   13944:	e50b0010 	str	r0, [fp, #-16]
   13948:	e50b1014 	str	r1, [fp, #-20]
	unsigned long offset=pinNum/32;
   1394c:	e51b3010 	ldr	r3, [fp, #-16]
   13950:	e1a032a3 	lsr	r3, r3, #5
   13954:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask=(1<<(pinNum%32));
   13958:	e51b3010 	ldr	r3, [fp, #-16]
   1395c:	e203301f 	and	r3, r3, #31
   13960:	e3a02001 	mov	r2, #1
   13964:	e1a03312 	lsl	r3, r2, r3
   13968:	e50b300c 	str	r3, [fp, #-12]

	if(pinVal) {
   1396c:	e51b3014 	ldr	r3, [fp, #-20]
   13970:	e3530000 	cmp	r3, #0
   13974:	0a000012 	beq	139c4 <SetGpio+0x8c>
		pRegs->GPSET[offset]|=mask;
   13978:	e59f0078 	ldr	r0, [pc, #120]	; 139f8 <SetGpio+0xc0>
   1397c:	e59f1074 	ldr	r1, [pc, #116]	; 139f8 <SetGpio+0xc0>
   13980:	e51b3008 	ldr	r3, [fp, #-8]
   13984:	e2832006 	add	r2, r3, #6
   13988:	e3a03004 	mov	r3, #4
   1398c:	e1a02102 	lsl	r2, r2, #2
   13990:	e0812002 	add	r2, r1, r2
   13994:	e0823003 	add	r3, r2, r3
   13998:	e5932000 	ldr	r2, [r3]
   1399c:	e51b300c 	ldr	r3, [fp, #-12]
   139a0:	e1822003 	orr	r2, r2, r3
   139a4:	e51b3008 	ldr	r3, [fp, #-8]
   139a8:	e2831006 	add	r1, r3, #6
   139ac:	e3a03004 	mov	r3, #4
   139b0:	e1a01101 	lsl	r1, r1, #2
   139b4:	e0801001 	add	r1, r0, r1
   139b8:	e0813003 	add	r3, r1, r3
   139bc:	e5832000 	str	r2, [r3]
   139c0:	ea000009 	b	139ec <SetGpio+0xb4>
	} else {
		pRegs->GPCLR[offset]|=mask;
   139c4:	e59f302c 	ldr	r3, [pc, #44]	; 139f8 <SetGpio+0xc0>
   139c8:	e59f2028 	ldr	r2, [pc, #40]	; 139f8 <SetGpio+0xc0>
   139cc:	e51b1008 	ldr	r1, [fp, #-8]
   139d0:	e281100a 	add	r1, r1, #10
   139d4:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   139d8:	e51b200c 	ldr	r2, [fp, #-12]
   139dc:	e1811002 	orr	r1, r1, r2
   139e0:	e51b2008 	ldr	r2, [fp, #-8]
   139e4:	e282200a 	add	r2, r2, #10
   139e8:	e7831102 	str	r1, [r3, r2, lsl #2]
	}
}
   139ec:	e24bd000 	sub	sp, fp, #0
   139f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   139f4:	e12fff1e 	bx	lr
   139f8:	20200000 	eorcs	r0, r0, r0

000139fc <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   139fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a00:	e28db000 	add	fp, sp, #0
   13a04:	e24dd00c 	sub	sp, sp, #12
   13a08:	e50b0008 	str	r0, [fp, #-8]
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   13a0c:	e59f103c 	ldr	r1, [pc, #60]	; 13a50 <ReadGpio+0x54>
   13a10:	e51b3008 	ldr	r3, [fp, #-8]
   13a14:	e1a032a3 	lsr	r3, r3, #5
   13a18:	e283200c 	add	r2, r3, #12
   13a1c:	e3a03004 	mov	r3, #4
   13a20:	e1a02102 	lsl	r2, r2, #2
   13a24:	e0812002 	add	r2, r1, r2
   13a28:	e0823003 	add	r3, r2, r3
   13a2c:	e5932000 	ldr	r2, [r3]
   13a30:	e51b3008 	ldr	r3, [fp, #-8]
   13a34:	e203301f 	and	r3, r3, #31
   13a38:	e1a03332 	lsr	r3, r2, r3
   13a3c:	e2033001 	and	r3, r3, #1
}
   13a40:	e1a00003 	mov	r0, r3
   13a44:	e24bd000 	sub	sp, fp, #0
   13a48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a4c:	e12fff1e 	bx	lr
   13a50:	20200000 	eorcs	r0, r0, r0

00013a54 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13a54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a58:	e28db000 	add	fp, sp, #0
   13a5c:	e24dd014 	sub	sp, sp, #20
   13a60:	e50b0010 	str	r0, [fp, #-16]
   13a64:	e1a03001 	mov	r3, r1
   13a68:	e54b3011 	strb	r3, [fp, #-17]
	unsigned long mask=(1<<pinNum);
   13a6c:	e51b3010 	ldr	r3, [fp, #-16]
   13a70:	e3a02001 	mov	r2, #1
   13a74:	e1a03312 	lsl	r3, r2, r3
   13a78:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13a7c:	e51b3010 	ldr	r3, [fp, #-16]
   13a80:	e1a032a3 	lsr	r3, r3, #5
   13a84:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13a88:	e55b3011 	ldrb	r3, [fp, #-17]
   13a8c:	e3530006 	cmp	r3, #6
   13a90:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13a94:	ea000060 	b	13c1c <EnableGpioDetect+0x1c8>
   13a98:	00013c1c 	andeq	r3, r1, ip, lsl ip
   13a9c:	00013ab4 			; <UNDEFINED> instruction: 0x00013ab4
   13aa0:	00013b00 	andeq	r3, r1, r0, lsl #22
   13aa4:	00013b2c 	andeq	r3, r1, ip, lsr #22
   13aa8:	00013b78 	andeq	r3, r1, r8, ror fp
   13aac:	00013ba4 	andeq	r3, r1, r4, lsr #23
   13ab0:	00013bf0 	strdeq	r3, [r1], -r0
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   13ab4:	e59f016c 	ldr	r0, [pc, #364]	; 13c28 <EnableGpioDetect+0x1d4>
   13ab8:	e59f1168 	ldr	r1, [pc, #360]	; 13c28 <EnableGpioDetect+0x1d4>
   13abc:	e51b300c 	ldr	r3, [fp, #-12]
   13ac0:	e2832012 	add	r2, r3, #18
   13ac4:	e3a03004 	mov	r3, #4
   13ac8:	e1a02102 	lsl	r2, r2, #2
   13acc:	e0812002 	add	r2, r1, r2
   13ad0:	e0823003 	add	r3, r2, r3
   13ad4:	e5932000 	ldr	r2, [r3]
   13ad8:	e51b3008 	ldr	r3, [fp, #-8]
   13adc:	e1822003 	orr	r2, r2, r3
   13ae0:	e51b300c 	ldr	r3, [fp, #-12]
   13ae4:	e2831012 	add	r1, r3, #18
   13ae8:	e3a03004 	mov	r3, #4
   13aec:	e1a01101 	lsl	r1, r1, #2
   13af0:	e0801001 	add	r1, r0, r1
   13af4:	e0813003 	add	r3, r1, r3
   13af8:	e5832000 	str	r2, [r3]
		break;
   13afc:	ea000046 	b	13c1c <EnableGpioDetect+0x1c8>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   13b00:	e59f3120 	ldr	r3, [pc, #288]	; 13c28 <EnableGpioDetect+0x1d4>
   13b04:	e59f211c 	ldr	r2, [pc, #284]	; 13c28 <EnableGpioDetect+0x1d4>
   13b08:	e51b100c 	ldr	r1, [fp, #-12]
   13b0c:	e2811016 	add	r1, r1, #22
   13b10:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   13b14:	e51b2008 	ldr	r2, [fp, #-8]
   13b18:	e1811002 	orr	r1, r1, r2
   13b1c:	e51b200c 	ldr	r2, [fp, #-12]
   13b20:	e2822016 	add	r2, r2, #22
   13b24:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   13b28:	ea00003b 	b	13c1c <EnableGpioDetect+0x1c8>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   13b2c:	e59f00f4 	ldr	r0, [pc, #244]	; 13c28 <EnableGpioDetect+0x1d4>
   13b30:	e59f10f0 	ldr	r1, [pc, #240]	; 13c28 <EnableGpioDetect+0x1d4>
   13b34:	e51b300c 	ldr	r3, [fp, #-12]
   13b38:	e2832018 	add	r2, r3, #24
   13b3c:	e3a03004 	mov	r3, #4
   13b40:	e1a02102 	lsl	r2, r2, #2
   13b44:	e0812002 	add	r2, r1, r2
   13b48:	e0823003 	add	r3, r2, r3
   13b4c:	e5932000 	ldr	r2, [r3]
   13b50:	e51b3008 	ldr	r3, [fp, #-8]
   13b54:	e1822003 	orr	r2, r2, r3
   13b58:	e51b300c 	ldr	r3, [fp, #-12]
   13b5c:	e2831018 	add	r1, r3, #24
   13b60:	e3a03004 	mov	r3, #4
   13b64:	e1a01101 	lsl	r1, r1, #2
   13b68:	e0801001 	add	r1, r0, r1
   13b6c:	e0813003 	add	r3, r1, r3
   13b70:	e5832000 	str	r2, [r3]
		break;
   13b74:	ea000028 	b	13c1c <EnableGpioDetect+0x1c8>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   13b78:	e59f30a8 	ldr	r3, [pc, #168]	; 13c28 <EnableGpioDetect+0x1d4>
   13b7c:	e59f20a4 	ldr	r2, [pc, #164]	; 13c28 <EnableGpioDetect+0x1d4>
   13b80:	e51b100c 	ldr	r1, [fp, #-12]
   13b84:	e281101c 	add	r1, r1, #28
   13b88:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   13b8c:	e51b2008 	ldr	r2, [fp, #-8]
   13b90:	e1811002 	orr	r1, r1, r2
   13b94:	e51b200c 	ldr	r2, [fp, #-12]
   13b98:	e282201c 	add	r2, r2, #28
   13b9c:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   13ba0:	ea00001d 	b	13c1c <EnableGpioDetect+0x1c8>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   13ba4:	e59f007c 	ldr	r0, [pc, #124]	; 13c28 <EnableGpioDetect+0x1d4>
   13ba8:	e59f1078 	ldr	r1, [pc, #120]	; 13c28 <EnableGpioDetect+0x1d4>
   13bac:	e51b300c 	ldr	r3, [fp, #-12]
   13bb0:	e283201e 	add	r2, r3, #30
   13bb4:	e3a03004 	mov	r3, #4
   13bb8:	e1a02102 	lsl	r2, r2, #2
   13bbc:	e0812002 	add	r2, r1, r2
   13bc0:	e0823003 	add	r3, r2, r3
   13bc4:	e5932000 	ldr	r2, [r3]
   13bc8:	e51b3008 	ldr	r3, [fp, #-8]
   13bcc:	e1822003 	orr	r2, r2, r3
   13bd0:	e51b300c 	ldr	r3, [fp, #-12]
   13bd4:	e283101e 	add	r1, r3, #30
   13bd8:	e3a03004 	mov	r3, #4
   13bdc:	e1a01101 	lsl	r1, r1, #2
   13be0:	e0801001 	add	r1, r0, r1
   13be4:	e0813003 	add	r3, r1, r3
   13be8:	e5832000 	str	r2, [r3]
		break;
   13bec:	ea00000a 	b	13c1c <EnableGpioDetect+0x1c8>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   13bf0:	e59f3030 	ldr	r3, [pc, #48]	; 13c28 <EnableGpioDetect+0x1d4>
   13bf4:	e59f202c 	ldr	r2, [pc, #44]	; 13c28 <EnableGpioDetect+0x1d4>
   13bf8:	e51b100c 	ldr	r1, [fp, #-12]
   13bfc:	e2811022 	add	r1, r1, #34	; 0x22
   13c00:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   13c04:	e51b2008 	ldr	r2, [fp, #-8]
   13c08:	e1811002 	orr	r1, r1, r2
   13c0c:	e51b200c 	ldr	r2, [fp, #-12]
   13c10:	e2822022 	add	r2, r2, #34	; 0x22
   13c14:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   13c18:	e1a00000 	nop			; (mov r0, r0)
	case DETECT_NONE:
		break;
	}
}
   13c1c:	e24bd000 	sub	sp, fp, #0
   13c20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13c24:	e12fff1e 	bx	lr
   13c28:	20200000 	eorcs	r0, r0, r0

00013c2c <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13c2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13c30:	e28db000 	add	fp, sp, #0
   13c34:	e24dd014 	sub	sp, sp, #20
   13c38:	e50b0010 	str	r0, [fp, #-16]
   13c3c:	e1a03001 	mov	r3, r1
   13c40:	e54b3011 	strb	r3, [fp, #-17]
	unsigned long mask=~(1<<(pinNum%32));
   13c44:	e51b3010 	ldr	r3, [fp, #-16]
   13c48:	e203301f 	and	r3, r3, #31
   13c4c:	e3a02001 	mov	r2, #1
   13c50:	e1a03312 	lsl	r3, r2, r3
   13c54:	e1e03003 	mvn	r3, r3
   13c58:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13c5c:	e51b3010 	ldr	r3, [fp, #-16]
   13c60:	e1a032a3 	lsr	r3, r3, #5
   13c64:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13c68:	e55b3011 	ldrb	r3, [fp, #-17]
   13c6c:	e3530006 	cmp	r3, #6
   13c70:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13c74:	ea000060 	b	13dfc <DisableGpioDetect+0x1d0>
   13c78:	00013dfc 	strdeq	r3, [r1], -ip
   13c7c:	00013c94 	muleq	r1, r4, ip
   13c80:	00013ce0 	andeq	r3, r1, r0, ror #25
   13c84:	00013d0c 	andeq	r3, r1, ip, lsl #26
   13c88:	00013d58 	andeq	r3, r1, r8, asr sp
   13c8c:	00013d84 	andeq	r3, r1, r4, lsl #27
   13c90:	00013dd0 	ldrdeq	r3, [r1], -r0
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   13c94:	e59f016c 	ldr	r0, [pc, #364]	; 13e08 <DisableGpioDetect+0x1dc>
   13c98:	e59f1168 	ldr	r1, [pc, #360]	; 13e08 <DisableGpioDetect+0x1dc>
   13c9c:	e51b300c 	ldr	r3, [fp, #-12]
   13ca0:	e2832012 	add	r2, r3, #18
   13ca4:	e3a03004 	mov	r3, #4
   13ca8:	e1a02102 	lsl	r2, r2, #2
   13cac:	e0812002 	add	r2, r1, r2
   13cb0:	e0823003 	add	r3, r2, r3
   13cb4:	e5932000 	ldr	r2, [r3]
   13cb8:	e51b3008 	ldr	r3, [fp, #-8]
   13cbc:	e0022003 	and	r2, r2, r3
   13cc0:	e51b300c 	ldr	r3, [fp, #-12]
   13cc4:	e2831012 	add	r1, r3, #18
   13cc8:	e3a03004 	mov	r3, #4
   13ccc:	e1a01101 	lsl	r1, r1, #2
   13cd0:	e0801001 	add	r1, r0, r1
   13cd4:	e0813003 	add	r3, r1, r3
   13cd8:	e5832000 	str	r2, [r3]
		break;
   13cdc:	ea000046 	b	13dfc <DisableGpioDetect+0x1d0>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   13ce0:	e59f3120 	ldr	r3, [pc, #288]	; 13e08 <DisableGpioDetect+0x1dc>
   13ce4:	e59f211c 	ldr	r2, [pc, #284]	; 13e08 <DisableGpioDetect+0x1dc>
   13ce8:	e51b100c 	ldr	r1, [fp, #-12]
   13cec:	e2811016 	add	r1, r1, #22
   13cf0:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   13cf4:	e51b2008 	ldr	r2, [fp, #-8]
   13cf8:	e0011002 	and	r1, r1, r2
   13cfc:	e51b200c 	ldr	r2, [fp, #-12]
   13d00:	e2822016 	add	r2, r2, #22
   13d04:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   13d08:	ea00003b 	b	13dfc <DisableGpioDetect+0x1d0>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   13d0c:	e59f00f4 	ldr	r0, [pc, #244]	; 13e08 <DisableGpioDetect+0x1dc>
   13d10:	e59f10f0 	ldr	r1, [pc, #240]	; 13e08 <DisableGpioDetect+0x1dc>
   13d14:	e51b300c 	ldr	r3, [fp, #-12]
   13d18:	e2832018 	add	r2, r3, #24
   13d1c:	e3a03004 	mov	r3, #4
   13d20:	e1a02102 	lsl	r2, r2, #2
   13d24:	e0812002 	add	r2, r1, r2
   13d28:	e0823003 	add	r3, r2, r3
   13d2c:	e5932000 	ldr	r2, [r3]
   13d30:	e51b3008 	ldr	r3, [fp, #-8]
   13d34:	e0022003 	and	r2, r2, r3
   13d38:	e51b300c 	ldr	r3, [fp, #-12]
   13d3c:	e2831018 	add	r1, r3, #24
   13d40:	e3a03004 	mov	r3, #4
   13d44:	e1a01101 	lsl	r1, r1, #2
   13d48:	e0801001 	add	r1, r0, r1
   13d4c:	e0813003 	add	r3, r1, r3
   13d50:	e5832000 	str	r2, [r3]
		break;
   13d54:	ea000028 	b	13dfc <DisableGpioDetect+0x1d0>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   13d58:	e59f30a8 	ldr	r3, [pc, #168]	; 13e08 <DisableGpioDetect+0x1dc>
   13d5c:	e59f20a4 	ldr	r2, [pc, #164]	; 13e08 <DisableGpioDetect+0x1dc>
   13d60:	e51b100c 	ldr	r1, [fp, #-12]
   13d64:	e281101c 	add	r1, r1, #28
   13d68:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   13d6c:	e51b2008 	ldr	r2, [fp, #-8]
   13d70:	e0011002 	and	r1, r1, r2
   13d74:	e51b200c 	ldr	r2, [fp, #-12]
   13d78:	e282201c 	add	r2, r2, #28
   13d7c:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   13d80:	ea00001d 	b	13dfc <DisableGpioDetect+0x1d0>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   13d84:	e59f007c 	ldr	r0, [pc, #124]	; 13e08 <DisableGpioDetect+0x1dc>
   13d88:	e59f1078 	ldr	r1, [pc, #120]	; 13e08 <DisableGpioDetect+0x1dc>
   13d8c:	e51b300c 	ldr	r3, [fp, #-12]
   13d90:	e283201e 	add	r2, r3, #30
   13d94:	e3a03004 	mov	r3, #4
   13d98:	e1a02102 	lsl	r2, r2, #2
   13d9c:	e0812002 	add	r2, r1, r2
   13da0:	e0823003 	add	r3, r2, r3
   13da4:	e5932000 	ldr	r2, [r3]
   13da8:	e51b3008 	ldr	r3, [fp, #-8]
   13dac:	e0022003 	and	r2, r2, r3
   13db0:	e51b300c 	ldr	r3, [fp, #-12]
   13db4:	e283101e 	add	r1, r3, #30
   13db8:	e3a03004 	mov	r3, #4
   13dbc:	e1a01101 	lsl	r1, r1, #2
   13dc0:	e0801001 	add	r1, r0, r1
   13dc4:	e0813003 	add	r3, r1, r3
   13dc8:	e5832000 	str	r2, [r3]
		break;
   13dcc:	ea00000a 	b	13dfc <DisableGpioDetect+0x1d0>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   13dd0:	e59f3030 	ldr	r3, [pc, #48]	; 13e08 <DisableGpioDetect+0x1dc>
   13dd4:	e59f202c 	ldr	r2, [pc, #44]	; 13e08 <DisableGpioDetect+0x1dc>
   13dd8:	e51b100c 	ldr	r1, [fp, #-12]
   13ddc:	e2811022 	add	r1, r1, #34	; 0x22
   13de0:	e7921101 	ldr	r1, [r2, r1, lsl #2]
   13de4:	e51b2008 	ldr	r2, [fp, #-8]
   13de8:	e0011002 	and	r1, r1, r2
   13dec:	e51b200c 	ldr	r2, [fp, #-12]
   13df0:	e2822022 	add	r2, r2, #34	; 0x22
   13df4:	e7831102 	str	r1, [r3, r2, lsl #2]
		break;
   13df8:	e1a00000 	nop			; (mov r0, r0)
	case DETECT_NONE:
		break;
	}
}
   13dfc:	e24bd000 	sub	sp, fp, #0
   13e00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13e04:	e12fff1e 	bx	lr
   13e08:	20200000 	eorcs	r0, r0, r0

00013e0c <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   13e0c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13e10:	e28db000 	add	fp, sp, #0
   13e14:	e24dd014 	sub	sp, sp, #20
   13e18:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   13e1c:	e51b3010 	ldr	r3, [fp, #-16]
   13e20:	e203301f 	and	r3, r3, #31
   13e24:	e3a02001 	mov	r2, #1
   13e28:	e1a03312 	lsl	r3, r2, r3
   13e2c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13e30:	e51b3010 	ldr	r3, [fp, #-16]
   13e34:	e1a032a3 	lsr	r3, r3, #5
   13e38:	e50b300c 	str	r3, [fp, #-12]

	pRegs->GPEDS[offset]=mask;
   13e3c:	e59f3018 	ldr	r3, [pc, #24]	; 13e5c <ClearGpioInterrupt+0x50>
   13e40:	e51b200c 	ldr	r2, [fp, #-12]
   13e44:	e2822010 	add	r2, r2, #16
   13e48:	e51b1008 	ldr	r1, [fp, #-8]
   13e4c:	e7831102 	str	r1, [r3, r2, lsl #2]
}
   13e50:	e24bd000 	sub	sp, fp, #0
   13e54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13e58:	e12fff1e 	bx	lr
   13e5c:	20200000 	eorcs	r0, r0, r0

00013e60 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   13e60:	e92d4800 	push	{fp, lr}
   13e64:	e28db004 	add	fp, sp, #4
   13e68:	e24dd018 	sub	sp, sp, #24
   13e6c:	e50b0018 	str	r0, [fp, #-24]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   13e70:	e3a03000 	mov	r3, #0
   13e74:	e50b3010 	str	r3, [fp, #-16]

	vTaskSuspendAll();
   13e78:	ebfffa04 	bl	12690 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   13e7c:	e59f3190 	ldr	r3, [pc, #400]	; 14014 <pvPortMalloc+0x1b4>
   13e80:	e5933000 	ldr	r3, [r3]
   13e84:	e3530000 	cmp	r3, #0
   13e88:	1a000000 	bne	13e90 <pvPortMalloc+0x30>
		{
			prvHeapInit();
   13e8c:	eb000090 	bl	140d4 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   13e90:	e51b3018 	ldr	r3, [fp, #-24]
   13e94:	e3530000 	cmp	r3, #0
   13e98:	0a00000b 	beq	13ecc <pvPortMalloc+0x6c>
		{
			xWantedSize += heapSTRUCT_SIZE;
   13e9c:	e3a03010 	mov	r3, #16
   13ea0:	e51b2018 	ldr	r2, [fp, #-24]
   13ea4:	e0823003 	add	r3, r2, r3
   13ea8:	e50b3018 	str	r3, [fp, #-24]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   13eac:	e51b3018 	ldr	r3, [fp, #-24]
   13eb0:	e2033007 	and	r3, r3, #7
   13eb4:	e3530000 	cmp	r3, #0
   13eb8:	0a000003 	beq	13ecc <pvPortMalloc+0x6c>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   13ebc:	e51b3018 	ldr	r3, [fp, #-24]
   13ec0:	e3c33007 	bic	r3, r3, #7
   13ec4:	e2833008 	add	r3, r3, #8
   13ec8:	e50b3018 	str	r3, [fp, #-24]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   13ecc:	e51b3018 	ldr	r3, [fp, #-24]
   13ed0:	e3530000 	cmp	r3, #0
   13ed4:	0a000043 	beq	13fe8 <pvPortMalloc+0x188>
   13ed8:	e3a03a01 	mov	r3, #4096	; 0x1000
   13edc:	e51b2018 	ldr	r2, [fp, #-24]
   13ee0:	e1520003 	cmp	r2, r3
   13ee4:	2a00003f 	bcs	13fe8 <pvPortMalloc+0x188>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   13ee8:	e59f3128 	ldr	r3, [pc, #296]	; 14018 <pvPortMalloc+0x1b8>
   13eec:	e50b300c 	str	r3, [fp, #-12]
			pxBlock = xStart.pxNextFreeBlock;
   13ef0:	e59f3120 	ldr	r3, [pc, #288]	; 14018 <pvPortMalloc+0x1b8>
   13ef4:	e5933000 	ldr	r3, [r3]
   13ef8:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   13efc:	ea000004 	b	13f14 <pvPortMalloc+0xb4>
			{
				pxPreviousBlock = pxBlock;
   13f00:	e51b3008 	ldr	r3, [fp, #-8]
   13f04:	e50b300c 	str	r3, [fp, #-12]
				pxBlock = pxBlock->pxNextFreeBlock;
   13f08:	e51b3008 	ldr	r3, [fp, #-8]
   13f0c:	e5933000 	ldr	r3, [r3]
   13f10:	e50b3008 	str	r3, [fp, #-8]
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   13f14:	e51b3008 	ldr	r3, [fp, #-8]
   13f18:	e5932004 	ldr	r2, [r3, #4]
   13f1c:	e51b3018 	ldr	r3, [fp, #-24]
   13f20:	e1520003 	cmp	r2, r3
   13f24:	2a000003 	bcs	13f38 <pvPortMalloc+0xd8>
   13f28:	e51b3008 	ldr	r3, [fp, #-8]
   13f2c:	e5933000 	ldr	r3, [r3]
   13f30:	e3530000 	cmp	r3, #0
   13f34:	1afffff1 	bne	13f00 <pvPortMalloc+0xa0>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   13f38:	e59f30d4 	ldr	r3, [pc, #212]	; 14014 <pvPortMalloc+0x1b4>
   13f3c:	e5933000 	ldr	r3, [r3]
   13f40:	e51b2008 	ldr	r2, [fp, #-8]
   13f44:	e1520003 	cmp	r2, r3
   13f48:	0a000026 	beq	13fe8 <pvPortMalloc+0x188>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   13f4c:	e51b300c 	ldr	r3, [fp, #-12]
   13f50:	e5932000 	ldr	r2, [r3]
   13f54:	e3a03010 	mov	r3, #16
   13f58:	e0823003 	add	r3, r2, r3
   13f5c:	e50b3010 	str	r3, [fp, #-16]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   13f60:	e51b3008 	ldr	r3, [fp, #-8]
   13f64:	e5932000 	ldr	r2, [r3]
   13f68:	e51b300c 	ldr	r3, [fp, #-12]
   13f6c:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   13f70:	e51b3008 	ldr	r3, [fp, #-8]
   13f74:	e5932004 	ldr	r2, [r3, #4]
   13f78:	e51b3018 	ldr	r3, [fp, #-24]
   13f7c:	e0632002 	rsb	r2, r3, r2
   13f80:	e3a03010 	mov	r3, #16
   13f84:	e1a03083 	lsl	r3, r3, #1
   13f88:	e1520003 	cmp	r2, r3
   13f8c:	9a00000e 	bls	13fcc <pvPortMalloc+0x16c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   13f90:	e51b2008 	ldr	r2, [fp, #-8]
   13f94:	e51b3018 	ldr	r3, [fp, #-24]
   13f98:	e0823003 	add	r3, r2, r3
   13f9c:	e50b3014 	str	r3, [fp, #-20]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   13fa0:	e51b3008 	ldr	r3, [fp, #-8]
   13fa4:	e5932004 	ldr	r2, [r3, #4]
   13fa8:	e51b3018 	ldr	r3, [fp, #-24]
   13fac:	e0632002 	rsb	r2, r3, r2
   13fb0:	e51b3014 	ldr	r3, [fp, #-20]
   13fb4:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   13fb8:	e51b3008 	ldr	r3, [fp, #-8]
   13fbc:	e51b2018 	ldr	r2, [fp, #-24]
   13fc0:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   13fc4:	e51b0014 	ldr	r0, [fp, #-20]
   13fc8:	eb000076 	bl	141a8 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   13fcc:	e59f3048 	ldr	r3, [pc, #72]	; 1401c <pvPortMalloc+0x1bc>
   13fd0:	e5932000 	ldr	r2, [r3]
   13fd4:	e51b3008 	ldr	r3, [fp, #-8]
   13fd8:	e5933004 	ldr	r3, [r3, #4]
   13fdc:	e0632002 	rsb	r2, r3, r2
   13fe0:	e59f3034 	ldr	r3, [pc, #52]	; 1401c <pvPortMalloc+0x1bc>
   13fe4:	e5832000 	str	r2, [r3]
			}
		}
	}
	xTaskResumeAll();
   13fe8:	ebfff9b3 	bl	126bc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   13fec:	e59f302c 	ldr	r3, [pc, #44]	; 14020 <pvPortMalloc+0x1c0>
   13ff0:	e5932000 	ldr	r2, [r3]
   13ff4:	e51b3018 	ldr	r3, [fp, #-24]
   13ff8:	e0822003 	add	r2, r2, r3
   13ffc:	e59f301c 	ldr	r3, [pc, #28]	; 14020 <pvPortMalloc+0x1c0>
   14000:	e5832000 	str	r2, [r3]

	return pvReturn;
   14004:	e51b3010 	ldr	r3, [fp, #-16]
}
   14008:	e1a00003 	mov	r0, r3
   1400c:	e24bd004 	sub	sp, fp, #4
   14010:	e8bd8800 	pop	{fp, pc}
   14014:	00015af0 	strdeq	r5, [r1], -r0
   14018:	00015ae8 	andeq	r5, r1, r8, ror #21
   1401c:	0001471c 	andeq	r4, r1, ip, lsl r7
   14020:	00015af4 	strdeq	r5, [r1], -r4

00014024 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   14024:	e92d4800 	push	{fp, lr}
   14028:	e28db004 	add	fp, sp, #4
   1402c:	e24dd010 	sub	sp, sp, #16
   14030:	e50b0010 	str	r0, [fp, #-16]
unsigned char *puc = ( unsigned char * ) pv;
   14034:	e51b3010 	ldr	r3, [fp, #-16]
   14038:	e50b3008 	str	r3, [fp, #-8]
xBlockLink *pxLink;

	if( pv != NULL )
   1403c:	e51b3010 	ldr	r3, [fp, #-16]
   14040:	e3530000 	cmp	r3, #0
   14044:	0a000011 	beq	14090 <vPortFree+0x6c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   14048:	e3a03010 	mov	r3, #16
   1404c:	e2633000 	rsb	r3, r3, #0
   14050:	e51b2008 	ldr	r2, [fp, #-8]
   14054:	e0823003 	add	r3, r2, r3
   14058:	e50b3008 	str	r3, [fp, #-8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   1405c:	e51b3008 	ldr	r3, [fp, #-8]
   14060:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
   14064:	ebfff989 	bl	12690 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   14068:	e51b300c 	ldr	r3, [fp, #-12]
   1406c:	e5932004 	ldr	r2, [r3, #4]
   14070:	e59f3020 	ldr	r3, [pc, #32]	; 14098 <vPortFree+0x74>
   14074:	e5933000 	ldr	r3, [r3]
   14078:	e0822003 	add	r2, r2, r3
   1407c:	e59f3014 	ldr	r3, [pc, #20]	; 14098 <vPortFree+0x74>
   14080:	e5832000 	str	r2, [r3]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   14084:	e51b000c 	ldr	r0, [fp, #-12]
   14088:	eb000046 	bl	141a8 <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   1408c:	ebfff98a 	bl	126bc <xTaskResumeAll>
	}
}
   14090:	e24bd004 	sub	sp, fp, #4
   14094:	e8bd8800 	pop	{fp, pc}
   14098:	0001471c 	andeq	r4, r1, ip, lsl r7

0001409c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1409c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140a0:	e28db000 	add	fp, sp, #0
	return xFreeBytesRemaining;
   140a4:	e59f3010 	ldr	r3, [pc, #16]	; 140bc <xPortGetFreeHeapSize+0x20>
   140a8:	e5933000 	ldr	r3, [r3]
}
   140ac:	e1a00003 	mov	r0, r3
   140b0:	e24bd000 	sub	sp, fp, #0
   140b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   140b8:	e12fff1e 	bx	lr
   140bc:	0001471c 	andeq	r4, r1, ip, lsl r7

000140c0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   140c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140c4:	e28db000 	add	fp, sp, #0
	/* This just exists to keep the linker quiet. */
}
   140c8:	e24bd000 	sub	sp, fp, #0
   140cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   140d0:	e12fff1e 	bx	lr

000140d4 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   140d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140d8:	e28db000 	add	fp, sp, #0
   140dc:	e24dd00c 	sub	sp, sp, #12
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   140e0:	e59f30b0 	ldr	r3, [pc, #176]	; 14198 <prvHeapInit+0xc4>
   140e4:	e59f20b0 	ldr	r2, [pc, #176]	; 1419c <prvHeapInit+0xc8>
   140e8:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   140ec:	e59f30a4 	ldr	r3, [pc, #164]	; 14198 <prvHeapInit+0xc4>
   140f0:	e3a02000 	mov	r2, #0
   140f4:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   140f8:	e3a02a01 	mov	r2, #4096	; 0x1000
   140fc:	e59f3098 	ldr	r3, [pc, #152]	; 1419c <prvHeapInit+0xc8>
   14100:	e0823003 	add	r3, r2, r3
   14104:	e50b3008 	str	r3, [fp, #-8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   14108:	e3a03010 	mov	r3, #16
   1410c:	e2633000 	rsb	r3, r3, #0
   14110:	e51b2008 	ldr	r2, [fp, #-8]
   14114:	e0823003 	add	r3, r2, r3
   14118:	e50b3008 	str	r3, [fp, #-8]
	pxEnd = ( void * ) pucHeapEnd;
   1411c:	e59f307c 	ldr	r3, [pc, #124]	; 141a0 <prvHeapInit+0xcc>
   14120:	e51b2008 	ldr	r2, [fp, #-8]
   14124:	e5832000 	str	r2, [r3]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   14128:	e59f3070 	ldr	r3, [pc, #112]	; 141a0 <prvHeapInit+0xcc>
   1412c:	e5933000 	ldr	r3, [r3]
   14130:	e3a02000 	mov	r2, #0
   14134:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   14138:	e59f3060 	ldr	r3, [pc, #96]	; 141a0 <prvHeapInit+0xcc>
   1413c:	e5933000 	ldr	r3, [r3]
   14140:	e3a02000 	mov	r2, #0
   14144:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   14148:	e59f304c 	ldr	r3, [pc, #76]	; 1419c <prvHeapInit+0xc8>
   1414c:	e50b300c 	str	r3, [fp, #-12]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   14150:	e3a02a01 	mov	r2, #4096	; 0x1000
   14154:	e3a03010 	mov	r3, #16
   14158:	e0632002 	rsb	r2, r3, r2
   1415c:	e51b300c 	ldr	r3, [fp, #-12]
   14160:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   14164:	e59f3034 	ldr	r3, [pc, #52]	; 141a0 <prvHeapInit+0xcc>
   14168:	e5932000 	ldr	r2, [r3]
   1416c:	e51b300c 	ldr	r3, [fp, #-12]
   14170:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   14174:	e59f3028 	ldr	r3, [pc, #40]	; 141a4 <prvHeapInit+0xd0>
   14178:	e5932000 	ldr	r2, [r3]
   1417c:	e3a03010 	mov	r3, #16
   14180:	e0632002 	rsb	r2, r3, r2
   14184:	e59f3018 	ldr	r3, [pc, #24]	; 141a4 <prvHeapInit+0xd0>
   14188:	e5832000 	str	r2, [r3]
}
   1418c:	e24bd000 	sub	sp, fp, #0
   14190:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14194:	e12fff1e 	bx	lr
   14198:	00015ae8 	andeq	r5, r1, r8, ror #21
   1419c:	00014ae8 	andeq	r4, r1, r8, ror #21
   141a0:	00015af0 	strdeq	r5, [r1], -r0
   141a4:	0001471c 	andeq	r4, r1, ip, lsl r7

000141a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   141a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   141ac:	e28db000 	add	fp, sp, #0
   141b0:	e24dd014 	sub	sp, sp, #20
   141b4:	e50b0010 	str	r0, [fp, #-16]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   141b8:	e59f3130 	ldr	r3, [pc, #304]	; 142f0 <prvInsertBlockIntoFreeList+0x148>
   141bc:	e50b3008 	str	r3, [fp, #-8]
   141c0:	ea000002 	b	141d0 <prvInsertBlockIntoFreeList+0x28>
   141c4:	e51b3008 	ldr	r3, [fp, #-8]
   141c8:	e5933000 	ldr	r3, [r3]
   141cc:	e50b3008 	str	r3, [fp, #-8]
   141d0:	e51b3008 	ldr	r3, [fp, #-8]
   141d4:	e5932000 	ldr	r2, [r3]
   141d8:	e51b3010 	ldr	r3, [fp, #-16]
   141dc:	e1520003 	cmp	r2, r3
   141e0:	3afffff7 	bcc	141c4 <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   141e4:	e51b3008 	ldr	r3, [fp, #-8]
   141e8:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   141ec:	e51b3008 	ldr	r3, [fp, #-8]
   141f0:	e5933004 	ldr	r3, [r3, #4]
   141f4:	e51b200c 	ldr	r2, [fp, #-12]
   141f8:	e0822003 	add	r2, r2, r3
   141fc:	e51b3010 	ldr	r3, [fp, #-16]
   14200:	e1520003 	cmp	r2, r3
   14204:	1a000008 	bne	1422c <prvInsertBlockIntoFreeList+0x84>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   14208:	e51b3008 	ldr	r3, [fp, #-8]
   1420c:	e5932004 	ldr	r2, [r3, #4]
   14210:	e51b3010 	ldr	r3, [fp, #-16]
   14214:	e5933004 	ldr	r3, [r3, #4]
   14218:	e0822003 	add	r2, r2, r3
   1421c:	e51b3008 	ldr	r3, [fp, #-8]
   14220:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   14224:	e51b3008 	ldr	r3, [fp, #-8]
   14228:	e50b3010 	str	r3, [fp, #-16]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   1422c:	e51b3010 	ldr	r3, [fp, #-16]
   14230:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   14234:	e51b3010 	ldr	r3, [fp, #-16]
   14238:	e5933004 	ldr	r3, [r3, #4]
   1423c:	e51b200c 	ldr	r2, [fp, #-12]
   14240:	e0822003 	add	r2, r2, r3
   14244:	e51b3008 	ldr	r3, [fp, #-8]
   14248:	e5933000 	ldr	r3, [r3]
   1424c:	e1520003 	cmp	r2, r3
   14250:	1a000018 	bne	142b8 <prvInsertBlockIntoFreeList+0x110>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   14254:	e51b3008 	ldr	r3, [fp, #-8]
   14258:	e5932000 	ldr	r2, [r3]
   1425c:	e59f3090 	ldr	r3, [pc, #144]	; 142f4 <prvInsertBlockIntoFreeList+0x14c>
   14260:	e5933000 	ldr	r3, [r3]
   14264:	e1520003 	cmp	r2, r3
   14268:	0a00000d 	beq	142a4 <prvInsertBlockIntoFreeList+0xfc>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   1426c:	e51b3010 	ldr	r3, [fp, #-16]
   14270:	e5932004 	ldr	r2, [r3, #4]
   14274:	e51b3008 	ldr	r3, [fp, #-8]
   14278:	e5933000 	ldr	r3, [r3]
   1427c:	e5933004 	ldr	r3, [r3, #4]
   14280:	e0822003 	add	r2, r2, r3
   14284:	e51b3010 	ldr	r3, [fp, #-16]
   14288:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   1428c:	e51b3008 	ldr	r3, [fp, #-8]
   14290:	e5933000 	ldr	r3, [r3]
   14294:	e5932000 	ldr	r2, [r3]
   14298:	e51b3010 	ldr	r3, [fp, #-16]
   1429c:	e5832000 	str	r2, [r3]
   142a0:	ea000008 	b	142c8 <prvInsertBlockIntoFreeList+0x120>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   142a4:	e59f3048 	ldr	r3, [pc, #72]	; 142f4 <prvInsertBlockIntoFreeList+0x14c>
   142a8:	e5932000 	ldr	r2, [r3]
   142ac:	e51b3010 	ldr	r3, [fp, #-16]
   142b0:	e5832000 	str	r2, [r3]
   142b4:	ea000003 	b	142c8 <prvInsertBlockIntoFreeList+0x120>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   142b8:	e51b3008 	ldr	r3, [fp, #-8]
   142bc:	e5932000 	ldr	r2, [r3]
   142c0:	e51b3010 	ldr	r3, [fp, #-16]
   142c4:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   142c8:	e51b2008 	ldr	r2, [fp, #-8]
   142cc:	e51b3010 	ldr	r3, [fp, #-16]
   142d0:	e1520003 	cmp	r2, r3
   142d4:	0a000002 	beq	142e4 <prvInsertBlockIntoFreeList+0x13c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   142d8:	e51b3008 	ldr	r3, [fp, #-8]
   142dc:	e51b2010 	ldr	r2, [fp, #-16]
   142e0:	e5832000 	str	r2, [r3]
	}
}
   142e4:	e24bd000 	sub	sp, fp, #0
   142e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   142ec:	e12fff1e 	bx	lr
   142f0:	00015ae8 	andeq	r5, r1, r8, ror #21
   142f4:	00015af0 	strdeq	r5, [r1], -r0

000142f8 <undefined_instruction>:
   142f8:	eafffffe 	b	142f8 <undefined_instruction>

000142fc <prefetch_abort>:
   142fc:	eafffffe 	b	142fc <prefetch_abort>

00014300 <data_abort>:
   14300:	eafffffe 	b	14300 <data_abort>

00014304 <unused>:
   14304:	eafffffe 	b	14304 <unused>

00014308 <fiq>:
   14308:	eafffffe 	b	14308 <fiq>

0001430c <hang>:
   1430c:	eafffffe 	b	1430c <hang>

00014310 <task1>:
#include <task.h>

#include "Drivers/interrupts.h"
#include "Drivers/gpio.h"

void task1(void *pParam) {
   14310:	e92d4800 	push	{fp, lr}
   14314:	e28db004 	add	fp, sp, #4
   14318:	e24dd010 	sub	sp, sp, #16
   1431c:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   14320:	e3a03000 	mov	r3, #0
   14324:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   14328:	e51b3008 	ldr	r3, [fp, #-8]
   1432c:	e2833001 	add	r3, r3, #1
   14330:	e50b3008 	str	r3, [fp, #-8]
		SetGpio(8, 1);
   14334:	e3a00008 	mov	r0, #8
   14338:	e3a01001 	mov	r1, #1
   1433c:	ebfffd7d 	bl	13938 <SetGpio>
		vTaskDelay(200);
   14340:	e3a000c8 	mov	r0, #200	; 0xc8
   14344:	ebfff71c 	bl	11fbc <vTaskDelay>
	}
   14348:	eafffff6 	b	14328 <task1+0x18>

0001434c <task2>:
}

void task2(void *pParam) {
   1434c:	e92d4800 	push	{fp, lr}
   14350:	e28db004 	add	fp, sp, #4
   14354:	e24dd010 	sub	sp, sp, #16
   14358:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   1435c:	e3a03000 	mov	r3, #0
   14360:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   14364:	e51b3008 	ldr	r3, [fp, #-8]
   14368:	e2833001 	add	r3, r3, #1
   1436c:	e50b3008 	str	r3, [fp, #-8]
		vTaskDelay(100);
   14370:	e3a00064 	mov	r0, #100	; 0x64
   14374:	ebfff710 	bl	11fbc <vTaskDelay>
		SetGpio(8, 0);
   14378:	e3a00008 	mov	r0, #8
   1437c:	e3a01000 	mov	r1, #0
   14380:	ebfffd6c 	bl	13938 <SetGpio>
		vTaskDelay(100);
   14384:	e3a00064 	mov	r0, #100	; 0x64
   14388:	ebfff70b 	bl	11fbc <vTaskDelay>
	}
   1438c:	eafffff4 	b	14364 <task2+0x18>

00014390 <main>:
 *	This is the systems main entry, some call it a boot thread.
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
void main(void) {
   14390:	e92d4800 	push	{fp, lr}
   14394:	e28db004 	add	fp, sp, #4
   14398:	e24dd010 	sub	sp, sp, #16

	DisableInterrupts();
   1439c:	ebfffd1e 	bl	1381c <DisableInterrupts>
	InitInterruptController();
   143a0:	ebfffc71 	bl	1356c <InitInterruptController>

	SetGpioFunction(8, 1);			// RDY led
   143a4:	e3a00008 	mov	r0, #8
   143a8:	e3a01001 	mov	r1, #1
   143ac:	ebfffd20 	bl	13834 <SetGpioFunction>

	xTaskCreate(task1, "LED_0", 128, NULL, 0, NULL);
   143b0:	e3a03000 	mov	r3, #0
   143b4:	e58d3000 	str	r3, [sp]
   143b8:	e3a03000 	mov	r3, #0
   143bc:	e58d3004 	str	r3, [sp, #4]
   143c0:	e3a03000 	mov	r3, #0
   143c4:	e58d3008 	str	r3, [sp, #8]
   143c8:	e3a03000 	mov	r3, #0
   143cc:	e58d300c 	str	r3, [sp, #12]
   143d0:	e59f0048 	ldr	r0, [pc, #72]	; 14420 <main+0x90>
   143d4:	e59f1048 	ldr	r1, [pc, #72]	; 14424 <main+0x94>
   143d8:	e3a02080 	mov	r2, #128	; 0x80
   143dc:	e3a03000 	mov	r3, #0
   143e0:	ebfff5e1 	bl	11b6c <xTaskGenericCreate>
	xTaskCreate(task2, "LED_1", 128, NULL, 0, NULL);
   143e4:	e3a03000 	mov	r3, #0
   143e8:	e58d3000 	str	r3, [sp]
   143ec:	e3a03000 	mov	r3, #0
   143f0:	e58d3004 	str	r3, [sp, #4]
   143f4:	e3a03000 	mov	r3, #0
   143f8:	e58d3008 	str	r3, [sp, #8]
   143fc:	e3a03000 	mov	r3, #0
   14400:	e58d300c 	str	r3, [sp, #12]
   14404:	e59f001c 	ldr	r0, [pc, #28]	; 14428 <main+0x98>
   14408:	e59f101c 	ldr	r1, [pc, #28]	; 1442c <main+0x9c>
   1440c:	e3a02080 	mov	r2, #128	; 0x80
   14410:	e3a03000 	mov	r3, #0
   14414:	ebfff5d4 	bl	11b6c <xTaskGenericCreate>

	vTaskStartScheduler();
   14418:	ebfff869 	bl	125c4 <vTaskStartScheduler>
	 *	We should never get here, but just in case something goes wrong,
	 *	we'll place the CPU into a safe loop.
	 */
	while(1) {
		;
	}
   1441c:	eafffffe 	b	1441c <main+0x8c>
   14420:	00014310 	andeq	r4, r1, r0, lsl r3
   14424:	0001444c 	andeq	r4, r1, ip, asr #8
   14428:	0001434c 	andeq	r4, r1, ip, asr #6
   1442c:	00014454 	andeq	r4, r1, r4, asr r4

Disassembly of section .rodata:

00014430 <pRegs>:
   14430:	2000b400 	andcs	fp, r0, r0, lsl #8
   14434:	454c4449 	strbmi	r4, [ip, #-1097]	; 0x449
   14438:	00000000 	andeq	r0, r0, r0

0001443c <pRegs>:
   1443c:	2000b200 	andcs	fp, r0, r0, lsl #4

00014440 <pRegs>:
   14440:	20200000 	eorcs	r0, r0, r0

00014444 <heapSTRUCT_SIZE>:
   14444:	00000010 	andeq	r0, r0, r0, lsl r0

00014448 <xTotalHeapSize>:
   14448:	00001000 	andeq	r1, r0, r0
   1444c:	5f44454c 	svcpl	0x0044454c
   14450:	00000030 	andeq	r0, r0, r0, lsr r0
   14454:	5f44454c 	svcpl	0x0044454c
   14458:	00000031 	andeq	r0, r0, r1, lsr r0

Disassembly of section .text.memcpy:

0001445c <memcpy>:
   1445c:	e352000f 	cmp	r2, #15
   14460:	e92d00f0 	push	{r4, r5, r6, r7}
   14464:	9a00002a 	bls	14514 <memcpy+0xb8>
   14468:	e1803001 	orr	r3, r0, r1
   1446c:	e3130003 	tst	r3, #3
   14470:	1a000031 	bne	1453c <memcpy+0xe0>
   14474:	e2426010 	sub	r6, r2, #16
   14478:	e1a06226 	lsr	r6, r6, #4
   1447c:	e0805206 	add	r5, r0, r6, lsl #4
   14480:	e2855010 	add	r5, r5, #16
   14484:	e1a0c001 	mov	ip, r1
   14488:	e1a03000 	mov	r3, r0
   1448c:	e59c4000 	ldr	r4, [ip]
   14490:	e5834000 	str	r4, [r3]
   14494:	e59c4004 	ldr	r4, [ip, #4]
   14498:	e5834004 	str	r4, [r3, #4]
   1449c:	e59c4008 	ldr	r4, [ip, #8]
   144a0:	e5834008 	str	r4, [r3, #8]
   144a4:	e59c400c 	ldr	r4, [ip, #12]
   144a8:	e2833010 	add	r3, r3, #16
   144ac:	e5034004 	str	r4, [r3, #-4]
   144b0:	e1530005 	cmp	r3, r5
   144b4:	e28cc010 	add	ip, ip, #16
   144b8:	1afffff3 	bne	1448c <memcpy+0x30>
   144bc:	e2863001 	add	r3, r6, #1
   144c0:	e202700f 	and	r7, r2, #15
   144c4:	e1a03203 	lsl	r3, r3, #4
   144c8:	e3570003 	cmp	r7, #3
   144cc:	e0811003 	add	r1, r1, r3
   144d0:	e0803003 	add	r3, r0, r3
   144d4:	9a00001a 	bls	14544 <memcpy+0xe8>
   144d8:	e1a05001 	mov	r5, r1
   144dc:	e1a04003 	mov	r4, r3
   144e0:	e1a0c007 	mov	ip, r7
   144e4:	e24cc004 	sub	ip, ip, #4
   144e8:	e4956004 	ldr	r6, [r5], #4
   144ec:	e35c0003 	cmp	ip, #3
   144f0:	e4846004 	str	r6, [r4], #4
   144f4:	8afffffa 	bhi	144e4 <memcpy+0x88>
   144f8:	e247c004 	sub	ip, r7, #4
   144fc:	e3ccc003 	bic	ip, ip, #3
   14500:	e28cc004 	add	ip, ip, #4
   14504:	e083300c 	add	r3, r3, ip
   14508:	e081100c 	add	r1, r1, ip
   1450c:	e2022003 	and	r2, r2, #3
   14510:	ea000000 	b	14518 <memcpy+0xbc>
   14514:	e1a03000 	mov	r3, r0
   14518:	e3520000 	cmp	r2, #0
   1451c:	0a000004 	beq	14534 <memcpy+0xd8>
   14520:	e0812002 	add	r2, r1, r2
   14524:	e4d1c001 	ldrb	ip, [r1], #1
   14528:	e1510002 	cmp	r1, r2
   1452c:	e4c3c001 	strb	ip, [r3], #1
   14530:	1afffffb 	bne	14524 <memcpy+0xc8>
   14534:	e8bd00f0 	pop	{r4, r5, r6, r7}
   14538:	e12fff1e 	bx	lr
   1453c:	e1a03000 	mov	r3, r0
   14540:	eafffff6 	b	14520 <memcpy+0xc4>
   14544:	e1a02007 	mov	r2, r7
   14548:	eafffff2 	b	14518 <memcpy+0xbc>

Disassembly of section .text.memset:

0001454c <memset>:
   1454c:	e3100003 	tst	r0, #3
   14550:	e92d0070 	push	{r4, r5, r6}
   14554:	0a000037 	beq	14638 <memset+0xec>
   14558:	e3520000 	cmp	r2, #0
   1455c:	e2422001 	sub	r2, r2, #1
   14560:	0a000032 	beq	14630 <memset+0xe4>
   14564:	e201c0ff 	and	ip, r1, #255	; 0xff
   14568:	e1a03000 	mov	r3, r0
   1456c:	ea000002 	b	1457c <memset+0x30>
   14570:	e3520000 	cmp	r2, #0
   14574:	e2422001 	sub	r2, r2, #1
   14578:	0a00002c 	beq	14630 <memset+0xe4>
   1457c:	e4c3c001 	strb	ip, [r3], #1
   14580:	e3130003 	tst	r3, #3
   14584:	1afffff9 	bne	14570 <memset+0x24>
   14588:	e3520003 	cmp	r2, #3
   1458c:	9a000020 	bls	14614 <memset+0xc8>
   14590:	e20140ff 	and	r4, r1, #255	; 0xff
   14594:	e1844404 	orr	r4, r4, r4, lsl #8
   14598:	e352000f 	cmp	r2, #15
   1459c:	e1844804 	orr	r4, r4, r4, lsl #16
   145a0:	9a000010 	bls	145e8 <memset+0x9c>
   145a4:	e2426010 	sub	r6, r2, #16
   145a8:	e1a06226 	lsr	r6, r6, #4
   145ac:	e2835010 	add	r5, r3, #16
   145b0:	e0855206 	add	r5, r5, r6, lsl #4
   145b4:	e1a0c003 	mov	ip, r3
   145b8:	e58c4000 	str	r4, [ip]
   145bc:	e58c4004 	str	r4, [ip, #4]
   145c0:	e58c4008 	str	r4, [ip, #8]
   145c4:	e58c400c 	str	r4, [ip, #12]
   145c8:	e28cc010 	add	ip, ip, #16
   145cc:	e15c0005 	cmp	ip, r5
   145d0:	1afffff8 	bne	145b8 <memset+0x6c>
   145d4:	e202200f 	and	r2, r2, #15
   145d8:	e2866001 	add	r6, r6, #1
   145dc:	e3520003 	cmp	r2, #3
   145e0:	e0833206 	add	r3, r3, r6, lsl #4
   145e4:	9a00000a 	bls	14614 <memset+0xc8>
   145e8:	e1a05003 	mov	r5, r3
   145ec:	e1a0c002 	mov	ip, r2
   145f0:	e24cc004 	sub	ip, ip, #4
   145f4:	e35c0003 	cmp	ip, #3
   145f8:	e4854004 	str	r4, [r5], #4
   145fc:	8afffffb 	bhi	145f0 <memset+0xa4>
   14600:	e242c004 	sub	ip, r2, #4
   14604:	e3ccc003 	bic	ip, ip, #3
   14608:	e28cc004 	add	ip, ip, #4
   1460c:	e083300c 	add	r3, r3, ip
   14610:	e2022003 	and	r2, r2, #3
   14614:	e3520000 	cmp	r2, #0
   14618:	120110ff 	andne	r1, r1, #255	; 0xff
   1461c:	10832002 	addne	r2, r3, r2
   14620:	0a000002 	beq	14630 <memset+0xe4>
   14624:	e4c31001 	strb	r1, [r3], #1
   14628:	e1530002 	cmp	r3, r2
   1462c:	1afffffc 	bne	14624 <memset+0xd8>
   14630:	e8bd0070 	pop	{r4, r5, r6}
   14634:	e12fff1e 	bx	lr
   14638:	e1a03000 	mov	r3, r0
   1463c:	eaffffd1 	b	14588 <memset+0x3c>

Disassembly of section .text.strncpy:

00014640 <strncpy>:
   14640:	e1803001 	orr	r3, r0, r1
   14644:	e3130003 	tst	r3, #3
   14648:	e92d0070 	push	{r4, r5, r6}
   1464c:	1a000003 	bne	14660 <strncpy+0x20>
   14650:	e3520003 	cmp	r2, #3
   14654:	81a0c001 	movhi	ip, r1
   14658:	81a03000 	movhi	r3, r0
   1465c:	8a000012 	bhi	146ac <strncpy+0x6c>
   14660:	e1a03000 	mov	r3, r0
   14664:	e3520000 	cmp	r2, #0
   14668:	0a00000d 	beq	146a4 <strncpy+0x64>
   1466c:	e5d1c000 	ldrb	ip, [r1]
   14670:	e35c0000 	cmp	ip, #0
   14674:	e5c3c000 	strb	ip, [r3]
   14678:	e2422001 	sub	r2, r2, #1
   1467c:	e2833001 	add	r3, r3, #1
   14680:	1a000005 	bne	1469c <strncpy+0x5c>
   14684:	ea000017 	b	146e8 <strncpy+0xa8>
   14688:	e5f1c001 	ldrb	ip, [r1, #1]!
   1468c:	e35c0000 	cmp	ip, #0
   14690:	e2422001 	sub	r2, r2, #1
   14694:	e4c3c001 	strb	ip, [r3], #1
   14698:	0a000012 	beq	146e8 <strncpy+0xa8>
   1469c:	e3520000 	cmp	r2, #0
   146a0:	1afffff8 	bne	14688 <strncpy+0x48>
   146a4:	e8bd0070 	pop	{r4, r5, r6}
   146a8:	e12fff1e 	bx	lr
   146ac:	e1a0100c 	mov	r1, ip
   146b0:	e59f5054 	ldr	r5, [pc, #84]	; 1470c <strncpy+0xcc>
   146b4:	e49c6004 	ldr	r6, [ip], #4
   146b8:	e59f4050 	ldr	r4, [pc, #80]	; 14710 <strncpy+0xd0>
   146bc:	e0865005 	add	r5, r6, r5
   146c0:	e1c55006 	bic	r5, r5, r6
   146c4:	e0054004 	and	r4, r5, r4
   146c8:	e3540000 	cmp	r4, #0
   146cc:	1affffe4 	bne	14664 <strncpy+0x24>
   146d0:	e2422004 	sub	r2, r2, #4
   146d4:	e3520003 	cmp	r2, #3
   146d8:	e4836004 	str	r6, [r3], #4
   146dc:	e1a0100c 	mov	r1, ip
   146e0:	8afffff1 	bhi	146ac <strncpy+0x6c>
   146e4:	eaffffde 	b	14664 <strncpy+0x24>
   146e8:	e3520000 	cmp	r2, #0
   146ec:	10832002 	addne	r2, r3, r2
   146f0:	13a01000 	movne	r1, #0
   146f4:	0affffea 	beq	146a4 <strncpy+0x64>
   146f8:	e4c31001 	strb	r1, [r3], #1
   146fc:	e1530002 	cmp	r3, r2
   14700:	1afffffc 	bne	146f8 <strncpy+0xb8>
   14704:	e8bd0070 	pop	{r4, r5, r6}
   14708:	e12fff1e 	bx	lr
   1470c:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   14710:	80808080 	addhi	r8, r0, r0, lsl #1

Disassembly of section .data:

00014714 <ulCriticalNesting>:
   14714:	0000270f 	andeq	r2, r0, pc, lsl #14

00014718 <xNextTaskUnblockTime>:
   14718:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

0001471c <xFreeBytesRemaining>:
   1471c:	00001000 	andeq	r1, r0, r0

Disassembly of section .bss:

00014720 <__bss_start>:
   14720:	00000000 	andeq	r0, r0, r0

00014724 <pxReadyCoRoutineLists>:
	...

0001474c <xDelayedCoRoutineList1>:
	...

00014760 <xDelayedCoRoutineList2>:
	...

00014774 <pxDelayedCoRoutineList>:
   14774:	00000000 	andeq	r0, r0, r0

00014778 <pxOverflowDelayedCoRoutineList>:
   14778:	00000000 	andeq	r0, r0, r0

0001477c <xPendingReadyCoRoutineList>:
	...

00014790 <pxCurrentCoRoutine>:
   14790:	00000000 	andeq	r0, r0, r0

00014794 <uxTopCoRoutineReadyPriority>:
   14794:	00000000 	andeq	r0, r0, r0

00014798 <xCoRoutineTickCount>:
   14798:	00000000 	andeq	r0, r0, r0

0001479c <xLastTickCount>:
   1479c:	00000000 	andeq	r0, r0, r0

000147a0 <xPassedTicks>:
   147a0:	00000000 	andeq	r0, r0, r0

000147a4 <pxCurrentTCB>:
   147a4:	00000000 	andeq	r0, r0, r0

000147a8 <pxReadyTasksLists>:
	...

0001480c <xDelayedTaskList1>:
	...

00014820 <xDelayedTaskList2>:
	...

00014834 <pxDelayedTaskList>:
   14834:	00000000 	andeq	r0, r0, r0

00014838 <pxOverflowDelayedTaskList>:
   14838:	00000000 	andeq	r0, r0, r0

0001483c <xPendingReadyList>:
	...

00014850 <xTasksWaitingTermination>:
	...

00014864 <uxTasksDeleted>:
   14864:	00000000 	andeq	r0, r0, r0

00014868 <xSuspendedTaskList>:
	...

0001487c <uxCurrentNumberOfTasks>:
   1487c:	00000000 	andeq	r0, r0, r0

00014880 <xTickCount>:
   14880:	00000000 	andeq	r0, r0, r0

00014884 <uxTopUsedPriority>:
   14884:	00000000 	andeq	r0, r0, r0

00014888 <uxTopReadyPriority>:
   14888:	00000000 	andeq	r0, r0, r0

0001488c <xSchedulerRunning>:
   1488c:	00000000 	andeq	r0, r0, r0

00014890 <uxSchedulerSuspended>:
   14890:	00000000 	andeq	r0, r0, r0

00014894 <uxMissedTicks>:
   14894:	00000000 	andeq	r0, r0, r0

00014898 <xMissedYield>:
   14898:	00000000 	andeq	r0, r0, r0

0001489c <xNumOfOverflows>:
   1489c:	00000000 	andeq	r0, r0, r0

000148a0 <uxTaskNumber>:
   148a0:	00000000 	andeq	r0, r0, r0

000148a4 <g_VectorTable>:
	...

00014ae8 <xHeap>:
	...

00015ae8 <xStart>:
	...

00015af0 <pxEnd>:
   15af0:	00000000 	andeq	r0, r0, r0

00015af4 <allocated>:
   15af4:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000001f1 	strdeq	r0, [r0], -r1
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000174 	andeq	r0, r0, r4, ror r1
      10:	00004501 	andeq	r4, r0, r1, lsl #10
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	00033800 	andeq	r3, r3, r0, lsl #16
      1c:	00000000 	andeq	r0, r0, r0
      20:	05040200 	streq	r0, [r4, #-512]	; 0x200
      24:	00746e69 	rsbseq	r6, r4, r9, ror #28
      28:	00070403 	andeq	r0, r7, r3, lsl #8
      2c:	04000007 	streq	r0, [r0], #-7
      30:	000000fc 	strdeq	r0, [r0], -ip
      34:	003a4702 	eorseq	r4, sl, r2, lsl #14
      38:	04050000 	streq	r0, [r5], #-0
      3c:	00000040 	andeq	r0, r0, r0, asr #32
      40:	00004b06 	andeq	r4, r0, r6, lsl #22
      44:	004b0700 	subeq	r0, fp, r0, lsl #14
      48:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
      4c:	000c0404 	andeq	r0, ip, r4, lsl #8
      50:	1f030000 	svcne	0x00030000
      54:	00000058 	andeq	r0, r0, r8, asr r0
      58:	fb070403 	blx	1c106e <__bss_end+0x1ab576>
      5c:	03000006 	movweq	r0, #6
      60:	08060504 	stmdaeq	r6, {r2, r8, sl}
      64:	01030000 	mrseq	r0, (UNDEF: 3)
      68:	00070f06 	andeq	r0, r7, r6, lsl #30
      6c:	07020300 	streq	r0, [r2, -r0, lsl #6]
      70:	000000e9 	andeq	r0, r0, r9, ror #1
      74:	00580405 	subseq	r0, r8, r5, lsl #8
      78:	04030000 	streq	r0, [r3], #-0
      7c:	00012307 	andeq	r2, r1, r7, lsl #6
      80:	014c0900 	cmpeq	ip, r0, lsl #18
      84:	01240000 	teqeq	r4, r0
      88:	0000fa15 	andeq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
      8c:	4f4c0a00 	svcmi	0x004c0a00
      90:	16010044 	strne	r0, [r1], -r4, asr #32
      94:	00000058 	andeq	r0, r0, r8, asr r0
      98:	41560a00 	cmpmi	r6, r0, lsl #20
      9c:	1701004c 	strne	r0, [r1, -ip, asr #32]
      a0:	00000058 	andeq	r0, r0, r8, asr r0
      a4:	54430a04 	strbpl	r0, [r3], #-2564	; 0xa04
      a8:	1801004c 	stmdane	r1, {r2, r3, r6}
      ac:	00000058 	andeq	r0, r0, r8, asr r0
      b0:	4c430a08 	mcrrmi	10, 0, r0, r3, cr8
      b4:	19010049 	stmdbne	r1, {r0, r3, r6}
      b8:	00000058 	andeq	r0, r0, r8, asr r0
      bc:	49520a0c 	ldmdbmi	r2, {r2, r3, r9, fp}^
      c0:	1a010053 	bne	40214 <__bss_end+0x2a71c>
      c4:	00000058 	andeq	r0, r0, r8, asr r0
      c8:	494d0a10 	stmdbmi	sp, {r4, r9, fp}^
      cc:	1b010053 	blne	40220 <__bss_end+0x2a728>
      d0:	00000058 	andeq	r0, r0, r8, asr r0
      d4:	4c520a14 	vmovmi	r0, r2, s8, s9
      d8:	1c010044 	stcne	0, cr0, [r1], {68}	; 0x44
      dc:	00000058 	andeq	r0, r0, r8, asr r0
      e0:	49440a18 	stmdbmi	r4, {r3, r4, r9, fp}^
      e4:	1d010056 	stcne	0, cr0, [r1, #-344]	; 0xfffffea8
      e8:	00000058 	andeq	r0, r0, r8, asr r0
      ec:	4e430a1c 	mcrmi	10, 2, r0, cr3, cr12, {0}
      f0:	1e010054 	mcrne	0, 0, r0, cr1, cr4, {2}
      f4:	00000058 	andeq	r0, r0, r8, asr r0
      f8:	4d040020 	stcmi	0, cr0, [r4, #-128]	; 0xffffff80
      fc:	01000001 	tsteq	r0, r1
     100:	0000811f 	andeq	r8, r0, pc, lsl r1
     104:	01f00b00 	mvnseq	r0, r0, lsl #22
     108:	36010000 	strcc	r0, [r1], -r0
     10c:	00000074 	andeq	r0, r0, r4, ror r0
     110:	00010000 	andeq	r0, r1, r0
     114:	00000240 	andeq	r0, r0, r0, asr #4
     118:	01579c01 	cmpeq	r7, r1, lsl #24
     11c:	3f0c0000 	svccc	0x000c0000
     120:	01000001 	tsteq	r0, r1
     124:	00007436 	andeq	r7, r0, r6, lsr r4
     128:	6c910200 	lfmvs	f0, 4, [r1], {0}
     12c:	0000050c 	andeq	r0, r0, ip, lsl #10
     130:	2f360100 	svccs	0x00360100
     134:	02000000 	andeq	r0, r0, #0
     138:	2c0c6891 	stccs	8, cr6, [ip], {145}	; 0x91
     13c:	01000001 	tsteq	r0, r1
     140:	00004b36 	andeq	r4, r0, r6, lsr fp
     144:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     148:	0000370d 	andeq	r3, r0, sp, lsl #14
     14c:	74380100 	ldrtvc	r0, [r8], #-256	; 0x100
     150:	02000000 	andeq	r0, r0, #0
     154:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
     158:	00000160 	andeq	r0, r0, r0, ror #2
     15c:	005f8101 	subseq	r8, pc, r1, lsl #2
     160:	02400000 	subeq	r0, r0, #0
     164:	001c0001 	andseq	r0, ip, r1
     168:	9c010000 	stcls	0, cr0, [r1], {-0}
     16c:	0001080f 	andeq	r0, r1, pc, lsl #16
     170:	5c8f0100 	stfpls	f0, [pc], {0}
     174:	14000102 	strne	r0, [r0], #-258	; 0x102
     178:	01000000 	mrseq	r0, (UNDEF: 0)
     17c:	011a109c 			; <UNDEFINED> instruction: 0x011a109c
     180:	9c010000 	stcls	0, cr0, [r1], {-0}
     184:	00010270 	andeq	r0, r1, r0, ror r2
     188:	00000034 	andeq	r0, r0, r4, lsr r0
     18c:	01af9c01 			; <UNDEFINED> instruction: 0x01af9c01
     190:	000c0000 	andeq	r0, ip, r0
     194:	01000000 	mrseq	r0, (UNDEF: 0)
     198:	0000219c 	muleq	r0, ip, r1
     19c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     1a0:	0000300c 	andeq	r3, r0, ip
     1a4:	4b9c0100 	blmi	fe7005ac <_estack+0xf66f05ac>
     1a8:	02000000 	andeq	r0, r0, #0
     1ac:	11007091 	swpne	r7, r1, [r0]
     1b0:	00000019 	andeq	r0, r0, r9, lsl r0
     1b4:	02a4aa01 	adceq	sl, r4, #4096	; 0x1000
     1b8:	00940001 	addseq	r0, r4, r1
     1bc:	9c010000 	stcls	0, cr0, [r1], {-0}
     1c0:	000001d3 	ldrdeq	r0, [r0], -r3
     1c4:	0002060d 	andeq	r0, r2, sp, lsl #12
     1c8:	58ac0100 	stmiapl	ip!, {r8}
     1cc:	02000000 	andeq	r0, r0, #0
     1d0:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
     1d4:	00000139 	andeq	r0, r0, r9, lsr r1
     1d8:	01e42101 	mvneq	r2, r1, lsl #2
     1dc:	03050000 	movweq	r0, #20480	; 0x5000
     1e0:	00014430 	andeq	r4, r1, r0, lsr r4
     1e4:	0001e912 	andeq	lr, r1, r2, lsl r9
     1e8:	ef040500 	svc	0x00040500
     1ec:	13000001 	movwne	r0, #1
     1f0:	000000fa 	strdeq	r0, [r0], -sl
     1f4:	00018400 	andeq	r8, r1, r0, lsl #8
     1f8:	1f000400 	svcne	0x00000400
     1fc:	04000001 	streq	r0, [r0], #-1
     200:	00017401 	andeq	r7, r1, r1, lsl #8
     204:	02590100 	subseq	r0, r9, #0, 2
     208:	03380000 	teqeq	r8, #0
     20c:	02900001 	addseq	r0, r0, #1
     210:	01c40000 	biceq	r0, r4, r0
     214:	04020000 	streq	r0, [r2], #-0
     218:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     21c:	07040300 	streq	r0, [r4, -r0, lsl #6]
     220:	00000700 	andeq	r0, r0, r0, lsl #14
     224:	fb070403 	blx	1c123a <__bss_end+0x1ab742>
     228:	03000006 	movweq	r0, #6
     22c:	08060504 	stmdaeq	r6, {r2, r8, sl}
     230:	1f040000 	svcne	0x00040000
     234:	01000003 	tsteq	r0, r3
     238:	01033833 	tsteq	r3, r3, lsr r8
     23c:	00009400 	andeq	r9, r0, r0, lsl #8
     240:	739c0100 	orrsvc	r0, ip, #0, 2
     244:	05000000 	streq	r0, [r0, #-0]
     248:	00010360 	andeq	r0, r1, r0, ror #6
     24c:	00000048 	andeq	r0, r0, r8, asr #32
     250:	00030006 	andeq	r0, r3, r6
     254:	73460100 	movtvc	r0, #24832	; 0x6100
     258:	06000000 	streq	r0, [r0], -r0
     25c:	00000228 	andeq	r0, r0, r8, lsr #4
     260:	007f4601 	rsbseq	r4, pc, r1, lsl #12
     264:	00000000 	andeq	r0, r0, r0
     268:	00007807 	andeq	r7, r0, r7, lsl #16
     26c:	7e040800 	cdpvc	8, 0, cr0, cr4, cr0, {0}
     270:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     274:	00002f07 	andeq	r2, r0, r7, lsl #30
     278:	02450400 	subeq	r0, r5, #0, 8
     27c:	5a010000 	bpl	40284 <__bss_end+0x2a78c>
     280:	000103cc 	andeq	r0, r1, ip, asr #7
     284:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     288:	00de9c01 	sbcseq	r9, lr, r1, lsl #24
     28c:	d00a0000 	andle	r0, sl, r0
     290:	58000103 	stmdapl	r0, {r0, r1, r8}
     294:	bd000000 	stclt	0, cr0, [r0, #-0]
     298:	06000000 	streq	r0, [r0], -r0
     29c:	00000300 	andeq	r0, r0, r0, lsl #6
     2a0:	00736201 	rsbseq	r6, r3, r1, lsl #4
     2a4:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
     2a8:	01000002 	tsteq	r0, r2
     2ac:	00007f62 	andeq	r7, r0, r2, ror #30
     2b0:	2c050000 	stccs	0, cr0, [r5], {-0}
     2b4:	48000104 	stmdami	r0, {r2, r8}
     2b8:	06000000 	streq	r0, [r0], -r0
     2bc:	00000300 	andeq	r0, r0, r0, lsl #6
     2c0:	00736801 	rsbseq	r6, r3, r1, lsl #16
     2c4:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
     2c8:	01000002 	tsteq	r0, r2
     2cc:	00007f68 	andeq	r7, r0, r8, ror #30
     2d0:	0b000000 	bleq	2d8 <_start-0x7d28>
     2d4:	00000336 	andeq	r0, r0, r6, lsr r3
     2d8:	047c7f01 	ldrbteq	r7, [ip], #-3841	; 0xf01
     2dc:	00ac0001 	adceq	r0, ip, r1
     2e0:	9c010000 	stcls	0, cr0, [r1], {-0}
     2e4:	00000138 	andeq	r0, r0, r8, lsr r1
     2e8:	01047c0a 	tsteq	r4, sl, lsl #24
     2ec:	00005800 	andeq	r5, r0, r0, lsl #16
     2f0:	00011700 	andeq	r1, r1, r0, lsl #14
     2f4:	03000600 	movweq	r0, #1536	; 0x600
     2f8:	80010000 	andhi	r0, r1, r0
     2fc:	00000073 	andeq	r0, r0, r3, ror r0
     300:	00022806 	andeq	r2, r2, r6, lsl #16
     304:	7f800100 	svcvc	0x00800100
     308:	00000000 	andeq	r0, r0, r0
     30c:	0104d805 	tsteq	r4, r5, lsl #16
     310:	00004800 	andeq	r4, r0, r0, lsl #16
     314:	03000600 	movweq	r0, #1536	; 0x600
     318:	82010000 	andhi	r0, r1, #0
     31c:	00000073 	andeq	r0, r0, r3, ror r0
     320:	00022806 	andeq	r2, r2, r6, lsl #16
     324:	7f820100 	svcvc	0x00820100
     328:	00000000 	andeq	r0, r0, r0
     32c:	02150c00 	andseq	r0, r5, #0, 24
     330:	ac010000 	stcge	0, cr0, [r1], {-0}
     334:	00010528 	andeq	r0, r1, r8, lsr #10
     338:	00000040 	andeq	r0, r0, r0, asr #32
     33c:	0d0c9c01 	stceq	12, cr9, [ip, #-4]
     340:	01000003 	tsteq	r0, r3
     344:	010568bc 			; <UNDEFINED> instruction: 0x010568bc
     348:	00006000 	andeq	r6, r0, r0
     34c:	0d9c0100 	ldfeqs	f0, [ip]
     350:	00000228 	andeq	r0, r0, r8, lsr #4
     354:	007f2301 	rsbseq	r2, pc, r1, lsl #6
     358:	03050000 	movweq	r0, #20480	; 0x5000
     35c:	00014714 	andeq	r4, r1, r4, lsl r7
     360:	00023a0d 	andeq	r3, r2, sp, lsl #20
     364:	21310100 	teqcs	r1, r0, lsl #2
     368:	05000000 	streq	r0, [r0, #-0]
     36c:	01472003 	cmpeq	r7, r3
     370:	03000600 	movweq	r0, #1536	; 0x600
     374:	82010000 	andhi	r0, r1, #0
     378:	00000073 	andeq	r0, r0, r3, ror r0
     37c:	00046600 	andeq	r6, r4, r0, lsl #12
     380:	de000400 	cfcpysle	mvf0, mvf0
     384:	04000001 	streq	r0, [r0], #-1
     388:	00017401 	andeq	r7, r1, r1, lsl #8
     38c:	05890100 	streq	r0, [r9, #256]	; 0x100
     390:	05d00000 	ldrbeq	r0, [r0]
     394:	07580001 	ldrbeq	r0, [r8, -r1]
     398:	02c80000 	sbceq	r0, r8, #0
     39c:	04020000 	streq	r0, [r2], #-0
     3a0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     3a4:	07040300 	streq	r0, [r4, -r0, lsl #6]
     3a8:	00000700 	andeq	r0, r0, r0, lsl #14
     3ac:	0c050404 	cfstrseq	mvf0, [r5], {4}
     3b0:	03000000 	movweq	r0, #0
     3b4:	00003c1f 	andeq	r3, r0, pc, lsl ip
     3b8:	07040300 	streq	r0, [r4, -r0, lsl #6]
     3bc:	000006fb 	strdeq	r0, [r0], -fp
     3c0:	06050403 	streq	r0, [r5], -r3, lsl #8
     3c4:	06000008 	streq	r0, [r0], -r8
     3c8:	000003ea 	andeq	r0, r0, sl, ror #7
     3cc:	93690214 	cmnls	r9, #20, 4	; 0x40000001
     3d0:	07000000 	streq	r0, [r0, -r0]
     3d4:	000003ab 	andeq	r0, r0, fp, lsr #7
     3d8:	00316b02 	eorseq	r6, r1, r2, lsl #22
     3dc:	07000000 	streq	r0, [r0, -r0]
     3e0:	00000563 	andeq	r0, r0, r3, ror #10
     3e4:	00936c02 	addseq	r6, r3, r2, lsl #24
     3e8:	07040000 	streq	r0, [r4, -r0]
     3ec:	0000046b 	andeq	r0, r0, fp, ror #8
     3f0:	00936d02 	addseq	r6, r3, r2, lsl #26
     3f4:	07080000 	streq	r0, [r8, -r0]
     3f8:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
     3fc:	002f6e02 	eoreq	r6, pc, r2, lsl #28
     400:	070c0000 	streq	r0, [ip, -r0]
     404:	00000376 	andeq	r0, r0, r6, ror r3
     408:	002f6f02 	eoreq	r6, pc, r2, lsl #30
     40c:	00100000 	andseq	r0, r0, r0
     410:	00990408 	addseq	r0, r9, r8, lsl #8
     414:	4a090000 	bmi	24041c <__bss_end+0x22a924>
     418:	05000000 	streq	r0, [r0, #-0]
     41c:	00000618 	andeq	r0, r0, r8, lsl r6
     420:	004a7102 	subeq	r7, sl, r2, lsl #2
     424:	82060000 	andhi	r0, r6, #0
     428:	0c000006 	stceq	0, cr0, [r0], {6}
     42c:	00da7302 	sbcseq	r7, sl, r2, lsl #6
     430:	ab070000 	blge	1c0438 <__bss_end+0x1aa940>
     434:	02000003 	andeq	r0, r0, #3
     438:	00003175 	andeq	r3, r0, r5, ror r1
     43c:	63070000 	movwvs	r0, #28672	; 0x7000
     440:	02000005 	andeq	r0, r0, #5
     444:	00009376 	andeq	r9, r0, r6, ror r3
     448:	6b070400 	blvs	1c1450 <__bss_end+0x1ab958>
     44c:	02000004 	andeq	r0, r0, #4
     450:	00009377 	andeq	r9, r0, r7, ror r3
     454:	05000800 	streq	r0, [r0, #-2048]	; 0x800
     458:	000004e4 	andeq	r0, r0, r4, ror #9
     45c:	00a97902 	adceq	r7, r9, r2, lsl #18
     460:	92060000 	andls	r0, r6, #0
     464:	14000006 	strne	r0, [r0], #-6
     468:	01167e02 	tsteq	r6, r2, lsl #28
     46c:	03070000 	movweq	r0, #28672	; 0x7000
     470:	02000005 	andeq	r0, r0, #5
     474:	00011680 	andeq	r1, r1, r0, lsl #13
     478:	a3070000 	movwge	r0, #28672	; 0x7000
     47c:	02000003 	andeq	r0, r0, #3
     480:	00011b81 	andeq	r1, r1, r1, lsl #23
     484:	b6070400 	strlt	r0, [r7], -r0, lsl #8
     488:	02000003 	andeq	r0, r0, #3
     48c:	00012682 	andeq	r2, r1, r2, lsl #13
     490:	09000800 	stmdbeq	r0, {fp}
     494:	0000003c 	andeq	r0, r0, ip, lsr r0
     498:	01210408 	teqeq	r1, r8, lsl #8
     49c:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
     4a0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     4a4:	000000da 	ldrdeq	r0, [r0], -sl
     4a8:	00083105 	andeq	r3, r8, r5, lsl #2
     4ac:	e5830200 	str	r0, [r3, #512]	; 0x200
     4b0:	03000000 	movweq	r0, #0
     4b4:	070f0601 	streq	r0, [pc, -r1, lsl #12]
     4b8:	02030000 	andeq	r0, r3, #0
     4bc:	0000e907 	andeq	lr, r0, r7, lsl #18
     4c0:	07040300 	streq	r0, [r4, -r0, lsl #6]
     4c4:	00000123 	andeq	r0, r0, r3, lsr #2
     4c8:	00053705 	andeq	r3, r5, r5, lsl #14
     4cc:	2f530400 	svccs	0x00530400
     4d0:	05000000 	streq	r0, [r0, #-0]
     4d4:	000006e5 	andeq	r0, r0, r5, ror #13
     4d8:	01615604 	cmneq	r1, r4, lsl #12
     4dc:	04080000 	streq	r0, [r8], #-0
     4e0:	00000167 	andeq	r0, r0, r7, ror #2
     4e4:	0001770a 	andeq	r7, r1, sl, lsl #14
     4e8:	014b0b00 	cmpeq	fp, r0, lsl #22
     4ec:	3c0b0000 	stccc	0, cr0, [fp], {-0}
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	00048606 	andeq	r8, r4, r6, lsl #12
     4f8:	58043800 	stmdapl	r4, {fp, ip, sp}
     4fc:	000001cc 	andeq	r0, r0, ip, asr #3
     500:	00038207 	andeq	r8, r3, r7, lsl #4
     504:	565a0400 	ldrbpl	r0, [sl], -r0, lsl #8
     508:	00000001 	andeq	r0, r0, r1
     50c:	00040107 	andeq	r0, r4, r7, lsl #2
     510:	9e5b0400 	cdpls	4, 5, cr0, cr11, cr0, {0}
     514:	04000000 	streq	r0, [r0], #-0
     518:	0006c207 	andeq	ip, r6, r7, lsl #4
     51c:	9e5c0400 	cdpls	4, 5, cr0, cr12, cr0, {0}
     520:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     524:	00052c07 	andeq	r2, r5, r7, lsl #24
     528:	3c5d0400 	cfldrdcc	mvd0, [sp], {-0}
     52c:	2c000000 	stccs	0, cr0, [r0], {-0}
     530:	0004dc07 	andeq	sp, r4, r7, lsl #24
     534:	3c5e0400 	cfldrdcc	mvd0, [lr], {-0}
     538:	30000000 	andcc	r0, r0, r0
     53c:	00064d07 	andeq	r4, r6, r7, lsl #26
     540:	3d5f0400 	cfldrdcc	mvd0, [pc, #-0]	; 548 <_start-0x7ab8>
     544:	34000001 	strcc	r0, [r0], #-1
     548:	045c0500 	ldrbeq	r0, [ip], #-1280	; 0x500
     54c:	60040000 	andvs	r0, r4, r0
     550:	00000177 	andeq	r0, r0, r7, ror r1
     554:	0004f20c 	andeq	pc, r4, ip, lsl #4
     558:	438a0100 	orrmi	r0, sl, #0, 2
     55c:	d0000000 	andle	r0, r0, r0
     560:	68000105 	stmdavs	r0, {r0, r2, r8}
     564:	01000001 	tsteq	r0, r1
     568:	0002379c 	muleq	r2, ip, r7
     56c:	04760d00 	ldrbteq	r0, [r6], #-3328	; 0xd00
     570:	8a010000 	bhi	40578 <__bss_end+0x2aa80>
     574:	00000156 	andeq	r0, r0, r6, asr r1
     578:	0d6c9102 	stfeqp	f1, [ip, #-8]!
     57c:	0000052c 	andeq	r0, r0, ip, lsr #10
     580:	003c8a01 	eorseq	r8, ip, r1, lsl #20
     584:	91020000 	mrsls	r0, (UNDEF: 2)
     588:	04dc0d68 	ldrbeq	r0, [ip], #3432	; 0xd68
     58c:	8a010000 	bhi	40594 <__bss_end+0x2aa9c>
     590:	0000003c 	andeq	r0, r0, ip, lsr r0
     594:	0e649102 	lgneqs	f1, f2
     598:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
     59c:	00438c01 	subeq	r8, r3, r1, lsl #24
     5a0:	91020000 	mrsls	r0, (UNDEF: 2)
     5a4:	06410e74 			; <UNDEFINED> instruction: 0x06410e74
     5a8:	8d010000 	stchi	0, cr0, [r1, #-0]
     5ac:	00000237 	andeq	r0, r0, r7, lsr r2
     5b0:	00709102 	rsbseq	r9, r0, r2, lsl #2
     5b4:	01cc0408 	biceq	r0, ip, r8, lsl #8
     5b8:	5b0f0000 	blpl	3c05c0 <__bss_end+0x3aaac8>
     5bc:	01000003 	tsteq	r0, r3
     5c0:	010738c3 	smlabteq	r7, r3, r8, r3
     5c4:	0000e000 	andeq	lr, r0, r0
     5c8:	7d9c0100 	ldfvcs	f0, [ip]
     5cc:	0d000002 	stceq	0, cr0, [r0, #-8]
     5d0:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
     5d4:	0031c301 	eorseq	ip, r1, r1, lsl #6
     5d8:	91020000 	mrsls	r0, (UNDEF: 2)
     5dc:	056a0d6c 	strbeq	r0, [sl, #-3436]!	; 0xd6c
     5e0:	c3010000 	movwgt	r0, #4096	; 0x1000
     5e4:	0000027d 	andeq	r0, r0, sp, ror r2
     5e8:	0e689102 	lgneqe	f1, f2
     5ec:	00000635 	andeq	r0, r0, r5, lsr r6
     5f0:	0031c501 	eorseq	ip, r1, r1, lsl #10
     5f4:	91020000 	mrsls	r0, (UNDEF: 2)
     5f8:	04080074 	streq	r0, [r8], #-116	; 0x74
     5fc:	0000012b 	andeq	r0, r0, fp, lsr #2
     600:	00051310 	andeq	r1, r5, r0, lsl r3
     604:	18e90100 	stmiane	r9!, {r8}^
     608:	e8000108 	stmda	r0, {r3, r8}
     60c:	01000000 	mrseq	r0, (UNDEF: 0)
     610:	0002b19c 	muleq	r2, ip, r1
     614:	08281100 	stmdaeq	r8!, {r8, ip}
     618:	00b40001 	adcseq	r0, r4, r1
     61c:	440e0000 	strmi	r0, [lr], #-0
     620:	01000003 	tsteq	r0, r3
     624:	000237f0 	strdeq	r3, [r2], -r0
     628:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     62c:	d1120000 	tstle	r2, r0
     630:	01000006 	tsteq	r0, r6
     634:	09000100 	stmdbeq	r0, {r8}
     638:	01d00001 	bicseq	r0, r0, r1
     63c:	9c010000 	stcls	0, cr0, [r1], {-0}
     640:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     644:	00046413 	andeq	r6, r4, r3, lsl r4
     648:	01020100 	mrseq	r0, (UNDEF: 18)
     64c:	00000237 	andeq	r0, r0, r7, lsr r2
     650:	11709102 	cmnne	r0, r2, lsl #2
     654:	00010964 	andeq	r0, r1, r4, ror #18
     658:	00000028 	andeq	r0, r0, r8, lsr #32
     65c:	00035413 	andeq	r5, r3, r3, lsl r4
     660:	010d0100 	mrseq	r0, (UNDEF: 29)
     664:	0000027d 	andeq	r0, r0, sp, ror r2
     668:	00749102 	rsbseq	r9, r4, r2, lsl #2
     66c:	06221400 	strteq	r1, [r2], -r0, lsl #8
     670:	3a010000 	bcc	40678 <__bss_end+0x2ab80>
     674:	010ad001 	tsteq	sl, r1
     678:	00012800 	andeq	r2, r1, r0, lsl #16
     67c:	209c0100 	addscs	r0, ip, r0, lsl #2
     680:	11000003 	tstne	r0, r3
     684:	00010b3c 	andeq	r0, r1, ip, lsr fp
     688:	00000078 	andeq	r0, r0, r8, ror r0
     68c:	0003f513 	andeq	pc, r3, r3, lsl r5	; <UNPREDICTABLE>
     690:	014f0100 	mrseq	r0, (UNDEF: 95)
     694:	00000320 	andeq	r0, r0, r0, lsr #6
     698:	00749102 	rsbseq	r9, r4, r2, lsl #2
     69c:	027d1500 	rsbseq	r1, sp, #0, 10
     6a0:	98120000 	ldmdals	r2, {}	; <UNPREDICTABLE>
     6a4:	01000006 	tsteq	r0, r6
     6a8:	0bf80158 	bleq	ffe00c10 <_estack+0xf7df0c10>
     6ac:	00a40001 	adceq	r0, r4, r1
     6b0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6b4:	0000034b 	andeq	r0, r0, fp, asr #6
     6b8:	00052c13 	andeq	r2, r5, r3, lsl ip
     6bc:	015a0100 	cmpeq	sl, r0, lsl #2
     6c0:	0000003c 	andeq	r0, r0, ip, lsr r0
     6c4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6c8:	00049f16 	andeq	r9, r4, r6, lsl pc
     6cc:	016c0100 	cmneq	ip, r0, lsl #2
     6d0:	00000043 	andeq	r0, r0, r3, asr #32
     6d4:	00010c9c 	muleq	r1, ip, ip
     6d8:	0000008c 	andeq	r0, r0, ip, lsl #1
     6dc:	03939c01 	orrseq	r9, r3, #256	; 0x100
     6e0:	6a170000 	bvs	5c06e8 <__bss_end+0x5aabf0>
     6e4:	01000005 	tsteq	r0, r5
     6e8:	0393016c 	orrseq	r0, r3, #108, 2
     6ec:	91020000 	mrsls	r0, (UNDEF: 2)
     6f0:	0344136c 	movteq	r1, #17260	; 0x436c
     6f4:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
     6f8:	00023701 	andeq	r3, r2, r1, lsl #14
     6fc:	70910200 	addsvc	r0, r1, r0, lsl #4
     700:	0009b613 	andeq	fp, r9, r3, lsl r6
     704:	016f0100 	cmneq	pc, r0, lsl #2
     708:	00000043 	andeq	r0, r0, r3, asr #32
     70c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     710:	03990408 	orrseq	r0, r9, #8, 8	; 0x8000000
     714:	2b150000 	blcs	54071c <__bss_end+0x52ac24>
     718:	18000001 	stmdane	r0, {r0}
     71c:	0000012b 	andeq	r0, r0, fp, lsr #2
     720:	000003ae 	andeq	r0, r0, lr, lsr #7
     724:	00014419 	andeq	r4, r1, r9, lsl r4
     728:	0e000100 	adfeqs	f0, f0, f0
     72c:	0000066c 	andeq	r0, r0, ip, ror #12
     730:	039e5101 	orrseq	r5, lr, #1073741824	; 0x40000000
     734:	03050000 	movweq	r0, #20480	; 0x5000
     738:	00014724 	andeq	r4, r1, r4, lsr #14
     73c:	00042e0e 	andeq	r2, r4, lr, lsl #28
     740:	2b520100 	blcs	1480b48 <__bss_end+0x146b050>
     744:	05000001 	streq	r0, [r0, #-1]
     748:	01474c03 	cmpeq	r7, r3, lsl #24
     74c:	04450e00 	strbeq	r0, [r5], #-3584	; 0xe00
     750:	53010000 	movwpl	r0, #4096	; 0x1000
     754:	0000012b 	andeq	r0, r0, fp, lsr #2
     758:	47600305 	strbmi	r0, [r0, -r5, lsl #6]!
     75c:	550e0001 	strpl	r0, [lr, #-1]
     760:	01000006 	tsteq	r0, r6
     764:	00027d54 	andeq	r7, r2, r4, asr sp
     768:	74030500 	strvc	r0, [r3], #-1280	; 0x500
     76c:	0e000147 	adfeqsm	f0, f0, f7
     770:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
     774:	027d5501 	rsbseq	r5, sp, #4194304	; 0x400000
     778:	03050000 	movweq	r0, #20480	; 0x5000
     77c:	00014778 	andeq	r4, r1, r8, ror r7
     780:	0005480e 	andeq	r4, r5, lr, lsl #16
     784:	2b560100 	blcs	1580b8c <__bss_end+0x156b094>
     788:	05000001 	streq	r0, [r0, #-1]
     78c:	01477c03 	cmpeq	r7, r3, lsl #24
     790:	04120e00 	ldreq	r0, [r2], #-3584	; 0xe00
     794:	5a010000 	bpl	4079c <__bss_end+0x2aca4>
     798:	0000003c 	andeq	r0, r0, ip, lsr r0
     79c:	47940305 	ldrmi	r0, [r4, r5, lsl #6]
     7a0:	d60e0001 	strle	r0, [lr], -r1
     7a4:	01000003 	tsteq	r0, r3
     7a8:	0000315b 	andeq	r3, r0, fp, asr r1
     7ac:	98030500 	stmdals	r3, {r8, sl}
     7b0:	0e000147 	adfeqsm	f0, f0, f7
     7b4:	000003c7 	andeq	r0, r0, r7, asr #7
     7b8:	00315b01 	eorseq	r5, r1, r1, lsl #22
     7bc:	03050000 	movweq	r0, #20480	; 0x5000
     7c0:	0001479c 	muleq	r1, ip, r7
     7c4:	0003960e 	andeq	r9, r3, lr, lsl #12
     7c8:	315b0100 	cmpcc	fp, r0, lsl #2
     7cc:	05000000 	streq	r0, [r0, #-0]
     7d0:	0147a003 	cmpeq	r7, r3
     7d4:	05761a00 	ldrbeq	r1, [r6, #-2560]!	; 0xa00
     7d8:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     7dc:	00000237 	andeq	r0, r0, r7, lsr r2
     7e0:	47900305 	ldrmi	r0, [r0, r5, lsl #6]
     7e4:	7b000001 	blvc	7f0 <_start-0x7810>
     7e8:	04000002 	streq	r0, [r0], #-2
     7ec:	00036300 	andeq	r6, r3, r0, lsl #6
     7f0:	74010400 	strvc	r0, [r1], #-1024	; 0x400
     7f4:	01000001 	tsteq	r0, r1
     7f8:	0000072a 	andeq	r0, r0, sl, lsr #14
     7fc:	00010d28 	andeq	r0, r1, r8, lsr #26
     800:	00000288 	andeq	r0, r0, r8, lsl #5
     804:	000005a9 	andeq	r0, r0, r9, lsr #11
     808:	00070402 	andeq	r0, r7, r2, lsl #8
     80c:	03000007 	movweq	r0, #7
     810:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     814:	01020074 	tsteq	r2, r4, ror r0
     818:	00070f06 	andeq	r0, r7, r6, lsl #30
     81c:	08010200 	stmdaeq	r1, {r9}
     820:	0000070d 	andeq	r0, r0, sp, lsl #14
     824:	26050202 	strcs	r0, [r5], -r2, lsl #4
     828:	02000008 	andeq	r0, r0, #8
     82c:	00e90702 	rsceq	r0, r9, r2, lsl #14
     830:	04020000 	streq	r0, [r2], #-0
     834:	00080605 	andeq	r0, r8, r5, lsl #12
     838:	07040200 	streq	r0, [r4, -r0, lsl #4]
     83c:	000006fb 	strdeq	r0, [r0], -fp
     840:	01050802 	tsteq	r5, r2, lsl #16
     844:	02000008 	andeq	r0, r0, #8
     848:	06f60708 	ldrbteq	r0, [r6], r8, lsl #14
     84c:	04020000 	streq	r0, [r2], #-0
     850:	00012307 	andeq	r2, r1, r7, lsl #6
     854:	02040400 	andeq	r0, r4, #0, 8
     858:	07160801 	ldreq	r0, [r6, -r1, lsl #16]
     85c:	0c050000 	stceq	0, cr0, [r5], {-0}
     860:	03000000 	movweq	r0, #0
     864:	0000521f 	andeq	r5, r0, pc, lsl r2
     868:	03ea0600 	mvneq	r0, #0, 12
     86c:	02140000 	andseq	r0, r4, #0
     870:	0000cb69 	andeq	ip, r0, r9, ror #22
     874:	03ab0700 			; <UNDEFINED> instruction: 0x03ab0700
     878:	6b020000 	blvs	80880 <__bss_end+0x6ad88>
     87c:	00000077 	andeq	r0, r0, r7, ror r0
     880:	05630700 	strbeq	r0, [r3, #-1792]!	; 0x700
     884:	6c020000 	stcvs	0, cr0, [r2], {-0}
     888:	000000cb 	andeq	r0, r0, fp, asr #1
     88c:	046b0704 	strbteq	r0, [fp], #-1796	; 0x704
     890:	6d020000 	stcvs	0, cr0, [r2, #-0]
     894:	000000cb 	andeq	r0, r0, fp, asr #1
     898:	03bf0708 			; <UNDEFINED> instruction: 0x03bf0708
     89c:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
     8a0:	0000006e 	andeq	r0, r0, lr, rrx
     8a4:	0376070c 	cmneq	r6, #12, 14	; 0x300000
     8a8:	6f020000 	svcvs	0x00020000
     8ac:	0000006e 	andeq	r0, r0, lr, rrx
     8b0:	04080010 	streq	r0, [r8], #-16
     8b4:	000000d1 	ldrdeq	r0, [r0], -r1
     8b8:	00008209 	andeq	r8, r0, r9, lsl #4
     8bc:	06180500 	ldreq	r0, [r8], -r0, lsl #10
     8c0:	71020000 	mrsvc	r0, (UNDEF: 2)
     8c4:	00000082 	andeq	r0, r0, r2, lsl #1
     8c8:	00068206 	andeq	r8, r6, r6, lsl #4
     8cc:	73020c00 	movwvc	r0, #11264	; 0x2c00
     8d0:	00000112 	andeq	r0, r0, r2, lsl r1
     8d4:	0003ab07 	andeq	sl, r3, r7, lsl #22
     8d8:	77750200 	ldrbvc	r0, [r5, -r0, lsl #4]!
     8dc:	00000000 	andeq	r0, r0, r0
     8e0:	00056307 	andeq	r6, r5, r7, lsl #6
     8e4:	cb760200 	blgt	1d810ec <__bss_end+0x1d6b5f4>
     8e8:	04000000 	streq	r0, [r0], #-0
     8ec:	00046b07 	andeq	r6, r4, r7, lsl #22
     8f0:	cb770200 	blgt	1dc10f8 <__bss_end+0x1dab600>
     8f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8f8:	04e40500 	strbteq	r0, [r4], #1280	; 0x500
     8fc:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
     900:	000000e1 	andeq	r0, r0, r1, ror #1
     904:	00069206 	andeq	r9, r6, r6, lsl #4
     908:	7e021400 	cfcpysvc	mvf1, mvf2
     90c:	0000014e 	andeq	r0, r0, lr, asr #2
     910:	00050307 	andeq	r0, r5, r7, lsl #6
     914:	4e800200 	cdpmi	2, 8, cr0, cr0, cr0, {0}
     918:	00000001 	andeq	r0, r0, r1
     91c:	0003a307 	andeq	sl, r3, r7, lsl #6
     920:	53810200 	orrpl	r0, r1, #0, 4
     924:	04000001 	streq	r0, [r0], #-1
     928:	0003b607 	andeq	fp, r3, r7, lsl #12
     92c:	5e820200 	cdppl	2, 8, cr0, cr2, cr0, {0}
     930:	08000001 	stmdaeq	r0, {r0}
     934:	00520900 	subseq	r0, r2, r0, lsl #18
     938:	04080000 	streq	r0, [r8], #-0
     93c:	00000159 	andeq	r0, r0, r9, asr r1
     940:	0000d609 	andeq	sp, r0, r9, lsl #12
     944:	01120900 	tsteq	r2, r0, lsl #18
     948:	31050000 	mrscc	r0, (UNDEF: 5)
     94c:	02000008 	andeq	r0, r0, #8
     950:	00011d83 	andeq	r1, r1, r3, lsl #27
     954:	07d80a00 	ldrbeq	r0, [r8, r0, lsl #20]
     958:	4c010000 	stcmi	0, cr0, [r1], {-0}
     95c:	00010d28 	andeq	r0, r1, r8, lsr #26
     960:	00000064 	andeq	r0, r0, r4, rrx
     964:	01929c01 	orrseq	r9, r2, r1, lsl #24
     968:	300b0000 	andcc	r0, fp, r0
     96c:	01000008 	tsteq	r0, r8
     970:	0001924c 	andeq	r9, r1, ip, asr #4
     974:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     978:	63040800 	movwvs	r0, #18432	; 0x4800
     97c:	0a000001 	beq	988 <_start-0x7678>
     980:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
     984:	0d8c6001 	stceq	0, cr6, [ip, #4]
     988:	00280001 	eoreq	r0, r8, r1
     98c:	9c010000 	stcls	0, cr0, [r1], {-0}
     990:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     994:	0007fa0b 	andeq	pc, r7, fp, lsl #20
     998:	bc600100 	stflte	f0, [r0], #-0
     99c:	02000001 	andeq	r0, r0, #1
     9a0:	08007491 	stmdaeq	r0, {r0, r4, r7, sl, ip, sp, lr}
     9a4:	0000d604 	andeq	sp, r0, r4, lsl #12
     9a8:	07c90a00 	strbeq	r0, [r9, r0, lsl #20]
     9ac:	67010000 	strvs	r0, [r1, -r0]
     9b0:	00010db4 			; <UNDEFINED> instruction: 0x00010db4
     9b4:	00000094 	muleq	r0, r4, r0
     9b8:	02029c01 	andeq	r9, r2, #256	; 0x100
     9bc:	300b0000 	andcc	r0, fp, r0
     9c0:	01000008 	tsteq	r0, r8
     9c4:	00019267 	andeq	r9, r1, r7, ror #4
     9c8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     9cc:	0008370b 	andeq	r3, r8, fp, lsl #14
     9d0:	bc670100 	stflte	f0, [r7], #-0
     9d4:	02000001 	andeq	r0, r0, #1
     9d8:	a30c6891 	movwge	r6, #51345	; 0xc891
     9dc:	01000003 	tsteq	r0, r3
     9e0:	00015369 	andeq	r5, r1, r9, ror #6
     9e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     9e8:	08450a00 	stmdaeq	r5, {r9, fp}^
     9ec:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
     9f0:	00010e48 	andeq	r0, r1, r8, asr #28
     9f4:	000000d4 	ldrdeq	r0, [r0], -r4
     9f8:	02509c01 	subseq	r9, r0, #256	; 0x100
     9fc:	300b0000 	andcc	r0, fp, r0
     a00:	01000008 	tsteq	r0, r8
     a04:	0001927e 	andeq	r9, r1, lr, ror r2
     a08:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a0c:	0008370b 	andeq	r3, r8, fp, lsl #14
     a10:	bc7e0100 	ldflte	f0, [lr], #-0
     a14:	02000001 	andeq	r0, r0, #1
     a18:	1b0c6891 	blne	31ac64 <__bss_end+0x30516c>
     a1c:	01000008 	tsteq	r0, r8
     a20:	00015380 	andeq	r5, r1, r0, lsl #7
     a24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     a28:	0007e80c 	andeq	lr, r7, ip, lsl #16
     a2c:	77810100 	strvc	r0, [r1, r0, lsl #2]
     a30:	02000000 	andeq	r0, r0, #0
     a34:	0d007091 	stceq	0, cr7, [r0, #-580]	; 0xfffffdbc
     a38:	0000080f 	andeq	r0, r0, pc, lsl #16
     a3c:	0f1cb701 	svceq	0x001cb701
     a40:	00940001 	addseq	r0, r4, r1
     a44:	9c010000 	stcls	0, cr0, [r1], {-0}
     a48:	00071b0b 	andeq	r1, r7, fp, lsl #22
     a4c:	bcb70100 	ldflts	f0, [r7]
     a50:	02000001 	andeq	r0, r0, #1
     a54:	300c6c91 	mulcc	ip, r1, ip
     a58:	01000008 	tsteq	r0, r8
     a5c:	000192b9 			; <UNDEFINED> instruction: 0x000192b9
     a60:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     a64:	07180000 	ldreq	r0, [r8, -r0]
     a68:	00040000 	andeq	r0, r4, r0
     a6c:	0000041d 	andeq	r0, r0, sp, lsl r4
     a70:	01740104 	cmneq	r4, r4, lsl #2
     a74:	4c010000 	stcmi	0, cr0, [r1], {-0}
     a78:	b000000b 	andlt	r0, r0, fp
     a7c:	bc00010f 	stflts	f0, [r0], {15}
     a80:	de00000b 	cdple	0, 0, cr0, cr0, cr11, {0}
     a84:	02000007 	andeq	r0, r0, #7
     a88:	0000088d 	andeq	r0, r0, sp, lsl #17
     a8c:	002cd402 	eoreq	sp, ip, r2, lsl #8
     a90:	04030000 	streq	r0, [r3], #-0
     a94:	00070007 	andeq	r0, r7, r7
     a98:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     a9c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     aa0:	0f060103 	svceq	0x00060103
     aa4:	03000007 	movweq	r0, #7
     aa8:	070d0801 	streq	r0, [sp, -r1, lsl #16]
     aac:	02030000 	andeq	r0, r3, #0
     ab0:	00082605 	andeq	r2, r8, r5, lsl #12
     ab4:	07020300 	streq	r0, [r2, -r0, lsl #6]
     ab8:	000000e9 	andeq	r0, r0, r9, ror #1
     abc:	06050403 	streq	r0, [r5], -r3, lsl #8
     ac0:	03000008 	movweq	r0, #8
     ac4:	06fb0704 	ldrbteq	r0, [fp], r4, lsl #14
     ac8:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     acc:	00080105 	andeq	r0, r8, r5, lsl #2
     ad0:	07080300 	streq	r0, [r8, -r0, lsl #6]
     ad4:	000006f6 	strdeq	r0, [r0], -r6
     ad8:	23070403 	movwcs	r0, #29699	; 0x7403
     adc:	05000001 	streq	r0, [r0, #-1]
     ae0:	08010304 	stmdaeq	r1, {r2, r8, r9}
     ae4:	00000716 	andeq	r0, r0, r6, lsl r7
     ae8:	00880406 	addeq	r0, r8, r6, lsl #8
     aec:	02070000 	andeq	r0, r7, #0
     af0:	0000000c 	andeq	r0, r0, ip
     af4:	005d1f03 	subseq	r1, sp, r3, lsl #30
     af8:	ea080000 	b	200b00 <__bss_end+0x1eb008>
     afc:	14000003 	strne	r0, [r0], #-3
     b00:	00dd6904 	sbcseq	r6, sp, r4, lsl #18
     b04:	ab090000 	blge	240b0c <__bss_end+0x22b014>
     b08:	04000003 	streq	r0, [r0], #-3
     b0c:	0000896b 	andeq	r8, r0, fp, ror #18
     b10:	63090000 	movwvs	r0, #36864	; 0x9000
     b14:	04000005 	streq	r0, [r0], #-5
     b18:	0000dd6c 	andeq	sp, r0, ip, ror #26
     b1c:	6b090400 	blvs	241b24 <__bss_end+0x22c02c>
     b20:	04000004 	streq	r0, [r0], #-4
     b24:	0000dd6d 	andeq	sp, r0, sp, ror #26
     b28:	bf090800 	svclt	0x00090800
     b2c:	04000003 	streq	r0, [r0], #-3
     b30:	0000796e 	andeq	r7, r0, lr, ror #18
     b34:	76090c00 	strvc	r0, [r9], -r0, lsl #24
     b38:	04000003 	streq	r0, [r0], #-3
     b3c:	0000796f 	andeq	r7, r0, pc, ror #18
     b40:	06001000 	streq	r1, [r0], -r0
     b44:	0000e304 	andeq	lr, r0, r4, lsl #6
     b48:	00940a00 	addseq	r0, r4, r0, lsl #20
     b4c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     b50:	04000006 	streq	r0, [r0], #-6
     b54:	00009471 	andeq	r9, r0, r1, ror r4
     b58:	06820800 	streq	r0, [r2], r0, lsl #16
     b5c:	040c0000 	streq	r0, [ip], #-0
     b60:	00012473 	andeq	r2, r1, r3, ror r4
     b64:	03ab0900 			; <UNDEFINED> instruction: 0x03ab0900
     b68:	75040000 	strvc	r0, [r4, #-0]
     b6c:	00000089 	andeq	r0, r0, r9, lsl #1
     b70:	05630900 	strbeq	r0, [r3, #-2304]!	; 0x900
     b74:	76040000 	strvc	r0, [r4], -r0
     b78:	000000dd 	ldrdeq	r0, [r0], -sp
     b7c:	046b0904 	strbteq	r0, [fp], #-2308	; 0x904
     b80:	77040000 	strvc	r0, [r4, -r0]
     b84:	000000dd 	ldrdeq	r0, [r0], -sp
     b88:	e4020008 	str	r0, [r2], #-8
     b8c:	04000004 	streq	r0, [r0], #-4
     b90:	0000f379 	andeq	pc, r0, r9, ror r3	; <UNPREDICTABLE>
     b94:	06920800 	ldreq	r0, [r2], r0, lsl #16
     b98:	04140000 	ldreq	r0, [r4], #-0
     b9c:	0001607e 	andeq	r6, r1, lr, ror r0
     ba0:	05030900 	streq	r0, [r3, #-2304]	; 0x900
     ba4:	80040000 	andhi	r0, r4, r0
     ba8:	00000160 	andeq	r0, r0, r0, ror #2
     bac:	03a30900 			; <UNDEFINED> instruction: 0x03a30900
     bb0:	81040000 	mrshi	r0, (UNDEF: 4)
     bb4:	00000165 	andeq	r0, r0, r5, ror #2
     bb8:	03b60904 			; <UNDEFINED> instruction: 0x03b60904
     bbc:	82040000 	andhi	r0, r4, #0
     bc0:	00000170 	andeq	r0, r0, r0, ror r1
     bc4:	5d0a0008 	stcpl	0, cr0, [sl, #-32]	; 0xffffffe0
     bc8:	06000000 	streq	r0, [r0], -r0
     bcc:	00016b04 	andeq	r6, r1, r4, lsl #22
     bd0:	00e80a00 	rsceq	r0, r8, r0, lsl #20
     bd4:	240a0000 	strcs	r0, [sl], #-0
     bd8:	02000001 	andeq	r0, r0, #1
     bdc:	00000831 	andeq	r0, r0, r1, lsr r8
     be0:	012f8304 	teqeq	pc, r4, lsl #6
     be4:	0b080000 	bleq	200bec <__bss_end+0x1eb0f4>
     be8:	08000009 	stmdaeq	r0, {r0, r3}
     bec:	01a56805 			; <UNDEFINED> instruction: 0x01a56805
     bf0:	4c090000 	stcmi	0, cr0, [r9], {-0}
     bf4:	05000009 	streq	r0, [r0, #-9]
     bf8:	0000566a 	andeq	r5, r0, sl, ror #12
     bfc:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
     c00:	05000009 	streq	r0, [r0, #-9]
     c04:	0000896b 	andeq	r8, r0, fp, ror #18
     c08:	02000400 	andeq	r0, r0, #0, 8
     c0c:	000009a8 	andeq	r0, r0, r8, lsr #19
     c10:	01806c05 	orreq	r6, r0, r5, lsl #24
     c14:	4f080000 	svcmi	0x00080000
     c18:	4c00000a 	stcmi	0, cr0, [r0], {10}
     c1c:	02417901 	subeq	r7, r1, #16384	; 0x4000
     c20:	72090000 	andvc	r0, r9, #0
     c24:	01000009 	tsteq	r0, r9
     c28:	0002417b 	andeq	r4, r2, fp, ror r1
     c2c:	0d090000 	stceq	0, cr0, [r9, #-0]
     c30:	0100000b 	tsteq	r0, fp
     c34:	0002417c 	andeq	r4, r2, ip, ror r1
     c38:	68090400 	stmdavs	r9, {sl}
     c3c:	01000009 	tsteq	r0, r9
     c40:	0002417e 	andeq	r4, r2, lr, ror r1
     c44:	41090800 	tstmi	r9, r0, lsl #16
     c48:	01000009 	tsteq	r0, r9
     c4c:	0002417f 	andeq	r4, r2, pc, ror r1
     c50:	1e090c00 	cdpne	12, 0, cr0, cr9, cr0, {0}
     c54:	0100000b 	tsteq	r0, fp
     c58:	00017581 	andeq	r7, r1, r1, lsl #11
     c5c:	f7091000 			; <UNDEFINED> instruction: 0xf7091000
     c60:	01000009 	tsteq	r0, r9
     c64:	00017582 	andeq	r7, r1, r2, lsl #11
     c68:	ba092400 	blt	249c70 <__bss_end+0x234178>
     c6c:	0100000a 	tsteq	r0, sl
     c70:	00016084 	andeq	r6, r1, r4, lsl #1
     c74:	e0093800 	and	r3, r9, r0, lsl #16
     c78:	01000009 	tsteq	r0, r9
     c7c:	00005d85 	andeq	r5, r0, r5, lsl #27
     c80:	d8093c00 	stmdale	r9, {sl, fp, ip, sp}
     c84:	0100000b 	tsteq	r0, fp
     c88:	00005d86 	andeq	r5, r0, r6, lsl #27
     c8c:	05094000 	streq	r4, [r9, #-0]
     c90:	0100000b 	tsteq	r0, fp
     c94:	00024788 	andeq	r4, r2, r8, lsl #15
     c98:	78094400 	stmdavc	r9, {sl, lr}
     c9c:	0100000a 	tsteq	r0, sl
     ca0:	00024789 	andeq	r4, r2, r9, lsl #15
     ca4:	06004800 	streq	r4, [r0], -r0, lsl #16
     ca8:	00003a04 	andeq	r3, r0, r4, lsl #20
     cac:	00560a00 	subseq	r0, r6, r0, lsl #20
     cb0:	3a020000 	bcc	80cb8 <__bss_end+0x6b1c0>
     cb4:	0100000a 	tsteq	r0, sl
     cb8:	0001b090 	muleq	r1, r0, r0
     cbc:	09be0200 	ldmibeq	lr!, {r9}
     cc0:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
     cc4:	00000262 	andeq	r0, r0, r2, ror #4
     cc8:	024c0406 	subeq	r0, ip, #100663296	; 0x6000000
     ccc:	d50b0000 	strle	r0, [fp, #-0]
     cd0:	0100000a 	tsteq	r0, sl
     cd4:	00560117 	subseq	r0, r6, r7, lsl r1
     cd8:	0fb00000 	svceq	0x00b00000
     cdc:	01140001 	tsteq	r4, r1
     ce0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ce4:	000002a1 	andeq	r0, r0, r1, lsr #5
     ce8:	000b440c 	andeq	r4, fp, ip, lsl #8
     cec:	01170100 	tsteq	r7, r0, lsl #2
     cf0:	00000257 	andeq	r0, r0, r7, asr r2
     cf4:	0c749102 	ldfeqp	f1, [r4], #-8
     cf8:	000008ee 	andeq	r0, r0, lr, ror #17
     cfc:	56011701 	strpl	r1, [r1], -r1, lsl #14
     d00:	02000000 	andeq	r0, r0, #0
     d04:	0b007091 	bleq	1cf50 <__bss_end+0x7458>
     d08:	00000a80 	andeq	r0, r0, r0, lsl #21
     d0c:	57014201 	strpl	r4, [r1, -r1, lsl #4]
     d10:	c4000002 	strgt	r0, [r0], #-2
     d14:	c8000110 	stmdagt	r0, {r4, r8}
     d18:	01000000 	mrseq	r0, (UNDEF: 0)
     d1c:	0003169c 	muleq	r3, ip, r6
     d20:	09e90c00 	stmibeq	r9!, {sl, fp}^
     d24:	42010000 	andmi	r0, r1, #0
     d28:	00005d01 	andeq	r5, r0, r1, lsl #26
     d2c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     d30:	000bd80c 	andeq	sp, fp, ip, lsl #16
     d34:	01420100 	mrseq	r0, (UNDEF: 82)
     d38:	0000005d 	andeq	r0, r0, sp, asr r0
     d3c:	0c609102 	stfeqp	f1, [r0], #-8
     d40:	00000851 	andeq	r0, r0, r1, asr r8
     d44:	41014201 	tstmi	r1, r1, lsl #4
     d48:	02000000 	andeq	r0, r0, #0
     d4c:	ed0d5f91 	stc	15, cr5, [sp, #-580]	; 0xfffffdbc
     d50:	01000008 	tsteq	r0, r8
     d54:	02620144 	rsbeq	r0, r2, #68, 2
     d58:	91020000 	mrsls	r0, (UNDEF: 2)
     d5c:	0b320d70 	bleq	c84324 <__bss_end+0xc6e82c>
     d60:	45010000 	strmi	r0, [r1, #-0]
     d64:	00002101 	andeq	r2, r0, r1, lsl #2
     d68:	6c910200 	lfmvs	f0, 4, [r1], {0}
     d6c:	0009b60d 	andeq	fp, r9, sp, lsl #12
     d70:	01460100 	mrseq	r0, (UNDEF: 86)
     d74:	00000257 	andeq	r0, r0, r7, asr r2
     d78:	00749102 	rsbseq	r9, r4, r2, lsl #2
     d7c:	0009960b 	andeq	r9, r9, fp, lsl #12
     d80:	02410100 	subeq	r0, r1, #0, 2
     d84:	00000056 	andeq	r0, r0, r6, asr r0
     d88:	0001118c 	andeq	r1, r1, ip, lsl #3
     d8c:	000001ac 	andeq	r0, r0, ip, lsr #3
     d90:	038b9c01 	orreq	r9, fp, #256	; 0x100
     d94:	440c0000 	strmi	r0, [ip], #-0
     d98:	0100000b 	tsteq	r0, fp
     d9c:	02570241 	subseq	r0, r7, #268435460	; 0x10000004
     da0:	91020000 	mrsls	r0, (UNDEF: 2)
     da4:	0a2c0c64 	beq	b03f3c <__bss_end+0xaee444>
     da8:	41010000 	mrsmi	r0, (UNDEF: 1)
     dac:	00038b02 	andeq	r8, r3, r2, lsl #22
     db0:	60910200 	addsvs	r0, r1, r0, lsl #4
     db4:	00124b0c 	andseq	r4, r2, ip, lsl #22
     db8:	02410100 	subeq	r0, r1, #0, 2
     dbc:	00000089 	andeq	r0, r0, r9, lsl #1
     dc0:	0c5c9102 	ldfeqp	f1, [ip], {2}
     dc4:	00000ae8 	andeq	r0, r0, r8, ror #21
     dc8:	56024101 	strpl	r4, [r2], -r1, lsl #2
     dcc:	02000000 	andeq	r0, r0, #0
     dd0:	410d5891 			; <UNDEFINED> instruction: 0x410d5891
     dd4:	0100000a 	tsteq	r0, sl
     dd8:	00560243 	subseq	r0, r6, r3, asr #4
     ddc:	91020000 	mrsls	r0, (UNDEF: 2)
     de0:	0c800d74 	stceq	13, cr0, [r0], {116}	; 0x74
     de4:	44010000 	strmi	r0, [r1], #-0
     de8:	0001a502 	andeq	sl, r1, r2, lsl #10
     dec:	6c910200 	lfmvs	f0, 4, [r1], {0}
     df0:	00820e00 	addeq	r0, r2, r0, lsl #28
     df4:	5d0b0000 	stcpl	0, cr0, [fp, #-0]
     df8:	01000008 	tsteq	r0, r8
     dfc:	00560386 	subseq	r0, r6, r6, lsl #7
     e00:	13380000 	teqne	r8, #0
     e04:	00dc0001 	sbcseq	r0, ip, r1
     e08:	9c010000 	stcls	0, cr0, [r1], {-0}
     e0c:	00000405 	andeq	r0, r0, r5, lsl #8
     e10:	000b440c 	andeq	r4, fp, ip, lsl #8
     e14:	03860100 	orreq	r0, r6, #0, 2
     e18:	00000257 	andeq	r0, r0, r7, asr r2
     e1c:	0c6c9102 	stfeqp	f1, [ip], #-8
     e20:	00000a2c 	andeq	r0, r0, ip, lsr #20
     e24:	8b038601 	blhi	e2630 <__bss_end+0xccb38>
     e28:	02000003 	andeq	r0, r0, #3
     e2c:	940c6891 	strls	r6, [ip], #-2193	; 0x891
     e30:	01000008 	tsteq	r0, r8
     e34:	04050386 	streq	r0, [r5], #-902	; 0x386
     e38:	91020000 	mrsls	r0, (UNDEF: 2)
     e3c:	0ae80c64 	beq	ffa03fd4 <_estack+0xf79f3fd4>
     e40:	86010000 	strhi	r0, [r1], -r0
     e44:	00005603 	andeq	r5, r0, r3, lsl #12
     e48:	60910200 	addsvs	r0, r1, r0, lsl #4
     e4c:	0009b60d 	andeq	fp, r9, sp, lsl #12
     e50:	03880100 	orreq	r0, r8, #0, 2
     e54:	00000056 	andeq	r0, r0, r6, asr r0
     e58:	0d749102 	ldfeqp	f1, [r4, #-8]!
     e5c:	00000a94 	muleq	r0, r4, sl
     e60:	5d038901 	stcpl	9, cr8, [r3, #-4]
     e64:	02000000 	andeq	r0, r0, #0
     e68:	06007091 			; <UNDEFINED> instruction: 0x06007091
     e6c:	00005604 	andeq	r5, r0, r4, lsl #12
     e70:	09150b00 	ldmdbeq	r5, {r8, r9, fp}
     e74:	c1010000 	mrsgt	r0, (UNDEF: 1)
     e78:	00005603 	andeq	r5, r0, r3, lsl #12
     e7c:	01141400 	tsteq	r4, r0, lsl #8
     e80:	00020c00 	andeq	r0, r2, r0, lsl #24
     e84:	8f9c0100 	svchi	0x009c0100
     e88:	0c000004 	stceq	0, cr0, [r0], {4}
     e8c:	00000b44 	andeq	r0, r0, r4, asr #22
     e90:	5703c101 	strpl	ip, [r3, -r1, lsl #2]
     e94:	02000002 	andeq	r0, r0, #2
     e98:	cc0c6491 	cfstrsgt	mvf6, [ip], {145}	; 0x91
     e9c:	0100000a 	tsteq	r0, sl
     ea0:	048f03c1 	streq	r0, [pc], #961	; ea8 <_start-0x7158>
     ea4:	91020000 	mrsls	r0, (UNDEF: 2)
     ea8:	124b0c60 	subne	r0, fp, #96, 24	; 0x6000
     eac:	c1010000 	mrsgt	r0, (UNDEF: 1)
     eb0:	00008903 	andeq	r8, r0, r3, lsl #18
     eb4:	5c910200 	lfmpl	f0, 4, [r1], {0}
     eb8:	0009890c 	andeq	r8, r9, ip, lsl #18
     ebc:	03c10100 	biceq	r0, r1, #0, 2
     ec0:	00000056 	andeq	r0, r0, r6, asr r0
     ec4:	0d589102 	ldfeqp	f1, [r8, #-8]
     ec8:	00000a41 	andeq	r0, r0, r1, asr #20
     ecc:	5603c301 	strpl	ip, [r3], -r1, lsl #6
     ed0:	02000000 	andeq	r0, r0, #0
     ed4:	800d7491 	mulhi	sp, r1, r4
     ed8:	0100000c 	tsteq	r0, ip
     edc:	01a503c4 			; <UNDEFINED> instruction: 0x01a503c4
     ee0:	91020000 	mrsls	r0, (UNDEF: 2)
     ee4:	092a0d68 	stmdbeq	sl!, {r3, r5, r6, r8, sl, fp}
     ee8:	c5010000 	strgt	r0, [r1, #-0]
     eec:	00024103 	andeq	r4, r2, r3, lsl #2
     ef0:	70910200 	addsvc	r0, r1, r0, lsl #4
     ef4:	00790e00 	rsbseq	r0, r9, r0, lsl #28
     ef8:	cb0b0000 	blgt	2c0f00 <__bss_end+0x2ab408>
     efc:	01000009 	tsteq	r0, r9
     f00:	00560456 	subseq	r0, r6, r6, asr r4
     f04:	16200000 	strtne	r0, [r0], -r0
     f08:	00e00001 	rsceq	r0, r0, r1
     f0c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f10:	000004fa 	strdeq	r0, [r0], -sl
     f14:	000b440c 	andeq	r4, fp, ip, lsl #8
     f18:	04560100 	ldrbeq	r0, [r6], #-256	; 0x100
     f1c:	00000257 	andeq	r0, r0, r7, asr r2
     f20:	0c6c9102 	stfeqp	f1, [ip], #-8
     f24:	00000acc 	andeq	r0, r0, ip, asr #21
     f28:	8f045601 	svchi	0x00045601
     f2c:	02000004 	andeq	r0, r0, #4
     f30:	940c6891 	strls	r6, [ip], #-2193	; 0x891
     f34:	01000008 	tsteq	r0, r8
     f38:	04050456 	streq	r0, [r5], #-1110	; 0x456
     f3c:	91020000 	mrsls	r0, (UNDEF: 2)
     f40:	09b60d64 	ldmibeq	r6!, {r2, r5, r6, r8, sl, fp}
     f44:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
     f48:	00005604 	andeq	r5, r0, r4, lsl #12
     f4c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f50:	000a940d 	andeq	r9, sl, sp, lsl #8
     f54:	04590100 	ldrbeq	r0, [r9], #-256	; 0x100
     f58:	0000005d 	andeq	r0, r0, sp, asr r0
     f5c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     f60:	0008760b 	andeq	r7, r8, fp, lsl #12
     f64:	048f0100 	streq	r0, [pc], #256	; f6c <_start-0x7094>
     f68:	0000005d 	andeq	r0, r0, sp, asr r0
     f6c:	00011700 	andeq	r1, r1, r0, lsl #14
     f70:	00000034 	andeq	r0, r0, r4, lsr r0
     f74:	05339c01 	ldreq	r9, [r3, #-3073]!	; 0xc01
     f78:	440c0000 	strmi	r0, [ip], #-0
     f7c:	0100000b 	tsteq	r0, fp
     f80:	0533048f 	ldreq	r0, [r3, #-1167]!	; 0x48f
     f84:	91020000 	mrsls	r0, (UNDEF: 2)
     f88:	09b50d6c 	ldmibeq	r5!, {r2, r3, r5, r6, r8, sl, fp}
     f8c:	91010000 	mrsls	r0, (UNDEF: 1)
     f90:	00005d04 	andeq	r5, r0, r4, lsl #26
     f94:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     f98:	02570e00 	subseq	r0, r7, #0, 28
     f9c:	0e0f0000 	cdpeq	0, 0, cr0, cr15, cr0, {0}
     fa0:	0100000a 	tsteq	r0, sl
     fa4:	005d049d 			; <UNDEFINED> instruction: 0x005d049d
     fa8:	17340000 	ldrne	r0, [r4, -r0]!
     fac:	00300001 	eorseq	r0, r0, r1
     fb0:	9c010000 	stcls	0, cr0, [r1], {-0}
     fb4:	00000571 	andeq	r0, r0, r1, ror r5
     fb8:	000b440c 	andeq	r4, fp, ip, lsl #8
     fbc:	049d0100 	ldreq	r0, [sp], #256	; 0x100
     fc0:	00000533 	andeq	r0, r0, r3, lsr r5
     fc4:	0d6c9102 	stfeqp	f1, [ip, #-8]!
     fc8:	000009b5 			; <UNDEFINED> instruction: 0x000009b5
     fcc:	5d049f01 	stcpl	15, cr9, [r4, #-4]
     fd0:	02000000 	andeq	r0, r0, #0
     fd4:	10007491 	mulne	r0, r1, r4
     fd8:	0000095b 	andeq	r0, r0, fp, asr r9
     fdc:	6404a901 	strvs	sl, [r4], #-2305	; 0x901
     fe0:	30000117 	andcc	r0, r0, r7, lsl r1
     fe4:	01000000 	mrseq	r0, (UNDEF: 0)
     fe8:	0005979c 	muleq	r5, ip, r7
     fec:	0b440c00 	bleq	1103ff4 <__bss_end+0x10ee4fc>
     ff0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
     ff4:	00025704 	andeq	r5, r2, r4, lsl #14
     ff8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     ffc:	08f81100 	ldmeq	r8!, {r8, ip}^
    1000:	d2010000 	andle	r0, r1, #0
    1004:	01179404 	tsteq	r7, r4, lsl #8
    1008:	00013000 	andeq	r3, r1, r0
    100c:	db9c0100 	blle	fe701414 <_estack+0xf66f1414>
    1010:	0c000005 	stceq	0, cr0, [r0], {5}
    1014:	00000b44 	andeq	r0, r0, r4, asr #22
    1018:	6204d201 	andvs	sp, r4, #268435456	; 0x10000000
    101c:	02000002 	andeq	r0, r0, #2
    1020:	2c0c7491 	cfstrscs	mvf7, [ip], {145}	; 0x91
    1024:	0100000a 	tsteq	r0, sl
    1028:	008204d2 	ldrdeq	r0, [r2], r2
    102c:	91020000 	mrsls	r0, (UNDEF: 2)
    1030:	0b140c70 	bleq	5041f8 <__bss_end+0x4ee700>
    1034:	d2010000 	andle	r0, r1, #0
    1038:	00005604 	andeq	r5, r0, r4, lsl #12
    103c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1040:	08d81100 	ldmeq	r8, {r8, ip}^
    1044:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    1048:	0118c404 	tsteq	r8, r4, lsl #8
    104c:	00009000 	andeq	r9, r0, r0
    1050:	109c0100 	addsne	r0, ip, r0, lsl #2
    1054:	0c000006 	stceq	0, cr0, [r0], {6}
    1058:	00000b44 	andeq	r0, r0, r4, asr #22
    105c:	1004f801 	andne	pc, r4, r1, lsl #16
    1060:	02000006 	andeq	r0, r0, #6
    1064:	cc0c7491 	cfstrsgt	mvf7, [ip], {145}	; 0x91
    1068:	0100000a 	tsteq	r0, sl
    106c:	008204f8 	strdeq	r0, [r2], r8
    1070:	91020000 	mrsls	r0, (UNDEF: 2)
    1074:	620e0070 	andvs	r0, lr, #112	; 0x70
    1078:	11000002 	tstne	r0, r2
    107c:	00000af6 	strdeq	r0, [r0], -r6
    1080:	54050601 	strpl	r0, [r5], #-1537	; 0x601
    1084:	00000119 	andeq	r0, r0, r9, lsl r1
    1088:	01000001 	tsteq	r0, r1
    108c:	00063b9c 	muleq	r6, ip, fp
    1090:	0b440c00 	bleq	1104098 <__bss_end+0x10ee5a0>
    1094:	06010000 	streq	r0, [r1], -r0
    1098:	00025705 	andeq	r5, r2, r5, lsl #14
    109c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10a0:	08c81200 	stmiaeq	r8, {r9, ip}^
    10a4:	46010000 	strmi	r0, [r1], -r0
    10a8:	00005605 	andeq	r5, r0, r5, lsl #12
    10ac:	011a5400 	tsteq	sl, r0, lsl #8
    10b0:	00004400 	andeq	r4, r0, r0, lsl #8
    10b4:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    10b8:	0c000006 	stceq	0, cr0, [r0], {6}
    10bc:	00000b44 	andeq	r0, r0, r4, asr #22
    10c0:	33054601 	movwcc	r4, #22017	; 0x5601
    10c4:	02000005 	andeq	r0, r0, #5
    10c8:	b60d6c91 			; <UNDEFINED> instruction: 0xb60d6c91
    10cc:	01000009 	tsteq	r0, r9
    10d0:	00560548 	subseq	r0, r6, r8, asr #10
    10d4:	91020000 	mrsls	r0, (UNDEF: 2)
    10d8:	ae0f0074 	mcrge	0, 0, r0, cr15, cr4, {3}
    10dc:	01000008 	tsteq	r0, r8
    10e0:	00560552 	subseq	r0, r6, r2, asr r5
    10e4:	1a980000 	bne	fe6010ec <_estack+0xf65f10ec>
    10e8:	00400001 	subeq	r0, r0, r1
    10ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    10f0:	000006ad 	andeq	r0, r0, sp, lsr #13
    10f4:	000b440c 	andeq	r4, fp, ip, lsl #8
    10f8:	05520100 	ldrbeq	r0, [r2, #-256]	; 0x100
    10fc:	00000533 	andeq	r0, r0, r3, lsr r5
    1100:	0d6c9102 	stfeqp	f1, [ip, #-8]!
    1104:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    1108:	56055401 	strpl	r5, [r5], -r1, lsl #8
    110c:	02000000 	andeq	r0, r0, #0
    1110:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
    1114:	00000aab 	andeq	r0, r0, fp, lsr #21
    1118:	56055d01 	strpl	r5, [r5], -r1, lsl #26
    111c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1120:	4c00011a 	stfmis	f0, [r0], {26}
    1124:	01000000 	mrseq	r0, (UNDEF: 0)
    1128:	0006e69c 	muleq	r6, ip, r6
    112c:	0b440c00 	bleq	1104134 <__bss_end+0x10ee63c>
    1130:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1134:	00053305 	andeq	r3, r5, r5, lsl #6
    1138:	6c910200 	lfmvs	f0, 4, [r1], {0}
    113c:	0009b60d 	andeq	fp, r9, sp, lsl #12
    1140:	055f0100 	ldrbeq	r0, [pc, #-256]	; 1048 <_start-0x6fb8>
    1144:	00000056 	andeq	r0, r0, r6, asr r0
    1148:	00749102 	rsbseq	r9, r4, r2, lsl #2
    114c:	000a5f13 	andeq	r5, sl, r3, lsl pc
    1150:	05690100 	strbeq	r0, [r9, #-256]!	; 0x100
    1154:	00000056 	andeq	r0, r0, r6, asr r0
    1158:	00011b24 	andeq	r1, r1, r4, lsr #22
    115c:	00000048 	andeq	r0, r0, r8, asr #32
    1160:	440c9c01 	strmi	r9, [ip], #-3073	; 0xc01
    1164:	0100000b 	tsteq	r0, fp
    1168:	05330569 	ldreq	r0, [r3, #-1385]!	; 0x569
    116c:	91020000 	mrsls	r0, (UNDEF: 2)
    1170:	09b60d6c 	ldmibeq	r6!, {r2, r3, r5, r6, r8, sl, fp}
    1174:	6b010000 	blvs	4117c <__bss_end+0x2b684>
    1178:	00005605 	andeq	r5, r0, r5, lsl #12
    117c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1180:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
    1184:	00040000 	andeq	r0, r4, r0
    1188:	0000054f 	andeq	r0, r0, pc, asr #10
    118c:	01740104 	cmneq	r4, r4, lsl #2
    1190:	97010000 	strls	r0, [r1, -r0]
    1194:	cd00000f 	stcgt	0, cr0, [r0, #-60]	; 0xffffffc4
    1198:	6c00000e 	stcvs	0, cr0, [r0], {14}
    119c:	dc00011b 	stfles	f0, [r0], {27}
    11a0:	7f000018 	svcvc	0x00000018
    11a4:	0200000b 	andeq	r0, r0, #11
    11a8:	0000088d 	andeq	r0, r0, sp, lsl #17
    11ac:	0030d402 	eorseq	sp, r0, r2, lsl #8
    11b0:	04030000 	streq	r0, [r3], #-0
    11b4:	00070007 	andeq	r0, r7, r7
    11b8:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    11bc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    11c0:	01030074 	tsteq	r3, r4, ror r0
    11c4:	00070f06 	andeq	r0, r7, r6, lsl #30
    11c8:	08010300 	stmdaeq	r1, {r8, r9}
    11cc:	0000070d 	andeq	r0, r0, sp, lsl #14
    11d0:	26050203 	strcs	r0, [r5], -r3, lsl #4
    11d4:	03000008 	movweq	r0, #8
    11d8:	00e90702 	rsceq	r0, r9, r2, lsl #14
    11dc:	04030000 	streq	r0, [r3], #-0
    11e0:	00080605 	andeq	r0, r8, r5, lsl #12
    11e4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    11e8:	000006fb 	strdeq	r0, [r0], -fp
    11ec:	01050803 	tsteq	r5, r3, lsl #16
    11f0:	03000008 	movweq	r0, #8
    11f4:	06f60708 	ldrbteq	r0, [r6], r8, lsl #14
    11f8:	04030000 	streq	r0, [r3], #-0
    11fc:	00012307 	andeq	r2, r1, r7, lsl #6
    1200:	08010300 	stmdaeq	r1, {r8, r9}
    1204:	00000716 	andeq	r0, r0, r6, lsl r7
    1208:	0000fc02 	andeq	pc, r0, r2, lsl #24
    120c:	91470300 	mrsls	r0, (UNDEF: 119)
    1210:	06000000 	streq	r0, [r0], -r0
    1214:	00009704 	andeq	r9, r0, r4, lsl #14
    1218:	00a20700 	adceq	r0, r2, r0, lsl #14
    121c:	37080000 	strcc	r0, [r8, -r0]
    1220:	00000000 	andeq	r0, r0, r0
    1224:	00000c02 	andeq	r0, r0, r2, lsl #24
    1228:	631f0400 	tstvs	pc, #0, 8
    122c:	02000000 	andeq	r0, r0, #0
    1230:	00000dda 	ldrdeq	r0, [r0], -sl
    1234:	00b85705 	adcseq	r5, r8, r5, lsl #14
    1238:	04060000 	streq	r0, [r6], #-0
    123c:	000000be 	strheq	r0, [r0], -lr
    1240:	00005c09 	andeq	r5, r0, r9, lsl #24
    1244:	0000cd00 	andeq	ip, r0, r0, lsl #26
    1248:	00370800 	eorseq	r0, r7, r0, lsl #16
    124c:	0a000000 	beq	1254 <_start-0x6dac>
    1250:	000003ea 	andeq	r0, r0, sl, ror #7
    1254:	16690614 			; <UNDEFINED> instruction: 0x16690614
    1258:	0b000001 	bleq	1264 <_start-0x6d9c>
    125c:	000003ab 	andeq	r0, r0, fp, lsr #7
    1260:	00a26b06 	adceq	r6, r2, r6, lsl #22
    1264:	0b000000 	bleq	126c <_start-0x6d94>
    1268:	00000563 	andeq	r0, r0, r3, ror #10
    126c:	01166c06 	tsteq	r6, r6, lsl #24
    1270:	0b040000 	bleq	101278 <__bss_end+0xeb780>
    1274:	0000046b 	andeq	r0, r0, fp, ror #8
    1278:	01166d06 	tsteq	r6, r6, lsl #26
    127c:	0b080000 	bleq	201284 <__bss_end+0x1eb78c>
    1280:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    1284:	00376e06 	eorseq	r6, r7, r6, lsl #28
    1288:	0b0c0000 	bleq	301290 <__bss_end+0x2eb798>
    128c:	00000376 	andeq	r0, r0, r6, ror r3
    1290:	00376f06 	eorseq	r6, r7, r6, lsl #30
    1294:	00100000 	andseq	r0, r0, r0
    1298:	011c0406 	tsteq	ip, r6, lsl #8
    129c:	cd0c0000 	stcgt	0, cr0, [ip, #-0]
    12a0:	02000000 	andeq	r0, r0, #0
    12a4:	00000618 	andeq	r0, r0, r8, lsl r6
    12a8:	00cd7106 	sbceq	r7, sp, r6, lsl #2
    12ac:	820a0000 	andhi	r0, sl, #0
    12b0:	0c000006 	stceq	0, cr0, [r0], {6}
    12b4:	015d7306 	cmpeq	sp, r6, lsl #6
    12b8:	ab0b0000 	blge	2c12c0 <__bss_end+0x2ab7c8>
    12bc:	06000003 	streq	r0, [r0], -r3
    12c0:	0000a275 	andeq	sl, r0, r5, ror r2
    12c4:	630b0000 	movwvs	r0, #45056	; 0xb000
    12c8:	06000005 	streq	r0, [r0], -r5
    12cc:	00011676 	andeq	r1, r1, r6, ror r6
    12d0:	6b0b0400 	blvs	2c22d8 <__bss_end+0x2ac7e0>
    12d4:	06000004 	streq	r0, [r0], -r4
    12d8:	00011677 	andeq	r1, r1, r7, ror r6
    12dc:	02000800 	andeq	r0, r0, #0, 16
    12e0:	000004e4 	andeq	r0, r0, r4, ror #9
    12e4:	012c7906 	teqeq	ip, r6, lsl #18
    12e8:	920a0000 	andls	r0, sl, #0
    12ec:	14000006 	strne	r0, [r0], #-6
    12f0:	01997e06 	orrseq	r7, r9, r6, lsl #28
    12f4:	030b0000 	movweq	r0, #45056	; 0xb000
    12f8:	06000005 	streq	r0, [r0], -r5
    12fc:	00019980 	andeq	r9, r1, r0, lsl #19
    1300:	a30b0000 	movwge	r0, #45056	; 0xb000
    1304:	06000003 	streq	r0, [r0], -r3
    1308:	00019e81 	andeq	r9, r1, r1, lsl #29
    130c:	b60b0400 	strlt	r0, [fp], -r0, lsl #8
    1310:	06000003 	streq	r0, [r0], -r3
    1314:	0001a982 	andeq	sl, r1, r2, lsl #19
    1318:	0c000800 	stceq	8, cr0, [r0], {-0}
    131c:	00000063 	andeq	r0, r0, r3, rrx
    1320:	01a40406 			; <UNDEFINED> instruction: 0x01a40406
    1324:	210c0000 	mrscs	r0, (UNDEF: 12)
    1328:	0c000001 	stceq	0, cr0, [r0], {1}
    132c:	0000015d 	andeq	r0, r0, sp, asr r1
    1330:	00083102 	andeq	r3, r8, r2, lsl #2
    1334:	68830600 	stmvs	r3, {r9, sl}
    1338:	02000001 	andeq	r0, r0, #1
    133c:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    1340:	00376307 	eorseq	r6, r7, r7, lsl #6
    1344:	0b0a0000 	bleq	28134c <__bss_end+0x26b854>
    1348:	08000009 	stmdaeq	r0, {r0, r3}
    134c:	01e96807 	mvneq	r6, r7, lsl #16
    1350:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    1354:	07000009 	streq	r0, [r0, -r9]
    1358:	00005c6a 	andeq	r5, r0, sl, ror #24
    135c:	790b0000 	stmdbvc	fp, {}	; <UNPREDICTABLE>
    1360:	07000009 	streq	r0, [r0, -r9]
    1364:	0000a26b 	andeq	sl, r0, fp, ror #4
    1368:	02000400 	andeq	r0, r0, #0, 8
    136c:	000009a8 	andeq	r0, r0, r8, lsr #19
    1370:	01c46c07 	biceq	r6, r4, r7, lsl #24
    1374:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    1378:	0c00000e 	stceq	0, cr0, [r0], {14}
    137c:	02257107 	eoreq	r7, r5, #-1073741823	; 0xc0000001
    1380:	ba0b0000 	blt	2c1388 <__bss_end+0x2ab890>
    1384:	07000012 	smladeq	r0, r2, r0, r0
    1388:	00003773 	andeq	r3, r0, r3, ror r7
    138c:	870b0000 	strhi	r0, [fp, -r0]
    1390:	0700000f 	streq	r0, [r0, -pc]
    1394:	00006374 	andeq	r6, r0, r4, ror r3
    1398:	e70b0400 	str	r0, [fp, -r0, lsl #8]
    139c:	07000010 	smladeq	r0, r0, r0, r0
    13a0:	00006375 	andeq	r6, r0, r5, ror r3
    13a4:	02000800 	andeq	r0, r0, #0, 16
    13a8:	0000110d 	andeq	r1, r0, sp, lsl #2
    13ac:	01f47607 	mvnseq	r7, r7, lsl #12
    13b0:	350d0000 	strcc	r0, [sp, #-0]
    13b4:	06000002 	streq	r0, [r0], -r2
    13b8:	00023b04 	andeq	r3, r2, r4, lsl #22
    13bc:	00400d00 	subeq	r0, r0, r0, lsl #26
    13c0:	04060000 	streq	r0, [r6], #-0
    13c4:	00000063 	andeq	r0, r0, r3, rrx
    13c8:	000cd90a 	andeq	sp, ip, sl, lsl #18
    13cc:	66014800 	strvs	r4, [r1], -r0, lsl #16
    13d0:	000002a7 	andeq	r0, r0, r7, lsr #5
    13d4:	00013f0b 	andeq	r3, r1, fp, lsl #30
    13d8:	a7680100 	strbge	r0, [r8, -r0, lsl #2]!
    13dc:	00000002 	andeq	r0, r0, r2
    13e0:	0004010b 	andeq	r0, r4, fp, lsl #2
    13e4:	216e0100 	cmncs	lr, r0, lsl #2
    13e8:	04000001 	streq	r0, [r0], #-1
    13ec:	0006c20b 	andeq	ip, r6, fp, lsl #4
    13f0:	216f0100 	cmncs	pc, r0, lsl #2
    13f4:	18000001 	stmdane	r0, {r0}
    13f8:	00052c0b 	andeq	r2, r5, fp, lsl #24
    13fc:	63700100 	cmnvs	r0, #0, 2
    1400:	2c000000 	stccs	0, cr0, [r0], {-0}
    1404:	000e6f0b 	andeq	r6, lr, fp, lsl #30
    1408:	40710100 	rsbsmi	r0, r1, r0, lsl #2
    140c:	30000002 	andcc	r0, r0, r2
    1410:	0012240b 	andseq	r2, r2, fp, lsl #8
    1414:	ad720100 	ldfgee	f0, [r2, #-0]
    1418:	34000002 	strcc	r0, [r0], #-2
    141c:	000c520b 	andeq	r5, ip, fp, lsl #4
    1420:	ad860100 	stfges	f0, [r6]
    1424:	44000000 	strmi	r0, [r0], #-0
    1428:	99040600 	stmdbls	r4, {r9, sl}
    142c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1430:	00000040 	andeq	r0, r0, r0, asr #32
    1434:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
    1438:	0000780f 	andeq	r7, r0, pc, lsl #16
    143c:	02000f00 	andeq	r0, r0, #0, 30
    1440:	00000dd3 	ldrdeq	r0, [r0], -r3
    1444:	02469301 	subeq	r9, r6, #67108864	; 0x4000000
    1448:	5c100000 	ldcpl	0, cr0, [r0], {-0}
    144c:	0100000c 	tsteq	r0, ip
    1450:	005c019b 			; <UNDEFINED> instruction: 0x005c019b
    1454:	1b6c0000 	blne	1b0145c <__bss_end+0x1aeb964>
    1458:	02480001 	subeq	r0, r8, #1
    145c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1460:	00000392 	muleq	r0, r2, r3
    1464:	000f4111 	andeq	r4, pc, r1, lsl r1	; <UNPREDICTABLE>
    1468:	019b0100 	orrseq	r0, fp, r0, lsl #2
    146c:	00000086 	andeq	r0, r0, r6, lsl #1
    1470:	11649102 	cmnne	r4, r2, lsl #2
    1474:	0000127c 	andeq	r1, r0, ip, ror r2
    1478:	30019b01 	andcc	r9, r1, r1, lsl #22
    147c:	02000002 	andeq	r0, r0, #2
    1480:	26116091 			; <UNDEFINED> instruction: 0x26116091
    1484:	0100000d 	tsteq	r0, sp
    1488:	0055019b 			; <UNDEFINED> instruction: 0x0055019b
    148c:	91020000 	mrsls	r0, (UNDEF: 2)
    1490:	012c115e 	teqeq	ip, lr, asr r1
    1494:	9b010000 	blls	4149c <__bss_end+0x2b9a4>
    1498:	00003701 	andeq	r3, r0, r1, lsl #14
    149c:	58910200 	ldmpl	r1, {r9}
    14a0:	00052c11 	andeq	r2, r5, r1, lsl ip
    14a4:	019b0100 	orrseq	r0, fp, r0, lsl #2
    14a8:	00000063 	andeq	r0, r0, r3, rrx
    14ac:	11009102 	tstne	r0, r2, lsl #2
    14b0:	00000da5 	andeq	r0, r0, r5, lsr #27
    14b4:	92019b01 	andls	r9, r1, #1024	; 0x400
    14b8:	02000003 	andeq	r0, r0, #3
    14bc:	33110491 	tstcc	r1, #-1862270976	; 0x91000000
    14c0:	0100000d 	tsteq	r0, sp
    14c4:	0240019b 	subeq	r0, r0, #-1073741786	; 0xc0000026
    14c8:	91020000 	mrsls	r0, (UNDEF: 2)
    14cc:	0eb21108 	frdeqs	f1, f2, #0.0
    14d0:	9b010000 	blls	414d8 <__bss_end+0x2b9e0>
    14d4:	00039801 	andeq	r9, r3, r1, lsl #16
    14d8:	0c910200 	lfmeq	f0, 4, [r1], {0}
    14dc:	0009b612 	andeq	fp, r9, r2, lsl r6
    14e0:	019d0100 	orrseq	r0, sp, r0, lsl #2
    14e4:	0000005c 	andeq	r0, r0, ip, asr r0
    14e8:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    14ec:	00000ced 	andeq	r0, r0, sp, ror #25
    14f0:	a8019e01 	stmdage	r1, {r0, r9, sl, fp, ip, pc}
    14f4:	02000003 	andeq	r0, r0, #3
    14f8:	a8137091 	ldmdage	r3, {r0, r4, r7, ip, sp, lr}
    14fc:	9c00011b 	stflss	f0, [r0], {27}
    1500:	12000001 	andne	r0, r0, #1
    1504:	0000013f 	andeq	r0, r0, pc, lsr r1
    1508:	4001a901 	andmi	sl, r1, r1, lsl #18
    150c:	02000002 	andeq	r0, r0, #2
    1510:	00006c91 	muleq	r0, r1, ip
    1514:	01b90406 			; <UNDEFINED> instruction: 0x01b90406
    1518:	9d0d0000 	stcls	0, cr0, [sp, #-0]
    151c:	06000003 	streq	r0, [r0], -r3
    1520:	0003a304 	andeq	sl, r3, r4, lsl #6
    1524:	02250d00 	eoreq	r0, r5, #0, 26
    1528:	04060000 	streq	r0, [r6], #-0
    152c:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
    1530:	00115314 	andseq	r5, r1, r4, lsl r3
    1534:	02400100 	subeq	r0, r0, #0, 2
    1538:	00011db4 			; <UNDEFINED> instruction: 0x00011db4
    153c:	000000fc 	strdeq	r0, [r0], -ip
    1540:	03e39c01 	mvneq	r9, #256	; 0x100
    1544:	a3110000 	tstge	r1, #0
    1548:	0100000e 	tsteq	r0, lr
    154c:	01b90240 			; <UNDEFINED> instruction: 0x01b90240
    1550:	91020000 	mrsls	r0, (UNDEF: 2)
    1554:	0deb126c 	sfmeq	f1, 2, [fp, #432]!	; 0x1b0
    1558:	42010000 	andmi	r0, r1, #0
    155c:	0003a802 	andeq	sl, r3, r2, lsl #16
    1560:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1564:	10401400 	subne	r1, r0, r0, lsl #8
    1568:	82010000 	andhi	r0, r1, #0
    156c:	011eb002 	tsteq	lr, r2
    1570:	00010c00 	andeq	r0, r1, r0, lsl #24
    1574:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    1578:	11000004 	tstne	r0, r4
    157c:	00000f74 	andeq	r0, r0, r4, ror pc
    1580:	45028201 	strmi	r8, [r2, #-513]	; 0x201
    1584:	02000004 	andeq	r0, r0, #4
    1588:	15116491 	ldrne	r6, [r1, #-1169]	; 0x491
    158c:	01000012 	tsteq	r0, r2, lsl r0
    1590:	00a20282 	adceq	r0, r2, r2, lsl #5
    1594:	91020000 	mrsls	r0, (UNDEF: 2)
    1598:	06351260 	ldrteq	r1, [r5], -r0, ror #4
    159c:	84010000 	strhi	r0, [r1], #-0
    15a0:	0000a202 	andeq	sl, r0, r2, lsl #4
    15a4:	70910200 	addsvc	r0, r1, r0, lsl #4
    15a8:	000c6f12 	andeq	r6, ip, r2, lsl pc
    15ac:	02850100 	addeq	r0, r5, #0, 2
    15b0:	0000005c 	andeq	r0, r0, ip, asr r0
    15b4:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    15b8:	000010ba 	strheq	r1, [r0], -sl
    15bc:	5c028501 	cfstr32pl	mvfx8, [r2], {1}
    15c0:	02000000 	andeq	r0, r0, #0
    15c4:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
    15c8:	0000044a 	andeq	r0, r0, sl, asr #8
    15cc:	00a20406 	adceq	r0, r2, r6, lsl #8
    15d0:	a5140000 	ldrge	r0, [r4, #-0]
    15d4:	0100000c 	tsteq	r0, ip
    15d8:	1fbc02c3 	svcne	0x00bc02c3
    15dc:	00800001 	addeq	r0, r0, r1
    15e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    15e4:	00000494 	muleq	r0, r4, r4
    15e8:	0006b411 	andeq	fp, r6, r1, lsl r4
    15ec:	02c30100 	sbceq	r0, r3, #0, 2
    15f0:	000000a2 	andeq	r0, r0, r2, lsr #1
    15f4:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    15f8:	00000635 	andeq	r0, r0, r5, lsr r6
    15fc:	a202c501 	andge	ip, r2, #4194304	; 0x400000
    1600:	02000000 	andeq	r0, r0, #0
    1604:	6f127091 	svcvs	0x00127091
    1608:	0100000c 	tsteq	r0, ip
    160c:	005c02c6 	subseq	r0, ip, r6, asr #5
    1610:	91020000 	mrsls	r0, (UNDEF: 2)
    1614:	83100074 	tsthi	r0, #116	; 0x74
    1618:	01000012 	tsteq	r0, r2, lsl r0
    161c:	006302f1 	strdeq	r0, [r3], #-33	; 0xffffffdf	; <UNPREDICTABLE>
    1620:	203c0000 	eorscs	r0, ip, r0
    1624:	00580001 	subseq	r0, r8, r1
    1628:	9c010000 	stcls	0, cr0, [r1], {-0}
    162c:	000004dc 	ldrdeq	r0, [r0], -ip
    1630:	000d7d11 	andeq	r7, sp, r1, lsl sp
    1634:	02f10100 	rscseq	r0, r1, #0, 2
    1638:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    163c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    1640:	00000deb 	andeq	r0, r0, fp, ror #27
    1644:	a802f301 	stmdage	r2, {r0, r8, r9, ip, sp, lr, pc}
    1648:	02000003 	andeq	r0, r0, #3
    164c:	b5127491 	ldrlt	r7, [r2, #-1169]	; 0x491
    1650:	01000009 	tsteq	r0, r9
    1654:	006302f4 	strdeq	r0, [r3], #-36	; 0xffffffdc	; <UNPREDICTABLE>
    1658:	91020000 	mrsls	r0, (UNDEF: 2)
    165c:	42140070 	andsmi	r0, r4, #112	; 0x70
    1660:	0100000d 	tsteq	r0, sp
    1664:	20940307 	addscs	r0, r4, r7, lsl #6
    1668:	01a40001 			; <UNDEFINED> instruction: 0x01a40001
    166c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1670:	0000053e 	andeq	r0, r0, lr, lsr r5
    1674:	000d7d11 	andeq	r7, sp, r1, lsl sp
    1678:	03070100 	movweq	r0, #28928	; 0x7100
    167c:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    1680:	11649102 	cmnne	r4, r2, lsl #2
    1684:	00001023 	andeq	r1, r0, r3, lsr #32
    1688:	63030701 	movwvs	r0, #14081	; 0x3701
    168c:	02000000 	andeq	r0, r0, #0
    1690:	eb126091 	bl	4998dc <__bss_end+0x483de4>
    1694:	0100000d 	tsteq	r0, sp
    1698:	03a80309 			; <UNDEFINED> instruction: 0x03a80309
    169c:	91020000 	mrsls	r0, (UNDEF: 2)
    16a0:	12581270 	subsne	r1, r8, #112, 4
    16a4:	0a010000 	beq	416ac <__bss_end+0x2bbb4>
    16a8:	00006303 	andeq	r6, r0, r3, lsl #6
    16ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    16b0:	000df112 	andeq	pc, sp, r2, lsl r1	; <UNPREDICTABLE>
    16b4:	030b0100 	movweq	r0, #45312	; 0xb100
    16b8:	0000005c 	andeq	r0, r0, ip, asr r0
    16bc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    16c0:	000bfd14 	andeq	pc, fp, r4, lsl sp	; <UNPREDICTABLE>
    16c4:	03730100 	cmneq	r3, #0, 2
    16c8:	00012238 	andeq	r2, r1, r8, lsr r2
    16cc:	00000100 	andeq	r0, r0, r0, lsl #2
    16d0:	05739c01 	ldrbeq	r9, [r3, #-3073]!	; 0xc01
    16d4:	aa110000 	bge	4416dc <__bss_end+0x42bbe4>
    16d8:	01000012 	tsteq	r0, r2, lsl r0
    16dc:	01b90373 			; <UNDEFINED> instruction: 0x01b90373
    16e0:	91020000 	mrsls	r0, (UNDEF: 2)
    16e4:	0deb126c 	sfmeq	f1, 2, [fp, #432]!	; 0x1b0
    16e8:	75010000 	strvc	r0, [r1, #-0]
    16ec:	0003a803 	andeq	sl, r3, r3, lsl #16
    16f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    16f4:	0db31500 	cfldr32eq	mvfx1, [r3]
    16f8:	b3010000 	movwlt	r0, #4096	; 0x1000
    16fc:	00005c03 	andeq	r5, r0, r3, lsl #24
    1700:	01233800 	teqeq	r3, r0, lsl #16
    1704:	00007c00 	andeq	r7, r0, r0, lsl #24
    1708:	bb9c0100 	bllt	fe701b10 <_estack+0xf66f1b10>
    170c:	11000005 	tstne	r0, r5
    1710:	00000d7e 	andeq	r0, r0, lr, ror sp
    1714:	b903b301 	stmdblt	r3, {r0, r8, r9, ip, sp, pc}
    1718:	02000001 	andeq	r0, r0, #1
    171c:	b6126c91 			; <UNDEFINED> instruction: 0xb6126c91
    1720:	01000009 	tsteq	r0, r9
    1724:	005c03b5 	ldrheq	r0, [ip], #-53	; 0xffffffcb
    1728:	91020000 	mrsls	r0, (UNDEF: 2)
    172c:	0deb1274 	sfmeq	f1, 2, [fp, #464]!	; 0x1d0
    1730:	b6010000 	strlt	r0, [r1], -r0
    1734:	0005bb03 	andeq	fp, r5, r3, lsl #22
    1738:	70910200 	addsvc	r0, r1, r0, lsl #4
    173c:	05c00d00 	strbeq	r0, [r0, #3328]	; 0xd00
    1740:	04060000 	streq	r0, [r6], #-0
    1744:	000005c6 	andeq	r0, r0, r6, asr #11
    1748:	0002bd0d 	andeq	fp, r2, sp, lsl #26
    174c:	0e001400 	cfcpyseq	mvf1, mvf0
    1750:	d5010000 	strle	r0, [r1, #-0]
    1754:	0123b403 	teqeq	r3, r3, lsl #8
    1758:	0000f400 	andeq	pc, r0, r0, lsl #8
    175c:	009c0100 	addseq	r0, ip, r0, lsl #2
    1760:	11000006 	tstne	r0, r6
    1764:	00000c96 	muleq	r0, r6, ip
    1768:	b903d501 	stmdblt	r3, {r0, r8, sl, ip, lr, pc}
    176c:	02000001 	andeq	r0, r0, #1
    1770:	eb126c91 	bl	49c9bc <__bss_end+0x486ec4>
    1774:	0100000d 	tsteq	r0, sp
    1778:	03a803d7 			; <UNDEFINED> instruction: 0x03a803d7
    177c:	91020000 	mrsls	r0, (UNDEF: 2)
    1780:	a7100074 			; <UNDEFINED> instruction: 0xa7100074
    1784:	01000010 	tsteq	r0, r0, lsl r0
    1788:	005c0402 	subseq	r0, ip, r2, lsl #8
    178c:	24a80000 	strtcs	r0, [r8], #0
    1790:	011c0001 	tsteq	ip, r1
    1794:	9c010000 	stcls	0, cr0, [r1], {-0}
    1798:	00000657 	andeq	r0, r0, r7, asr r6
    179c:	000c9611 	andeq	r9, ip, r1, lsl r6
    17a0:	04020100 	streq	r0, [r2], #-256	; 0x100
    17a4:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
    17a8:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    17ac:	00000df1 	strdeq	r0, [r0], -r1
    17b0:	5c040401 	cfstrspl	mvf0, [r4], {1}
    17b4:	02000000 	andeq	r0, r0, #0
    17b8:	eb127491 	bl	49ea04 <__bss_end+0x488f0c>
    17bc:	0100000d 	tsteq	r0, sp
    17c0:	03a80405 			; <UNDEFINED> instruction: 0x03a80405
    17c4:	91020000 	mrsls	r0, (UNDEF: 2)
    17c8:	0a941270 	beq	fe506190 <_estack+0xf64f6190>
    17cc:	06010000 	streq	r0, [r1], -r0
    17d0:	00006304 	andeq	r6, r0, r4, lsl #6
    17d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    17d8:	0d531400 	cfldrdeq	mvd1, [r3, #-0]
    17dc:	30010000 	andcc	r0, r1, r0
    17e0:	0125c404 	teqeq	r5, r4, lsl #8
    17e4:	00009800 	andeq	r9, r0, r0, lsl #16
    17e8:	7d9c0100 	ldfvcs	f0, [ip]
    17ec:	12000006 	andne	r0, r0, #6
    17f0:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    17f4:	5c043201 	sfmpl	f3, 4, [r4], {1}
    17f8:	02000000 	andeq	r0, r0, #0
    17fc:	16007491 			; <UNDEFINED> instruction: 0x16007491
    1800:	00001075 	andeq	r1, r0, r5, ror r0
    1804:	5c047101 	stfpls	f7, [r4], {1}
    1808:	34000126 	strcc	r0, [r0], #-294	; 0x126
    180c:	01000000 	mrseq	r0, (UNDEF: 0)
    1810:	11f7179c 			; <UNDEFINED> instruction: 0x11f7179c
    1814:	7c010000 	stcvc	0, cr0, [r1], {-0}
    1818:	01269004 	teqeq	r6, r4
    181c:	00002c00 	andeq	r2, r0, r0, lsl #24
    1820:	109c0100 	addsne	r0, ip, r0, lsl #2
    1824:	00001087 	andeq	r1, r0, r7, lsl #1
    1828:	5c048401 	cfstrspl	mvf8, [r4], {1}
    182c:	bc000000 	stclt	0, cr0, [r0], {-0}
    1830:	a4000126 	strge	r0, [r0], #-294	; 0x126
    1834:	01000001 	tsteq	r0, r1
    1838:	0006f29c 	muleq	r6, ip, r2
    183c:	0deb1200 	sfmeq	f1, 2, [fp]
    1840:	86010000 	strhi	r0, [r1], -r0
    1844:	0003a804 	andeq	sl, r3, r4, lsl #16
    1848:	12540100 	subsne	r0, r4, #0, 2
    184c:	00000c6f 	andeq	r0, r0, pc, ror #24
    1850:	5c048701 	stcpl	7, cr8, [r4], {1}
    1854:	02000000 	andeq	r0, r0, #0
    1858:	08136c91 	ldmdaeq	r3, {r0, r4, r7, sl, fp, sp, lr}
    185c:	24000127 	strcs	r0, [r0], #-295	; 0x127
    1860:	12000001 	andne	r0, r0, #1
    1864:	00000df1 	strdeq	r0, [r0], -r1
    1868:	5c049a01 	stcpl	10, cr9, [r4], {1}
    186c:	02000000 	andeq	r0, r0, #0
    1870:	00006891 	muleq	r0, r1, r8
    1874:	00115f10 	andseq	r5, r1, r0, lsl pc
    1878:	04db0100 	ldrbeq	r0, [fp], #256	; 0x100
    187c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1880:	00012860 	andeq	r2, r1, r0, ror #16
    1884:	00000034 	andeq	r0, r0, r4, lsr r0
    1888:	071c9c01 	ldreq	r9, [ip, -r1, lsl #24]
    188c:	f0120000 			; <UNDEFINED> instruction: 0xf0120000
    1890:	01000011 	tsteq	r0, r1, lsl r0
    1894:	00a204dd 	ldrdeq	r0, [r2], sp	; <UNPREDICTABLE>
    1898:	91020000 	mrsls	r0, (UNDEF: 2)
    189c:	f6150074 			; <UNDEFINED> instruction: 0xf6150074
    18a0:	0100000c 	tsteq	r0, ip
    18a4:	00a204ea 	adceq	r0, r2, sl, ror #9
    18a8:	28940000 	ldmcs	r4, {}	; <UNPREDICTABLE>
    18ac:	00380001 	eorseq	r0, r8, r1
    18b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18b4:	00000755 	andeq	r0, r0, r5, asr r7
    18b8:	0009b612 	andeq	fp, r9, r2, lsl r6
    18bc:	04ec0100 	strbteq	r0, [ip], #256	; 0x100
    18c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    18c4:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
    18c8:	00000a94 	muleq	r0, r4, sl
    18cc:	6304ed01 	movwvs	lr, #19713	; 0x4d01
    18d0:	02000000 	andeq	r0, r0, #0
    18d4:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    18d8:	000011a5 	andeq	r1, r0, r5, lsr #3
    18dc:	6304f701 	movwvs	pc, #18177	; 0x4701	; <UNPREDICTABLE>
    18e0:	cc000000 	stcgt	0, cr0, [r0], {-0}
    18e4:	24000128 	strcs	r0, [r0], #-296	; 0x128
    18e8:	01000000 	mrseq	r0, (UNDEF: 0)
    18ec:	1050149c 			; <UNDEFINED> instruction: 0x1050149c
    18f0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    18f4:	0128f005 	msreq	CPSR_f, r5
    18f8:	00021800 	andeq	r1, r2, r0, lsl #16
    18fc:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    1900:	12000007 	andne	r0, r0, #7
    1904:	00000deb 	andeq	r0, r0, fp, ror #27
    1908:	a805ab01 	stmdage	r5, {r0, r8, r9, fp, sp, pc}
    190c:	02000003 	andeq	r0, r0, #3
    1910:	30197091 	mulscc	r9, r1, r0
    1914:	84000129 	strhi	r0, [r0], #-297	; 0x129
    1918:	ad000000 	stcge	0, cr0, [r0, #-0]
    191c:	12000007 	andne	r0, r0, #7
    1920:	00000354 	andeq	r0, r0, r4, asr r3
    1924:	c705b501 	strgt	fp, [r5, -r1, lsl #10]
    1928:	02000007 	andeq	r0, r0, #7
    192c:	13007491 	movwne	r7, #1169	; 0x491
    1930:	000129b4 			; <UNDEFINED> instruction: 0x000129b4
    1934:	00000110 	andeq	r0, r0, r0, lsl r1
    1938:	0003ab12 	andeq	sl, r3, r2, lsl fp
    193c:	05d60100 	ldrbeq	r0, [r6, #256]	; 0x100
    1940:	000000a2 	andeq	r0, r0, r2, lsr #1
    1944:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1948:	ae040600 	cfmadd32ge	mvax0, mvfx0, mvfx4, mvfx0
    194c:	14000001 	strne	r0, [r0], #-1
    1950:	00000e1b 	andeq	r0, r0, fp, lsl lr
    1954:	0805f601 	stmdaeq	r5, {r0, r9, sl, ip, sp, lr, pc}
    1958:	5800012b 	stmdapl	r0, {r0, r1, r3, r5, r8}
    195c:	01000000 	mrseq	r0, (UNDEF: 0)
    1960:	0008119c 	muleq	r8, ip, r1
    1964:	0d7e1100 	ldfeqe	f1, [lr, #-0]
    1968:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    196c:	0001b905 	andeq	fp, r1, r5, lsl #18
    1970:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1974:	000c3011 	andeq	r3, ip, r1, lsl r0
    1978:	05f60100 	ldrbeq	r0, [r6, #256]!	; 0x100
    197c:	000000ad 	andeq	r0, r0, sp, lsr #1
    1980:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    1984:	00000dec 	andeq	r0, r0, ip, ror #27
    1988:	a805f801 	stmdage	r5, {r0, fp, ip, sp, lr, pc}
    198c:	02000003 	andeq	r0, r0, #3
    1990:	10007491 	mulne	r0, r1, r4
    1994:	0000122f 	andeq	r1, r0, pc, lsr #4
    1998:	ad061001 	stcge	0, cr1, [r6, #-4]
    199c:	60000000 	andvs	r0, r0, r0
    19a0:	5c00012b 	stfpls	f0, [r0], {43}	; 0x2b
    19a4:	01000000 	mrseq	r0, (UNDEF: 0)
    19a8:	0008599c 	muleq	r8, ip, r9
    19ac:	0d7e1100 	ldfeqe	f1, [lr, #-0]
    19b0:	10010000 	andne	r0, r1, r0
    19b4:	0001b906 	andeq	fp, r1, r6, lsl #18
    19b8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    19bc:	000dec12 	andeq	lr, sp, r2, lsl ip
    19c0:	06120100 	ldreq	r0, [r2], -r0, lsl #2
    19c4:	000003a8 	andeq	r0, r0, r8, lsr #7
    19c8:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    19cc:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    19d0:	ad061301 	stcge	3, cr1, [r6, #-4]
    19d4:	02000000 	andeq	r0, r0, #0
    19d8:	10007091 	mulne	r0, r1, r0
    19dc:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
    19e0:	5c062d01 	stcpl	13, cr2, [r6], {1}
    19e4:	bc000000 	stclt	0, cr0, [r0], {-0}
    19e8:	7c00012b 	stfvcs	f0, [r0], {43}	; 0x2b
    19ec:	01000000 	mrseq	r0, (UNDEF: 0)
    19f0:	0008b09c 	muleq	r8, ip, r0
    19f4:	0d7e1100 	ldfeqe	f1, [lr, #-0]
    19f8:	2d010000 	stccs	0, cr0, [r1, #-0]
    19fc:	0001b906 	andeq	fp, r1, r6, lsl #18
    1a00:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a04:	000d8411 	andeq	r8, sp, r1, lsl r4
    1a08:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    1a0c:	00000037 	andeq	r0, r0, r7, lsr r0
    1a10:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    1a14:	00000dec 	andeq	r0, r0, ip, ror #27
    1a18:	a8062f01 	stmdage	r6, {r0, r8, r9, sl, fp, sp}
    1a1c:	02000003 	andeq	r0, r0, #3
    1a20:	b6127491 			; <UNDEFINED> instruction: 0xb6127491
    1a24:	01000009 	tsteq	r0, r9
    1a28:	005c0630 	subseq	r0, ip, r0, lsr r6
    1a2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1a30:	5c1a0070 	ldcpl	0, cr0, [sl], {112}	; 0x70
    1a34:	0100000e 	tsteq	r0, lr
    1a38:	2c38064b 	ldccs	6, cr0, [r8], #-300	; 0xfffffed4
    1a3c:	01080001 	tsteq	r8, r1
    1a40:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a44:	000008e0 	andeq	r0, r0, r0, ror #17
    1a48:	012ca813 	teqeq	ip, r3, lsl r8
    1a4c:	00007800 	andeq	r7, r0, r0, lsl #16
    1a50:	03f51200 	mvnseq	r1, #0, 4
    1a54:	7c010000 	stcvc	0, cr0, [r1], {-0}
    1a58:	0008e006 	andeq	lr, r8, r6
    1a5c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a60:	c70d0000 	strgt	r0, [sp, -r0]
    1a64:	14000007 	strne	r0, [r0], #-7
    1a68:	00000d67 	andeq	r0, r0, r7, ror #26
    1a6c:	40068701 	andmi	r8, r6, r1, lsl #14
    1a70:	9800012d 	stmdals	r0, {r0, r2, r3, r5, r8}
    1a74:	01000000 	mrseq	r0, (UNDEF: 0)
    1a78:	0009299c 	muleq	r9, ip, r9
    1a7c:	056a1100 	strbeq	r1, [sl, #-256]!	; 0x100
    1a80:	87010000 	strhi	r0, [r1, -r0]
    1a84:	00092906 	andeq	r2, r9, r6, lsl #18
    1a88:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a8c:	00124b11 	andseq	r4, r2, r1, lsl fp
    1a90:	06870100 	streq	r0, [r7], r0, lsl #2
    1a94:	000000a2 	andeq	r0, r0, r2, lsr #1
    1a98:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    1a9c:	00000635 	andeq	r0, r0, r5, lsr r6
    1aa0:	a2068901 	andge	r8, r6, #16384	; 0x4000
    1aa4:	02000000 	andeq	r0, r0, #0
    1aa8:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
    1aac:	0000092e 	andeq	r0, r0, lr, lsr #18
    1ab0:	09340406 	ldmdbeq	r4!, {r1, r2, sl}
    1ab4:	ae0d0000 	cdpge	0, 0, cr0, cr13, cr0, {0}
    1ab8:	10000001 	andne	r0, r0, r1
    1abc:	0000113a 	andeq	r1, r0, sl, lsr r1
    1ac0:	5c06d901 	stcpl	9, cr13, [r6], {1}
    1ac4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    1ac8:	1800012d 	stmdane	r0, {r0, r2, r3, r5, r8}
    1acc:	01000001 	tsteq	r0, r1
    1ad0:	0009819c 	muleq	r9, ip, r1
    1ad4:	056a1100 	strbeq	r1, [sl, #-256]!	; 0x100
    1ad8:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    1adc:	00092906 	andeq	r2, r9, r6, lsl #18
    1ae0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1ae4:	00103112 	andseq	r3, r0, r2, lsl r1
    1ae8:	06db0100 	ldrbeq	r0, [fp], r0, lsl #2
    1aec:	000003a8 	andeq	r0, r0, r8, lsr #7
    1af0:	12709102 	rsbsne	r9, r0, #-2147483648	; 0x80000000
    1af4:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    1af8:	5c06dc01 	stcpl	12, cr13, [r6], {1}
    1afc:	02000000 	andeq	r0, r0, #0
    1b00:	1a007491 	bne	1ed4c <__bss_end+0x9254>
    1b04:	00001295 	muleq	r0, r5, r2
    1b08:	f0070c01 			; <UNDEFINED> instruction: 0xf0070c01
    1b0c:	4400012e 	strmi	r0, [r0], #-302	; 0x12e
    1b10:	01000000 	mrseq	r0, (UNDEF: 0)
    1b14:	0009a79c 	muleq	r9, ip, r7
    1b18:	0c7f1100 	ldfeqe	f1, [pc], #-0	; 1b20 <_start-0x64e0>
    1b1c:	0c010000 	stceq	0, cr0, [r1], {-0}
    1b20:	0009a707 	andeq	sl, r9, r7, lsl #14
    1b24:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b28:	09ac0d00 	stmibeq	ip!, {r8, sl, fp}
    1b2c:	04060000 	streq	r0, [r6], #-0
    1b30:	000001e9 	andeq	r0, r0, r9, ror #3
    1b34:	00117110 	andseq	r7, r1, r0, lsl r1
    1b38:	07140100 	ldreq	r0, [r4, -r0, lsl #2]
    1b3c:	0000005c 	andeq	r0, r0, ip, asr r0
    1b40:	00012f34 	andeq	r2, r1, r4, lsr pc
    1b44:	000000f4 	strdeq	r0, [r0], -r4
    1b48:	09fa9c01 	ldmibeq	sl!, {r0, sl, fp, ip, pc}^
    1b4c:	7f110000 	svcvc	0x00110000
    1b50:	0100000c 	tsteq	r0, ip
    1b54:	09a70714 	stmibeq	r7!, {r2, r4, r8, r9, sl}
    1b58:	91020000 	mrsls	r0, (UNDEF: 2)
    1b5c:	124a116c 	subne	r1, sl, #108, 2
    1b60:	14010000 	strne	r0, [r1], #-0
    1b64:	00044507 	andeq	r4, r4, r7, lsl #10
    1b68:	68910200 	ldmvs	r1, {r9}
    1b6c:	0009b612 	andeq	fp, r9, r2, lsl r6
    1b70:	07160100 	ldreq	r0, [r6, -r0, lsl #2]
    1b74:	0000005c 	andeq	r0, r0, ip, asr r0
    1b78:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1b7c:	00109617 	andseq	r9, r0, r7, lsl r6
    1b80:	07420100 	strbeq	r0, [r2, -r0, lsl #2]
    1b84:	00013028 	andeq	r3, r1, r8, lsr #32
    1b88:	00000024 	andeq	r0, r0, r4, lsr #32
    1b8c:	501b9c01 	andspl	r9, fp, r1, lsl #24
    1b90:	0100000e 	tsteq	r0, lr
    1b94:	304c0776 	subcc	r0, ip, r6, ror r7
    1b98:	00340001 	eorseq	r0, r4, r1
    1b9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ba0:	00000a32 	andeq	r0, r0, r2, lsr sl
    1ba4:	00012c11 	andeq	r2, r1, r1, lsl ip
    1ba8:	07760100 	ldrbeq	r0, [r6, -r0, lsl #2]!
    1bac:	00000037 	andeq	r0, r0, r7, lsr r0
    1bb0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1bb4:	000be31b 	andeq	lr, fp, fp, lsl r3
    1bb8:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    1bbc:	00013080 	andeq	r3, r1, r0, lsl #1
    1bc0:	000000bc 	strheq	r0, [r0], -ip
    1bc4:	0a949c01 	beq	fe528bd0 <_estack+0xf6518bd0>
    1bc8:	eb110000 	bl	441bd0 <__bss_end+0x42c0d8>
    1bcc:	0100000d 	tsteq	r0, sp
    1bd0:	03a807b7 			; <UNDEFINED> instruction: 0x03a807b7
    1bd4:	91020000 	mrsls	r0, (UNDEF: 2)
    1bd8:	127c1174 	rsbsne	r1, ip, #116, 2
    1bdc:	b7010000 	strlt	r0, [r1, -r0]
    1be0:	00023007 	andeq	r3, r2, r7
    1be4:	70910200 	addsvc	r0, r1, r0, lsl #4
    1be8:	00052c11 	andeq	r2, r5, r1, lsl ip
    1bec:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    1bf0:	00000063 	andeq	r0, r0, r3, rrx
    1bf4:	116c9102 	cmnne	ip, r2, lsl #2
    1bf8:	00000eb2 			; <UNDEFINED> instruction: 0x00000eb2
    1bfc:	9807b701 	stmdals	r7, {r0, r8, r9, sl, ip, sp, pc}
    1c00:	02000003 	andeq	r0, r0, #3
    1c04:	26116891 			; <UNDEFINED> instruction: 0x26116891
    1c08:	0100000d 	tsteq	r0, sp
    1c0c:	005507b7 	ldrheq	r0, [r5], #-119	; 0xffffff89
    1c10:	91020000 	mrsls	r0, (UNDEF: 2)
    1c14:	c81b0000 	ldmdagt	fp, {}	; <UNPREDICTABLE>
    1c18:	01000012 	tsteq	r0, r2, lsl r0
    1c1c:	313c080d 	teqcc	ip, sp, lsl #16
    1c20:	00bc0001 	adcseq	r0, ip, r1
    1c24:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c28:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
    1c2c:	00052c12 	andeq	r2, r5, r2, lsl ip
    1c30:	080f0100 	stmdaeq	pc, {r8}	; <UNPREDICTABLE>
    1c34:	00000063 	andeq	r0, r0, r3, rrx
    1c38:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1c3c:	0010c71b 	andseq	ip, r0, fp, lsl r7
    1c40:	082d0100 	stmdaeq	sp!, {r8}
    1c44:	000131f8 	strdeq	r3, [r1], -r8
    1c48:	000000b8 	strheq	r0, [r0], -r8
    1c4c:	0b039c01 	bleq	e8c58 <__bss_end+0xd3160>
    1c50:	04130000 	ldreq	r0, [r3], #-0
    1c54:	98000132 	stmdals	r0, {r1, r4, r5, r8}
    1c58:	12000000 	andne	r0, r0, #0
    1c5c:	00000c89 	andeq	r0, r0, r9, lsl #25
    1c60:	5c083101 	stfpls	f3, [r8], {1}
    1c64:	02000000 	andeq	r0, r0, #0
    1c68:	44137491 	ldrmi	r7, [r3], #-1169	; 0x491
    1c6c:	58000132 	stmdapl	r0, {r1, r4, r5, r8}
    1c70:	12000000 	andne	r0, r0, #0
    1c74:	00000deb 	andeq	r0, r0, fp, ror #27
    1c78:	a8083d01 	stmdage	r8, {r0, r8, sl, fp, ip, sp}
    1c7c:	02000003 	andeq	r0, r0, #3
    1c80:	00007091 	muleq	r0, r1, r0
    1c84:	111b1b00 	tstne	fp, r0, lsl #22
    1c88:	50010000 	andpl	r0, r1, r0
    1c8c:	0132b008 	teqeq	r2, r8
    1c90:	0000b400 	andeq	fp, r0, r0, lsl #8
    1c94:	299c0100 	ldmibcs	ip, {r8}
    1c98:	1100000b 	tstne	r0, fp
    1c9c:	00000635 	andeq	r0, r0, r5, lsr r6
    1ca0:	a2085001 	andge	r5, r8, #1
    1ca4:	02000000 	andeq	r0, r0, #0
    1ca8:	1c007491 	cfstrsne	mvf7, [r0], {145}	; 0x91
    1cac:	00000d0f 	andeq	r0, r0, pc, lsl #26
    1cb0:	a8086a01 	stmdage	r8, {r0, r9, fp, sp, lr}
    1cb4:	64000003 	strvs	r0, [r0], #-3
    1cb8:	b4000133 	strlt	r0, [r0], #-307	; 0x133
    1cbc:	01000000 	mrseq	r0, (UNDEF: 0)
    1cc0:	000b719c 	muleq	fp, ip, r1
    1cc4:	0d261100 	stfeqs	f1, [r6, #-0]
    1cc8:	6a010000 	bvs	41cd0 <__bss_end+0x2c1d8>
    1ccc:	00005508 	andeq	r5, r0, r8, lsl #10
    1cd0:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1cd4:	000d3311 	andeq	r3, sp, r1, lsl r3
    1cd8:	086a0100 	stmdaeq	sl!, {r8}^
    1cdc:	00000240 	andeq	r0, r0, r0, asr #4
    1ce0:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    1ce4:	00000ced 	andeq	r0, r0, sp, ror #25
    1ce8:	a8086c01 	stmdage	r8, {r0, sl, fp, sp, lr}
    1cec:	02000003 	andeq	r0, r0, #3
    1cf0:	1b007491 	blne	1ef3c <__bss_end+0x9444>
    1cf4:	00000e36 	andeq	r0, r0, r6, lsr lr
    1cf8:	18092901 	stmdane	r9, {r0, r8, fp, sp}
    1cfc:	30000134 	andcc	r0, r0, r4, lsr r1
    1d00:	01000000 	mrseq	r0, (UNDEF: 0)
    1d04:	000b979c 	muleq	fp, ip, r7
    1d08:	0deb1100 	stfeqe	f1, [fp]
    1d0c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    1d10:	0003a809 	andeq	sl, r3, r9, lsl #16
    1d14:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1d18:	01ae0e00 			; <UNDEFINED> instruction: 0x01ae0e00
    1d1c:	0ba70000 	bleq	fe9c1d24 <_estack+0xf69b1d24>
    1d20:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
    1d24:	04000000 	streq	r0, [r0], #-0
    1d28:	11931d00 	orrsne	r1, r3, r0, lsl #26
    1d2c:	a3010000 	movwge	r0, #4096	; 0x1000
    1d30:	00000b97 	muleq	r0, r7, fp
    1d34:	47a80305 	strmi	r0, [r8, r5, lsl #6]!
    1d38:	bc1d0001 	ldclt	0, cr0, [sp], {1}
    1d3c:	01000011 	tsteq	r0, r1, lsl r0
    1d40:	0001aea4 	andeq	sl, r1, r4, lsr #29
    1d44:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    1d48:	1d000148 	stfnes	f0, [r0, #-288]	; 0xfffffee0
    1d4c:	000011ce 	andeq	r1, r0, lr, asr #3
    1d50:	01aea501 			; <UNDEFINED> instruction: 0x01aea501
    1d54:	03050000 	movweq	r0, #20480	; 0x5000
    1d58:	00014820 	andeq	r4, r1, r0, lsr #16
    1d5c:	00126a1d 	andseq	r6, r2, sp, lsl sl
    1d60:	eba60100 	bl	fe982168 <_estack+0xf6972168>
    1d64:	0500000b 	streq	r0, [r0, #-11]
    1d68:	01483403 	cmpeq	r8, r3, lsl #8
    1d6c:	07c70c00 	strbeq	r0, [r7, r0, lsl #24]
    1d70:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
    1d74:	0100000e 	tsteq	r0, lr
    1d78:	000beba7 	andeq	lr, fp, r7, lsr #23
    1d7c:	38030500 	stmdacc	r3, {r8, sl}
    1d80:	1d000148 	stfnes	f0, [r0, #-288]	; 0xfffffee0
    1d84:	00000ebb 			; <UNDEFINED> instruction: 0x00000ebb
    1d88:	01aea801 			; <UNDEFINED> instruction: 0x01aea801
    1d8c:	03050000 	movweq	r0, #20480	; 0x5000
    1d90:	0001483c 	andeq	r4, r1, ip, lsr r8
    1d94:	0010f41d 	andseq	pc, r0, sp, lsl r4	; <UNPREDICTABLE>
    1d98:	aeac0100 	fdvgee	f0, f4, f0
    1d9c:	05000001 	streq	r0, [r0, #-1]
    1da0:	01485003 	cmpeq	r8, r3
    1da4:	0c211d00 	stceq	13, cr1, [r1], #-0
    1da8:	ad010000 	stcge	0, cr0, [r1, #-0]
    1dac:	00000199 	muleq	r0, r9, r1
    1db0:	48640305 	stmdami	r4!, {r0, r2, r8, r9}^
    1db4:	3f1d0001 	svccc	0x001d0001
    1db8:	0100000c 	tsteq	r0, ip
    1dbc:	0001aeb3 			; <UNDEFINED> instruction: 0x0001aeb3
    1dc0:	68030500 	stmdavs	r3, {r8, sl}
    1dc4:	1d000148 	stfnes	f0, [r0, #-288]	; 0xfffffee0
    1dc8:	00000c0a 	andeq	r0, r0, sl, lsl #24
    1dcc:	0199be01 	orrseq	fp, r9, r1, lsl #28
    1dd0:	03050000 	movweq	r0, #20480	; 0x5000
    1dd4:	0001487c 	andeq	r4, r1, ip, ror r8
    1dd8:	000dc81d 	andeq	ip, sp, sp, lsl r8
    1ddc:	67bf0100 	ldrvs	r0, [pc, r0, lsl #2]!
    1de0:	0500000c 	streq	r0, [r0, #-12]
    1de4:	01488003 	cmpeq	r8, r3
    1de8:	00a20c00 	adceq	r0, r2, r0, lsl #24
    1dec:	771d0000 	ldrvc	r0, [sp, -r0]
    1df0:	0100000e 	tsteq	r0, lr
    1df4:	000063c0 	andeq	r6, r0, r0, asr #7
    1df8:	84030500 	strhi	r0, [r3], #-1280	; 0x500
    1dfc:	1d000148 	stfnes	f0, [r0, #-288]	; 0xfffffee0
    1e00:	00000f61 	andeq	r0, r0, r1, ror #30
    1e04:	0199c101 	orrseq	ip, r9, r1, lsl #2
    1e08:	03050000 	movweq	r0, #20480	; 0x5000
    1e0c:	00014888 	andeq	r4, r1, r8, lsl #17
    1e10:	0010631d 	andseq	r6, r0, sp, lsl r3
    1e14:	9fc20100 	svcls	0x00c20100
    1e18:	0500000c 	streq	r0, [r0, #-12]
    1e1c:	01488c03 	cmpeq	r8, r3, lsl #24
    1e20:	005c0c00 	subseq	r0, ip, r0, lsl #24
    1e24:	901d0000 	andsls	r0, sp, r0
    1e28:	0100000d 	tsteq	r0, sp
    1e2c:	000199c3 	andeq	r9, r1, r3, asr #19
    1e30:	90030500 	andls	r0, r3, r0, lsl #10
    1e34:	1d000148 	stfnes	f0, [r0, #-288]	; 0xfffffee0
    1e38:	00001207 	andeq	r1, r0, r7, lsl #4
    1e3c:	0199c401 	orrseq	ip, r9, r1, lsl #8
    1e40:	03050000 	movweq	r0, #20480	; 0x5000
    1e44:	00014894 	muleq	r1, r4, r8
    1e48:	000e431d 	andeq	r4, lr, sp, lsl r3
    1e4c:	9fc50100 	svcls	0x00c50100
    1e50:	0500000c 	streq	r0, [r0, #-12]
    1e54:	01489803 	cmpeq	r8, r3, lsl #16
    1e58:	11e01d00 	mvnne	r1, r0, lsl #26
    1e5c:	c6010000 	strgt	r0, [r1], -r0
    1e60:	00000c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1e64:	489c0305 	ldmmi	ip, {r0, r2, r8, r9}
    1e68:	861d0001 	ldrhi	r0, [sp], -r1
    1e6c:	01000011 	tsteq	r0, r1, lsl r0
    1e70:	000063c7 	andeq	r6, r0, r7, asr #7
    1e74:	a0030500 	andge	r0, r3, r0, lsl #10
    1e78:	1d000148 	stfnes	f0, [r0, #-288]	; 0xfffffee0
    1e7c:	00000f4c 	andeq	r0, r0, ip, asr #30
    1e80:	00a2c801 	adceq	ip, r2, r1, lsl #16
    1e84:	03050000 	movweq	r0, #20480	; 0x5000
    1e88:	00014718 	andeq	r4, r1, r8, lsl r7
    1e8c:	0003001e 	andeq	r0, r3, lr, lsl r0
    1e90:	1b9f0100 	blne	fe7c2298 <_estack+0xf67b2298>
    1e94:	0500000d 	streq	r0, [r0, #-13]
    1e98:	0147a403 	cmpeq	r7, r3, lsl #8
    1e9c:	03a80c00 			; <UNDEFINED> instruction: 0x03a80c00
    1ea0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ea4:	04000003 	streq	r0, [r0], #-3
    1ea8:	00072900 	andeq	r2, r7, r0, lsl #18
    1eac:	74010400 	strvc	r0, [r1], #-1024	; 0x400
    1eb0:	01000001 	tsteq	r0, r1
    1eb4:	00001349 	andeq	r1, r0, r9, asr #6
    1eb8:	00013448 	andeq	r3, r1, r8, asr #8
    1ebc:	000003ec 	andeq	r0, r0, ip, ror #7
    1ec0:	0000111f 	andeq	r1, r0, pc, lsl r1
    1ec4:	00146802 	andseq	r6, r4, r2, lsl #16
    1ec8:	2c0b0200 	sfmcs	f0, 4, [fp], {-0}
    1ecc:	03000000 	movweq	r0, #0
    1ed0:	00003204 	andeq	r3, r0, r4, lsl #4
    1ed4:	00420400 	subeq	r0, r2, r0, lsl #8
    1ed8:	42050000 	andmi	r0, r5, #0
    1edc:	05000000 	streq	r0, [r0, #-0]
    1ee0:	00000049 	andeq	r0, r0, r9, asr #32
    1ee4:	05040600 	streq	r0, [r4, #-1536]	; 0x600
    1ee8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1eec:	08080407 	stmdaeq	r8, {r0, r1, r2, sl}
    1ef0:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    1ef4:	f3090000 	vhadd.u8	d0, d9, d0
    1ef8:	02000013 	andeq	r0, r0, #19
    1efc:	0000210e 	andeq	r2, r0, lr, lsl #2
    1f00:	30090000 	andcc	r0, r9, r0
    1f04:	02000000 	andeq	r0, r0, #0
    1f08:	0000490f 	andeq	r4, r0, pc, lsl #18
    1f0c:	02000400 	andeq	r0, r0, #0, 8
    1f10:	0000147d 	andeq	r1, r0, sp, ror r4
    1f14:	004b1002 	subeq	r1, fp, r2
    1f18:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    1f1c:	00f80c01 	rscseq	r0, r8, r1, lsl #24
    1f20:	bf090000 	svclt	0x00090000
    1f24:	01000014 	tsteq	r0, r4, lsl r0
    1f28:	0000f80d 	andeq	pc, r0, sp, lsl #16
    1f2c:	df090000 	svcle	0x00090000
    1f30:	01000012 	tsteq	r0, r2, lsl r0
    1f34:	0000f80e 	andeq	pc, r0, lr, lsl #16
    1f38:	e8090400 	stmda	r9, {sl}
    1f3c:	01000012 	tsteq	r0, r2, lsl r0
    1f40:	0000f80f 	andeq	pc, r0, pc, lsl #16
    1f44:	10090800 	andne	r0, r9, r0, lsl #16
    1f48:	01000013 	tsteq	r0, r3, lsl r0
    1f4c:	0000f810 	andeq	pc, r0, r0, lsl r8	; <UNPREDICTABLE>
    1f50:	da090c00 	ble	244f58 <__bss_end+0x22f460>
    1f54:	01000014 	tsteq	r0, r4, lsl r0
    1f58:	0000f811 	andeq	pc, r0, r1, lsl r8	; <UNPREDICTABLE>
    1f5c:	34091000 	strcc	r1, [r9], #-0
    1f60:	01000014 	tsteq	r0, r4, lsl r0
    1f64:	0000f812 	andeq	pc, r0, r2, lsl r8	; <UNPREDICTABLE>
    1f68:	e7091400 	str	r1, [r9, -r0, lsl #8]
    1f6c:	01000013 	tsteq	r0, r3, lsl r0
    1f70:	0000f813 	andeq	pc, r0, r3, lsl r8	; <UNPREDICTABLE>
    1f74:	3c091800 	stccc	8, cr1, [r9], {-0}
    1f78:	01000014 	tsteq	r0, r4, lsl r0
    1f7c:	0000f814 	andeq	pc, r0, r4, lsl r8	; <UNPREDICTABLE>
    1f80:	45091c00 	strmi	r1, [r9, #-3072]	; 0xc00
    1f84:	01000014 	tsteq	r0, r4, lsl r0
    1f88:	0000f815 	andeq	pc, r0, r5, lsl r8	; <UNPREDICTABLE>
    1f8c:	f1092000 			; <UNDEFINED> instruction: 0xf1092000
    1f90:	01000012 	tsteq	r0, r2, lsl r0
    1f94:	0000f816 	andeq	pc, r0, r6, lsl r8	; <UNPREDICTABLE>
    1f98:	0a002400 	beq	afa0 <__module_entries_end+0x2efc>
    1f9c:	06fb0704 	ldrbteq	r0, [fp], r4, lsl #14
    1fa0:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}
    1fa4:	01000012 	tsteq	r0, r2, lsl r0
    1fa8:	00007717 	andeq	r7, r0, r7, lsl r7
    1fac:	149f0b00 	ldrne	r0, [pc], #2816	; 1fb4 <_start-0x604c>
    1fb0:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1fb4:	00013448 	andeq	r3, r1, r8, asr #8
    1fb8:	00000020 	andeq	r0, r0, r0, lsr #32
    1fbc:	dc0b9c01 	stcle	12, cr9, [fp], {1}
    1fc0:	01000013 	tsteq	r0, r3, lsl r0
    1fc4:	01346824 	teqeq	r4, r4, lsr #16
    1fc8:	00002000 	andeq	r2, r0, r0
    1fcc:	0c9c0100 	ldfeqs	f0, [ip], {0}
    1fd0:	00001429 	andeq	r1, r0, r9, lsr #8
    1fd4:	34883501 	strcc	r3, [r8], #1281	; 0x501
    1fd8:	00c40001 	sbceq	r0, r4, r1
    1fdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fe0:	00000182 	andeq	r0, r0, r2, lsl #3
    1fe4:	0013300d 	andseq	r3, r3, sp
    1fe8:	f8360100 			; <UNDEFINED> instruction: 0xf8360100
    1fec:	01000000 	mrseq	r0, (UNDEF: 0)
    1ff0:	133f0d54 	teqne	pc, #84, 26	; 0x1500
    1ff4:	37010000 	strcc	r0, [r1, -r0]
    1ff8:	000000f8 	strdeq	r0, [r0], -r8
    1ffc:	f40e5501 	vst3.8	{d5,d7,d9}, [lr], r1
    2000:	14000134 	strne	r0, [r0], #-308	; 0x134
    2004:	0d000000 	stceq	0, cr0, [r0, #-0]
    2008:	00001421 	andeq	r1, r0, r1, lsr #8
    200c:	00f85401 	rscseq	r5, r8, r1, lsl #8
    2010:	91020000 	mrsls	r0, (UNDEF: 2)
    2014:	14a90d68 	strtne	r0, [r9], #3432	; 0xd68
    2018:	54010000 	strpl	r0, [r1], #-0
    201c:	000000f8 	strdeq	r0, [r0], -r8
    2020:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    2024:	145c0f00 	ldrbne	r0, [ip], #-3840	; 0xf00
    2028:	5a010000 	bpl	42030 <__bss_end+0x2c538>
    202c:	0001354c 	andeq	r3, r1, ip, asr #10
    2030:	00000020 	andeq	r0, r0, r0, lsr #32
    2034:	01b49c01 			; <UNDEFINED> instruction: 0x01b49c01
    2038:	00100000 	andseq	r0, r0, r0
    203c:	01000000 	mrseq	r0, (UNDEF: 0)
    2040:	0000425a 	andeq	r4, r0, sl, asr r2
    2044:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2048:	00003010 	andeq	r3, r0, r0, lsl r0
    204c:	495a0100 	ldmdbmi	sl, {r8}^
    2050:	02000000 	andeq	r0, r0, #0
    2054:	11007091 	swpne	r7, r1, [r0]
    2058:	00001318 	andeq	r1, r0, r8, lsl r3
    205c:	00426201 	subeq	r6, r2, r1, lsl #4
    2060:	356c0000 	strbcc	r0, [ip, #-0]!
    2064:	007c0001 	rsbseq	r0, ip, r1
    2068:	9c010000 	stcls	0, cr0, [r1], {-0}
    206c:	000001da 	ldrdeq	r0, [r0], -sl
    2070:	01006912 	tsteq	r0, r2, lsl r9
    2074:	00004263 	andeq	r4, r0, r3, ror #4
    2078:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    207c:	14c81300 	strbne	r1, [r8], #768	; 0x300
    2080:	6d010000 	stcvs	0, cr0, [r1, #-0]
    2084:	00000042 	andeq	r0, r0, r2, asr #32
    2088:	000135e8 	andeq	r3, r1, r8, ror #11
    208c:	00000084 	andeq	r0, r0, r4, lsl #1
    2090:	021e9c01 	andseq	r9, lr, #256	; 0x100
    2094:	00100000 	andseq	r0, r0, r0
    2098:	01000000 	mrseq	r0, (UNDEF: 0)
    209c:	0000426d 	andeq	r4, r0, sp, ror #4
    20a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    20a4:	0013f310 	andseq	pc, r3, r0, lsl r3	; <UNPREDICTABLE>
    20a8:	216d0100 	cmncs	sp, r0, lsl #2
    20ac:	02000000 	andeq	r0, r0, #0
    20b0:	30107091 	mulscc	r0, r1, r0
    20b4:	01000000 	mrseq	r0, (UNDEF: 0)
    20b8:	0000496d 	andeq	r4, r0, sp, ror #18
    20bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    20c0:	14af1400 	strtne	r1, [pc], #1024	; 20c8 <_start-0x5f38>
    20c4:	7a010000 	bvc	420cc <__bss_end+0x2c5d4>
    20c8:	00000042 	andeq	r0, r0, r2, asr #32
    20cc:	0001366c 	andeq	r3, r1, ip, ror #12
    20d0:	000000cc 	andeq	r0, r0, ip, asr #1
    20d4:	02549c01 	subseq	r9, r4, #256	; 0x100
    20d8:	00100000 	andseq	r0, r0, r0
    20dc:	01000000 	mrseq	r0, (UNDEF: 0)
    20e0:	0000427a 	andeq	r4, r0, sl, ror r2
    20e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    20e8:	0013d70d 	andseq	sp, r3, sp, lsl #14
    20ec:	547c0100 	ldrbtpl	r0, [ip], #-256	; 0x100
    20f0:	02000002 	andeq	r0, r0, #2
    20f4:	0a007491 	beq	1f340 <__bss_end+0x9848>
    20f8:	07000704 	streq	r0, [r0, -r4, lsl #14]
    20fc:	8e140000 	cdphi	0, 1, cr0, cr4, cr0, {0}
    2100:	01000014 	tsteq	r0, r4, lsl r0
    2104:	0000428c 	andeq	r4, r0, ip, lsl #5
    2108:	01373800 	teqeq	r7, r0, lsl #16
    210c:	0000cc00 	andeq	ip, r0, r0, lsl #24
    2110:	919c0100 	orrsls	r0, ip, r0, lsl #2
    2114:	10000002 	andne	r0, r0, r2
    2118:	00000000 	andeq	r0, r0, r0
    211c:	00428c01 	subeq	r8, r2, r1, lsl #24
    2120:	91020000 	mrsls	r0, (UNDEF: 2)
    2124:	13d70d6c 	bicsne	r0, r7, #108, 26	; 0x1b00
    2128:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    212c:	00000254 	andeq	r0, r0, r4, asr r2
    2130:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2134:	00141015 	andseq	r1, r4, r5, lsl r0
    2138:	429e0100 	addsmi	r0, lr, #0, 2
    213c:	04000000 	streq	r0, [r0], #-0
    2140:	18000138 	stmdane	r0, {r3, r4, r5, r8}
    2144:	01000000 	mrseq	r0, (UNDEF: 0)
    2148:	13fe159c 	mvnsne	r1, #156, 10	; 0x27000000
    214c:	a3010000 	movwge	r0, #4096	; 0x1000
    2150:	00000042 	andeq	r0, r0, r2, asr #32
    2154:	0001381c 	andeq	r3, r1, ip, lsl r8
    2158:	00000018 	andeq	r0, r0, r8, lsl r0
    215c:	6c169c01 	ldcvs	12, cr9, [r6], {1}
    2160:	cb000000 	blgt	2168 <_start-0x5e98>
    2164:	17000002 	strne	r0, [r0, -r2]
    2168:	000002cb 	andeq	r0, r0, fp, asr #5
    216c:	040a0047 	streq	r0, [sl], #-71	; 0x47
    2170:	00012307 	andeq	r2, r1, r7, lsl #6
    2174:	144e0d00 	strbne	r0, [lr], #-3328	; 0xd00
    2178:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    217c:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    2180:	48a40305 	stmiami	r4!, {r0, r2, r8, r9}
    2184:	390d0001 	stmdbcc	sp, {r0}
    2188:	01000001 	tsteq	r0, r1
    218c:	0002f419 	andeq	pc, r2, r9, lsl r4	; <UNPREDICTABLE>
    2190:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    2194:	18000144 	stmdane	r0, {r2, r6, r8}
    2198:	000002f9 	strdeq	r0, [r0], -r9
    219c:	02ff0403 	rscseq	r0, pc, #50331648	; 0x3000000
    21a0:	ff190000 			; <UNDEFINED> instruction: 0xff190000
    21a4:	00000000 	andeq	r0, r0, r0
    21a8:	000003ef 	andeq	r0, r0, pc, ror #7
    21ac:	089e0004 	ldmeq	lr, {r2}
    21b0:	01040000 	mrseq	r0, (UNDEF: 4)
    21b4:	00000174 	andeq	r0, r0, r4, ror r1
    21b8:	0014f501 	andseq	pc, r4, r1, lsl #10
    21bc:	01383400 	teqeq	r8, r0, lsl #8
    21c0:	00062c00 	andeq	r2, r6, r0, lsl #24
    21c4:	00127d00 	andseq	r7, r2, r0, lsl #26
    21c8:	160e0200 	strne	r0, [lr], -r0, lsl #4
    21cc:	02010000 	andeq	r0, r1, #0
    21d0:	00005805 	andeq	r5, r0, r5, lsl #16
    21d4:	165b0300 	ldrbne	r0, [fp], -r0, lsl #6
    21d8:	03000000 	movweq	r0, #0
    21dc:	00001676 	andeq	r1, r0, r6, ror r6
    21e0:	172c0301 	strne	r0, [ip, -r1, lsl #6]!
    21e4:	03020000 	movweq	r0, #8192	; 0x2000
    21e8:	0000164f 	andeq	r1, r0, pc, asr #12
    21ec:	16840303 	strne	r0, [r4], r3, lsl #6
    21f0:	03040000 	movweq	r0, #16384	; 0x4000
    21f4:	000015c7 	andeq	r1, r0, r7, asr #11
    21f8:	15db0305 	ldrbne	r0, [fp, #773]	; 0x305
    21fc:	00060000 	andeq	r0, r6, r0
    2200:	00163802 	andseq	r3, r6, r2, lsl #16
    2204:	18020100 	stmdane	r2, {r8}
    2208:	00000071 	andeq	r0, r0, r1, ror r0
    220c:	00164703 	andseq	r4, r6, r3, lsl #14
    2210:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    2214:	01000017 	tsteq	r0, r7, lsl r0
    2218:	01a00400 	lsleq	r0, r0, #8
    221c:	00019a08 	andeq	r9, r1, r8, lsl #20
    2220:	16c20500 	strbne	r0, [r2], r0, lsl #10
    2224:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    2228:	0000019a 	muleq	r0, sl, r1
    222c:	16c90500 	strbne	r0, [r9], r0, lsl #10
    2230:	0a010000 	beq	42238 <__bss_end+0x2c740>
    2234:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2238:	15a40518 	strne	r0, [r4, #1304]!	; 0x518
    223c:	0b010000 	bleq	42244 <__bss_end+0x2c74c>
    2240:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2244:	16d4051c 			; <UNDEFINED> instruction: 0x16d4051c
    2248:	0c010000 	stceq	0, cr0, [r1], {-0}
    224c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2250:	15bb0524 	ldrne	r0, [fp, #1316]!	; 0x524
    2254:	0d010000 	stceq	0, cr0, [r1, #-0]
    2258:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    225c:	16df0528 	ldrbne	r0, [pc], r8, lsr #10
    2260:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2264:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2268:	168f0530 			; <UNDEFINED> instruction: 0x168f0530
    226c:	0f010000 	svceq	0x00010000
    2270:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2274:	16ea0534 			; <UNDEFINED> instruction: 0x16ea0534
    2278:	10010000 	andne	r0, r1, r0
    227c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2280:	16a3053c 			; <UNDEFINED> instruction: 0x16a3053c
    2284:	11010000 	mrsne	r0, (UNDEF: 1)
    2288:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    228c:	16f50540 	ldrbtne	r0, [r5], r0, asr #10
    2290:	12010000 	andne	r0, r1, #0
    2294:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2298:	169d0548 	ldrne	r0, [sp], r8, asr #10
    229c:	13010000 	movwne	r0, #4096	; 0x1000
    22a0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    22a4:	1700054c 	strne	r0, [r0, -ip, asr #10]
    22a8:	14010000 	strne	r0, [r1], #-0
    22ac:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    22b0:	16410554 			; <UNDEFINED> instruction: 0x16410554
    22b4:	15010000 	strne	r0, [r1, #-0]
    22b8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    22bc:	170b0558 	smlsdne	fp, r8, r5, r0
    22c0:	16010000 	strne	r0, [r1], -r0
    22c4:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    22c8:	15c10560 	strbne	r0, [r1, #1376]	; 0x560
    22cc:	17010000 	strne	r0, [r1, -r0]
    22d0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    22d4:	17160564 	ldrne	r0, [r6, -r4, ror #10]
    22d8:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    22dc:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    22e0:	1667056c 	strbtne	r0, [r7], -ip, ror #10
    22e4:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    22e8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    22ec:	17210570 			; <UNDEFINED> instruction: 0x17210570
    22f0:	1a010000 	bne	422f8 <__bss_end+0x2c800>
    22f4:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    22f8:	16210578 			; <UNDEFINED> instruction: 0x16210578
    22fc:	1b010000 	blne	42304 <__bss_end+0x2c80c>
    2300:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2304:	1743057c 	smlsldxne	r0, r3, ip, r5
    2308:	1c010000 	stcne	0, cr0, [r1], {-0}
    230c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2310:	16010584 	strne	r0, [r1], -r4, lsl #11
    2314:	1d010000 	stcne	0, cr0, [r1, #-0]
    2318:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    231c:	174e0588 	strbne	r0, [lr, -r8, lsl #11]
    2320:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    2324:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    2328:	16080590 			; <UNDEFINED> instruction: 0x16080590
    232c:	1f010000 	svcne	0x00010000
    2330:	000001c8 	andeq	r0, r0, r8, asr #3
    2334:	166d0594 			; <UNDEFINED> instruction: 0x166d0594
    2338:	20010000 	andcs	r0, r1, r0
    233c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    2340:	b1060098 	swplt	r0, r8, [r6]
    2344:	aa000001 	bge	2350 <_start-0x5cb0>
    2348:	07000001 	streq	r0, [r0, -r1]
    234c:	000001aa 	andeq	r0, r0, sl, lsr #3
    2350:	04080005 	streq	r0, [r8], #-5
    2354:	00012307 	andeq	r2, r1, r7, lsl #6
    2358:	07040800 	streq	r0, [r4, -r0, lsl #16]
    235c:	000006fb 	strdeq	r0, [r0], -fp
    2360:	0001b106 	andeq	fp, r1, r6, lsl #2
    2364:	0001c800 	andeq	ip, r1, r0, lsl #16
    2368:	01aa0700 			; <UNDEFINED> instruction: 0x01aa0700
    236c:	00010000 	andeq	r0, r1, r0
    2370:	0001b106 	andeq	fp, r1, r6, lsl #2
    2374:	0001d800 	andeq	sp, r1, r0, lsl #16
    2378:	01aa0700 			; <UNDEFINED> instruction: 0x01aa0700
    237c:	00000000 	andeq	r0, r0, r0
    2380:	00158d09 	andseq	r8, r5, r9, lsl #26
    2384:	71220100 	teqvc	r2, r0, lsl #2
    2388:	0a000000 	beq	2390 <_start-0x5c70>
    238c:	00001628 	andeq	r1, r0, r8, lsr #12
    2390:	38342701 	ldmdacc	r4!, {r0, r8, r9, sl, sp}
    2394:	00d40001 	sbcseq	r0, r4, r1
    2398:	9c010000 	stcls	0, cr0, [r1], {-0}
    239c:	0000023f 	andeq	r0, r0, pc, lsr r2
    23a0:	0016bb0b 	andseq	fp, r6, fp, lsl #22
    23a4:	3f270100 	svccc	0x00270100
    23a8:	02000002 	andeq	r0, r0, #2
    23ac:	950b6491 	strls	r6, [fp, #-1169]	; 0x491
    23b0:	01000016 	tsteq	r0, r6, lsl r0
    23b4:	00023f27 	andeq	r3, r2, r7, lsr #30
    23b8:	60910200 	addsvs	r0, r1, r0, lsl #4
    23bc:	0015860c 	andseq	r8, r5, ip, lsl #12
    23c0:	46290100 	strtmi	r0, [r9], -r0, lsl #2
    23c4:	02000002 	andeq	r0, r0, #2
    23c8:	760d7491 			; <UNDEFINED> instruction: 0x760d7491
    23cc:	01006c61 	tsteq	r0, r1, ror #24
    23d0:	0001b12b 	andeq	fp, r1, fp, lsr #2
    23d4:	70910200 	addsvc	r0, r1, r0, lsl #4
    23d8:	00159f0c 	andseq	r9, r5, ip, lsl #30
    23dc:	462d0100 	strtmi	r0, [sp], -r0, lsl #2
    23e0:	02000002 	andeq	r0, r0, #2
    23e4:	08006c91 	stmdaeq	r0, {r0, r4, r7, sl, fp, sp, lr}
    23e8:	07000704 	streq	r0, [r0, -r4, lsl #14]
    23ec:	040e0000 	streq	r0, [lr], #-0
    23f0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    23f4:	15aa0f00 	strne	r0, [sl, #3840]!	; 0xf00
    23f8:	33010000 	movwcc	r0, #4096	; 0x1000
    23fc:	00013908 	andeq	r3, r1, r8, lsl #18
    2400:	00000030 	andeq	r0, r0, r0, lsr r0
    2404:	027f9c01 	rsbseq	r9, pc, #256	; 0x100
    2408:	bb0b0000 	bllt	2c2410 <__bss_end+0x2ac918>
    240c:	01000016 	tsteq	r0, r6, lsl r0
    2410:	00023f33 	andeq	r3, r2, r3, lsr pc
    2414:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2418:	72696410 	rsbvc	r6, r9, #16, 8	; 0x10000000
    241c:	58330100 	ldmdapl	r3!, {r8}
    2420:	02000000 	andeq	r0, r0, #0
    2424:	0a007391 	beq	1f270 <__bss_end+0x9778>
    2428:	0000173b 	andeq	r1, r0, fp, lsr r7
    242c:	39383701 	ldmdbcc	r8!, {r0, r8, r9, sl, ip, sp}
    2430:	00c40001 	sbceq	r0, r4, r1
    2434:	9c010000 	stcls	0, cr0, [r1], {-0}
    2438:	000002cd 	andeq	r0, r0, sp, asr #5
    243c:	0016bb0b 	andseq	fp, r6, fp, lsl #22
    2440:	3f370100 	svccc	0x00370100
    2444:	02000002 	andeq	r0, r0, #2
    2448:	1a0b6c91 	bne	2dd694 <__bss_end+0x2c7b9c>
    244c:	01000016 	tsteq	r0, r6, lsl r0
    2450:	00023f37 	andeq	r3, r2, r7, lsr pc
    2454:	68910200 	ldmvs	r1, {r9}
    2458:	0015860c 	andseq	r8, r5, ip, lsl #12
    245c:	b1380100 	teqlt	r8, r0, lsl #2
    2460:	02000001 	andeq	r0, r0, #1
    2464:	d70c7491 			; <UNDEFINED> instruction: 0xd70c7491
    2468:	01000013 	tsteq	r0, r3, lsl r0
    246c:	0001b139 	andeq	fp, r1, r9, lsr r1
    2470:	70910200 	addsvc	r0, r1, r0, lsl #4
    2474:	157d1100 	ldrbne	r1, [sp, #-256]!	; 0x100
    2478:	42010000 	andmi	r0, r1, #0
    247c:	00000246 	andeq	r0, r0, r6, asr #4
    2480:	000139fc 	strdeq	r3, [r1], -ip
    2484:	00000058 	andeq	r0, r0, r8, asr r0
    2488:	02f59c01 	rscseq	r9, r5, #256	; 0x100
    248c:	bb0b0000 	bllt	2c2494 <__bss_end+0x2ac99c>
    2490:	01000016 	tsteq	r0, r6, lsl r0
    2494:	00023f42 	andeq	r3, r2, r2, asr #30
    2498:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    249c:	15f00a00 	ldrbne	r0, [r0, #2560]!	; 0xa00
    24a0:	46010000 	strmi	r0, [r1], -r0
    24a4:	00013a54 	andeq	r3, r1, r4, asr sl
    24a8:	000001d8 	ldrdeq	r0, [r0], -r8
    24ac:	03439c01 	movteq	r9, #15361	; 0x3c01
    24b0:	bb0b0000 	bllt	2c24b8 <__bss_end+0x2ac9c0>
    24b4:	01000016 	tsteq	r0, r6, lsl r0
    24b8:	00023f46 	andeq	r3, r2, r6, asr #30
    24bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    24c0:	0001270b 	andeq	r2, r1, fp, lsl #14
    24c4:	21460100 	mrscs	r0, (UNDEF: 86)
    24c8:	02000000 	andeq	r0, r0, #0
    24cc:	d70c6b91 			; <UNDEFINED> instruction: 0xd70c6b91
    24d0:	01000013 	tsteq	r0, r3, lsl r0
    24d4:	0001b148 	andeq	fp, r1, r8, asr #2
    24d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    24dc:	0015860c 	andseq	r8, r5, ip, lsl #12
    24e0:	b1490100 	mrslt	r0, (UNDEF: 89)
    24e4:	02000001 	andeq	r0, r0, #1
    24e8:	0a007091 	beq	1e734 <__bss_end+0x8c3c>
    24ec:	000016a9 	andeq	r1, r0, r9, lsr #13
    24f0:	3c2c6301 	stccc	3, cr6, [ip], #-4
    24f4:	01e00001 	mvneq	r0, r1
    24f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    24fc:	00000391 	muleq	r0, r1, r3
    2500:	0016bb0b 	andseq	fp, r6, fp, lsl #22
    2504:	3f630100 	svccc	0x00630100
    2508:	02000002 	andeq	r0, r0, #2
    250c:	270b6c91 			; <UNDEFINED> instruction: 0x270b6c91
    2510:	01000001 	tsteq	r0, r1
    2514:	00002163 	andeq	r2, r0, r3, ror #2
    2518:	6b910200 	blvs	fe442d20 <_estack+0xf6432d20>
    251c:	0013d70c 	andseq	sp, r3, ip, lsl #14
    2520:	b1650100 	cmnlt	r5, r0, lsl #2
    2524:	02000001 	andeq	r0, r0, #1
    2528:	860c7491 			; <UNDEFINED> instruction: 0x860c7491
    252c:	01000015 	tsteq	r0, r5, lsl r0
    2530:	0001b166 	andeq	fp, r1, r6, ror #2
    2534:	70910200 	addsvc	r0, r1, r0, lsl #4
    2538:	14e20a00 	strbtne	r0, [r2], #2560	; 0xa00
    253c:	80010000 	andhi	r0, r1, r0
    2540:	00013e0c 	andeq	r3, r1, ip, lsl #28
    2544:	00000054 	andeq	r0, r0, r4, asr r0
    2548:	03d19c01 	bicseq	r9, r1, #256	; 0x100
    254c:	bb0b0000 	bllt	2c2554 <__bss_end+0x2aca5c>
    2550:	01000016 	tsteq	r0, r6, lsl r0
    2554:	00023f80 	andeq	r3, r2, r0, lsl #31
    2558:	6c910200 	lfmvs	f0, 4, [r1], {0}
    255c:	0013d70c 	andseq	sp, r3, ip, lsl #14
    2560:	b1820100 	orrlt	r0, r2, r0, lsl #2
    2564:	02000001 	andeq	r0, r0, #1
    2568:	860c7491 			; <UNDEFINED> instruction: 0x860c7491
    256c:	01000015 	tsteq	r0, r5, lsl r0
    2570:	0001b183 	andeq	fp, r1, r3, lsl #3
    2574:	70910200 	addsvc	r0, r1, r0, lsl #4
    2578:	01391200 	teqeq	r9, r0, lsl #4
    257c:	24010000 	strcs	r0, [r1], #-0
    2580:	000003e2 	andeq	r0, r0, r2, ror #7
    2584:	44400305 	strbmi	r0, [r0], #-773	; 0x305
    2588:	e7130001 	ldr	r0, [r3, -r1]
    258c:	14000003 	strne	r0, [r0], #-3
    2590:	0003ed04 	andeq	lr, r3, r4, lsl #26
    2594:	01d81500 	bicseq	r1, r8, r0, lsl #10
    2598:	c3000000 	movwgt	r0, #0
    259c:	04000002 	streq	r0, [r0], #-2
    25a0:	0009cd00 	andeq	ip, r9, r0, lsl #26
    25a4:	74010400 	strvc	r0, [r1], #-1024	; 0x400
    25a8:	01000001 	tsteq	r0, r1
    25ac:	000018b2 			; <UNDEFINED> instruction: 0x000018b2
    25b0:	00013e60 	andeq	r3, r1, r0, ror #28
    25b4:	00000498 	muleq	r0, r8, r4
    25b8:	00001394 	muleq	r0, r4, r3
    25bc:	00088d02 	andeq	r8, r8, r2, lsl #26
    25c0:	2cd40200 	lfmcs	f0, 2, [r4], {0}
    25c4:	03000000 	movweq	r0, #0
    25c8:	07000704 	streq	r0, [r0, -r4, lsl #14]
    25cc:	04040000 	streq	r0, [r4], #-0
    25d0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    25d4:	06010300 	streq	r0, [r1], -r0, lsl #6
    25d8:	0000070f 	andeq	r0, r0, pc, lsl #14
    25dc:	0d080103 	stfeqs	f0, [r8, #-12]
    25e0:	03000007 	movweq	r0, #7
    25e4:	08260502 	stmdaeq	r6!, {r1, r8, sl}
    25e8:	02030000 	andeq	r0, r3, #0
    25ec:	0000e907 	andeq	lr, r0, r7, lsl #18
    25f0:	05040300 	streq	r0, [r4, #-768]	; 0x300
    25f4:	00000806 	andeq	r0, r0, r6, lsl #16
    25f8:	fb070403 	blx	1c360e <__bss_end+0x1adb16>
    25fc:	03000006 	movweq	r0, #6
    2600:	08010508 	stmdaeq	r1, {r3, r8, sl}
    2604:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2608:	0006f607 	andeq	pc, r6, r7, lsl #12
    260c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2610:	00000123 	andeq	r0, r0, r3, lsr #2
    2614:	04060405 	streq	r0, [r6], #-1029	; 0x405
    2618:	00000041 	andeq	r0, r0, r1, asr #32
    261c:	16080103 	strne	r0, [r8], -r3, lsl #2
    2620:	07000007 	streq	r0, [r0, -r7]
    2624:	000017df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    2628:	5c011000 	stcpl	0, cr1, [r1], {-0}
    262c:	000000ac 	andeq	r0, r0, ip, lsr #1
    2630:	0017f108 	andseq	pc, r7, r8, lsl #2
    2634:	ac5f0100 	ldfgee	f0, [pc], {-0}
    2638:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    263c:	000017ea 	andeq	r1, r0, sl, ror #15
    2640:	00b86301 	adcseq	r6, r8, r1, lsl #6
    2644:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2648:	000000b1 	strheq	r0, [r0], -r1
    264c:	ab040803 	blge	104660 <__bss_end+0xeeb68>
    2650:	0a000017 	beq	26b4 <_start-0x594c>
    2654:	00000041 	andeq	r0, r0, r1, asr #32
    2658:	000000c9 	andeq	r0, r0, r9, asr #1
    265c:	0000720b 	andeq	r7, r0, fp, lsl #4
    2660:	000fff00 	andeq	pc, pc, r0, lsl #30
    2664:	0017920c 	andseq	r9, r7, ip, lsl #4
    2668:	68010800 	stmdavs	r1, {fp}
    266c:	000000ee 	andeq	r0, r0, lr, ror #1
    2670:	0019510d 	andseq	r5, r9, sp, lsl #2
    2674:	ee6a0100 	powe	f0, f2, f0
    2678:	00000000 	andeq	r0, r0, r0
    267c:	0017f80d 	andseq	pc, r7, sp, lsl #16
    2680:	216b0100 	cmncs	fp, r0, lsl #2
    2684:	04000000 	streq	r0, [r0], #-0
    2688:	c9040600 	stmdbgt	r4, {r9, sl}
    268c:	02000000 	andeq	r0, r0, #0
    2690:	00001864 	andeq	r1, r0, r4, ror #16
    2694:	00c96c01 	sbceq	r6, r9, r1, lsl #24
    2698:	c10e0000 	mrsgt	r0, (UNDEF: 14)
    269c:	01000017 	tsteq	r0, r7, lsl r0
    26a0:	00007992 	muleq	r0, r2, r9
    26a4:	013e6000 	teqeq	lr, r0
    26a8:	0001c400 	andeq	ip, r1, r0, lsl #8
    26ac:	5f9c0100 	svcpl	0x009c0100
    26b0:	0f000001 	svceq	0x00000001
    26b4:	00001879 	andeq	r1, r0, r9, ror r8
    26b8:	00219201 	eoreq	r9, r1, r1, lsl #4
    26bc:	91020000 	mrsls	r0, (UNDEF: 2)
    26c0:	17b21064 	ldrne	r1, [r2, r4, rrx]!
    26c4:	94010000 	strls	r0, [r1], #-0
    26c8:	0000015f 	andeq	r0, r0, pc, asr r1
    26cc:	10749102 	rsbsne	r9, r4, r2, lsl #2
    26d0:	0000180f 	andeq	r1, r0, pc, lsl #16
    26d4:	015f9401 	cmpeq	pc, r1, lsl #8
    26d8:	91020000 	mrsls	r0, (UNDEF: 2)
    26dc:	18a31070 	stmiane	r3!, {r4, r5, r6, ip}
    26e0:	94010000 	strls	r0, [r1], #-0
    26e4:	0000015f 	andeq	r0, r0, pc, asr r1
    26e8:	10689102 	rsbne	r9, r8, r2, lsl #2
    26ec:	0000182e 	andeq	r1, r0, lr, lsr #16
    26f0:	00799501 	rsbseq	r9, r9, r1, lsl #10
    26f4:	91020000 	mrsls	r0, (UNDEF: 2)
    26f8:	0406006c 	streq	r0, [r6], #-108	; 0x6c
    26fc:	000000f4 	strdeq	r0, [r0], -r4
    2700:	00188511 	andseq	r8, r8, r1, lsl r5
    2704:	24ee0100 	strbtcs	r0, [lr], #256	; 0x100
    2708:	78000140 	stmdavc	r0, {r6, r8}
    270c:	01000000 	mrseq	r0, (UNDEF: 0)
    2710:	0001a49c 	muleq	r1, ip, r4
    2714:	76701200 	ldrbtvc	r1, [r0], -r0, lsl #4
    2718:	79ee0100 	stmibvc	lr!, {r8}^
    271c:	02000000 	andeq	r0, r0, #0
    2720:	70136c91 	mulsvc	r3, r1, ip
    2724:	01006375 	tsteq	r0, r5, ror r3
    2728:	00007bf0 	strdeq	r7, [r0], -r0
    272c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2730:	0017ba10 	andseq	fp, r7, r0, lsl sl
    2734:	5ff10100 	svcpl	0x00f10100
    2738:	02000001 	andeq	r0, r0, #1
    273c:	14007091 	strne	r7, [r0], #-145	; 0x91
    2740:	0000177d 	andeq	r1, r0, sp, ror r7
    2744:	21010701 	tstcs	r1, r1, lsl #14
    2748:	9c000000 	stcls	0, cr0, [r0], {-0}
    274c:	24000140 	strcs	r0, [r0], #-320	; 0x140
    2750:	01000000 	mrseq	r0, (UNDEF: 0)
    2754:	1837159c 	ldmdane	r7!, {r2, r3, r4, r7, r8, sl, ip}
    2758:	0d010000 	stceq	0, cr0, [r1, #-0]
    275c:	0140c001 	cmpeq	r0, r1
    2760:	00001400 	andeq	r1, r0, r0, lsl #8
    2764:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    2768:	0000179f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    276c:	d4011301 	strle	r1, [r1], #-769	; 0x301
    2770:	d4000140 	strle	r0, [r0], #-320	; 0x140
    2774:	01000000 	mrseq	r0, (UNDEF: 0)
    2778:	0002019c 	muleq	r2, ip, r1
    277c:	17ce1700 	strbne	r1, [lr, r0, lsl #14]
    2780:	15010000 	strne	r0, [r1, #-0]
    2784:	00015f01 	andeq	r5, r1, r1, lsl #30
    2788:	70910200 	addsvc	r0, r1, r0, lsl #4
    278c:	00196117 	andseq	r6, r9, r7, lsl r1
    2790:	01160100 	tsteq	r6, r0, lsl #2
    2794:	0000007b 	andeq	r0, r0, fp, ror r0
    2798:	00749102 	rsbseq	r9, r4, r2, lsl #2
    279c:	00176216 	andseq	r6, r7, r6, lsl r2
    27a0:	01340100 	teqeq	r4, r0, lsl #2
    27a4:	000141a8 	andeq	r4, r1, r8, lsr #3
    27a8:	00000150 	andeq	r0, r0, r0, asr r1
    27ac:	02459c01 	subeq	r9, r5, #256	; 0x100
    27b0:	6c180000 	ldcvs	0, cr0, [r8], {-0}
    27b4:	01000019 	tsteq	r0, r9, lsl r0
    27b8:	015f0134 	cmpeq	pc, r4, lsr r1	; <UNPREDICTABLE>
    27bc:	91020000 	mrsls	r0, (UNDEF: 2)
    27c0:	081b176c 	ldmdaeq	fp, {r2, r3, r5, r6, r8, r9, sl, ip}
    27c4:	36010000 	strcc	r0, [r1], -r0
    27c8:	00015f01 	andeq	r5, r1, r1, lsl #30
    27cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    27d0:	63757019 	cmnvs	r5, #25
    27d4:	01370100 	teqeq	r7, r0, lsl #2
    27d8:	0000007b 	andeq	r0, r0, fp, ror r0
    27dc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    27e0:	00180310 	andseq	r0, r8, r0, lsl r3
    27e4:	88640100 	stmdahi	r4!, {r8}^
    27e8:	05000000 	streq	r0, [r0, #-0]
    27ec:	014ae803 	cmpeq	sl, r3, lsl #16
    27f0:	184d1000 	stmdane	sp, {ip}^
    27f4:	82010000 	andhi	r0, r1, #0
    27f8:	00000267 	andeq	r0, r0, r7, ror #4
    27fc:	44440305 	strbmi	r0, [r4], #-773	; 0x305
    2800:	4f1a0001 	svcmi	0x001a0001
    2804:	10000000 	andne	r0, r0, r0
    2808:	0000181f 	andeq	r1, r0, pc, lsl r8
    280c:	027d8501 	rsbseq	r8, sp, #4194304	; 0x400000
    2810:	03050000 	movweq	r0, #20480	; 0x5000
    2814:	00014448 	andeq	r4, r1, r8, asr #8
    2818:	0000211a 	andeq	r2, r0, sl, lsl r1
    281c:	185d1000 	ldmdane	sp, {ip}^
    2820:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2824:	000000f4 	strdeq	r0, [r0], -r4
    2828:	5ae80305 	bpl	ffa03444 <_estack+0xf79f3444>
    282c:	09100001 	ldmdbeq	r0, {r0}
    2830:	01000018 	tsteq	r0, r8, lsl r0
    2834:	00015f88 	andeq	r5, r1, r8, lsl #31
    2838:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    283c:	1000015a 	andne	r0, r0, sl, asr r1
    2840:	0000188f 	andeq	r1, r0, pc, lsl #17
    2844:	00218c01 	eoreq	r8, r1, r1, lsl #24
    2848:	03050000 	movweq	r0, #20480	; 0x5000
    284c:	0001471c 	andeq	r4, r1, ip, lsl r7
    2850:	00186f1b 	andseq	r6, r8, fp, lsl pc
    2854:	21910100 	orrscs	r0, r1, r0, lsl #2
    2858:	05000000 	streq	r0, [r0, #-0]
    285c:	015af403 	cmpeq	sl, r3, lsl #8
    2860:	00c20000 	sbceq	r0, r2, r0
    2864:	00040000 	andeq	r0, r4, r0
    2868:	00000b66 	andeq	r0, r0, r6, ror #22
    286c:	01740104 	cmneq	r4, r4, lsl #2
    2870:	8d010000 	stchi	0, cr0, [r1, #-0]
    2874:	10000019 	andne	r0, r0, r9, lsl r0
    2878:	20000143 	andcs	r0, r0, r3, asr #2
    287c:	25000001 	strcs	r0, [r0, #-1]
    2880:	02000015 	andeq	r0, r0, #21
    2884:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2888:	04030074 	streq	r0, [r3], #-116	; 0x74
    288c:	00070007 	andeq	r0, r7, r7
    2890:	03040400 	movweq	r0, #17408	; 0x4400
    2894:	06fb0704 	ldrbteq	r0, [fp], r4, lsl #14
    2898:	04030000 	streq	r0, [r3], #-0
    289c:	00080605 	andeq	r0, r8, r5, lsl #12
    28a0:	06010300 	streq	r0, [r1], -r0, lsl #6
    28a4:	0000070f 	andeq	r0, r0, pc, lsl #14
    28a8:	e9070203 	stmdb	r7, {r0, r1, r9}
    28ac:	03000000 	movweq	r0, #0
    28b0:	01230704 	teqeq	r3, r4, lsl #14
    28b4:	7c050000 	stcvc	0, cr0, [r5], {-0}
    28b8:	01000019 	tsteq	r0, r9, lsl r0
    28bc:	01431007 	cmpeq	r3, r7
    28c0:	00003c00 	andeq	r3, r0, r0, lsl #24
    28c4:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    28c8:	06000000 	streq	r0, [r0], -r0
    28cc:	00000030 	andeq	r0, r0, r0, lsr r0
    28d0:	002f0701 	eoreq	r0, pc, r1, lsl #14
    28d4:	91020000 	mrsls	r0, (UNDEF: 2)
    28d8:	0069076c 	rsbeq	r0, r9, ip, ror #14
    28dc:	00210901 	eoreq	r0, r1, r1, lsl #18
    28e0:	91020000 	mrsls	r0, (UNDEF: 2)
    28e4:	82050074 	andhi	r0, r5, #116	; 0x74
    28e8:	01000019 	tsteq	r0, r9, lsl r0
    28ec:	01434c11 	cmpeq	r3, r1, lsl ip
    28f0:	00004400 	andeq	r4, r0, r0, lsl #8
    28f4:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    28f8:	06000000 	streq	r0, [r0], -r0
    28fc:	00000030 	andeq	r0, r0, r0, lsr r0
    2900:	002f1101 	eoreq	r1, pc, r1, lsl #2
    2904:	91020000 	mrsls	r0, (UNDEF: 2)
    2908:	0069076c 	rsbeq	r0, r9, ip, ror #14
    290c:	00211301 	eoreq	r1, r1, r1, lsl #6
    2910:	91020000 	mrsls	r0, (UNDEF: 2)
    2914:	88080074 	stmdahi	r8, {r2, r4, r5, r6}
    2918:	01000019 	tsteq	r0, r9, lsl r0
    291c:	01439023 	cmpeq	r3, r3, lsr #32
    2920:	0000a000 	andeq	sl, r0, r0
    2924:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
   c:	00171006 	andseq	r1, r7, r6
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <__bss_end+0xf6d150>
  18:	00000803 	andeq	r0, r0, r3, lsl #16
  1c:	0b002403 	bleq	9030 <__module_entries_end+0xf8c>
  20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  24:	0400000e 	streq	r0, [r0], #-14
  28:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  2c:	0b3b0b3a 	bleq	ec2d1c <__bss_end+0xead224>
  30:	00001349 	andeq	r1, r0, r9, asr #6
  34:	0b000f05 	bleq	3c50 <_start-0x43b0>
  38:	0013490b 	andseq	r4, r3, fp, lsl #18
  3c:	01150600 	tsteq	r5, r0, lsl #12
  40:	13011927 	movwne	r1, #6439	; 0x1927
  44:	05070000 	streq	r0, [r7, #-0]
  48:	00134900 	andseq	r4, r3, r0, lsl #18
  4c:	000f0800 	andeq	r0, pc, r0, lsl #16
  50:	00000b0b 	andeq	r0, r0, fp, lsl #22
  54:	03011309 	movweq	r1, #4873	; 0x1309
  58:	3a0b0b0e 	bcc	2c2c98 <__bss_end+0x2ad1a0>
  5c:	010b3b0b 	tsteq	fp, fp, lsl #22
  60:	0a000013 	beq	b4 <_start-0x7f4c>
  64:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  68:	0b3b0b3a 	bleq	ec2d58 <__bss_end+0xead260>
  6c:	0b381349 	bleq	e04d98 <__bss_end+0xdef2a0>
  70:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  74:	03193f01 	tsteq	r9, #1, 30
  78:	3b0b3a0e 	blcc	2ce8b8 <__bss_end+0x2b8dc0>
  7c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  84:	97184006 	ldrls	r4, [r8, -r6]
  88:	13011942 	movwne	r1, #6466	; 0x1942
  8c:	050c0000 	streq	r0, [ip, #-0]
  90:	3a0e0300 	bcc	380c98 <__bss_end+0x36b1a0>
  94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  98:	00180213 	andseq	r0, r8, r3, lsl r2
  9c:	00340d00 	eorseq	r0, r4, r0, lsl #26
  a0:	0b3a0e03 	bleq	e838b4 <__bss_end+0xe6ddbc>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	00001802 	andeq	r1, r0, r2, lsl #16
  ac:	3f002e0e 	svccc	0x00002e0e
  b0:	3a0e0319 	bcc	380d1c <__bss_end+0x36b224>
  b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  b8:	11134919 	tstne	r3, r9, lsl r9
  bc:	40061201 	andmi	r1, r6, r1, lsl #4
  c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  c8:	03193f00 	tsteq	r9, #0, 30
  cc:	3b0b3a0e 	blcc	2ce90c <__bss_end+0x2b8e14>
  d0:	1119270b 	tstne	r9, fp, lsl #14
  d4:	40061201 	andmi	r1, r6, r1, lsl #4
  d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  dc:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
  e0:	03193f01 	tsteq	r9, #1, 30
  e4:	3b0b3a0e 	blcc	2ce924 <__bss_end+0x2b8e2c>
  e8:	1119270b 	tstne	r9, fp, lsl #14
  ec:	40061201 	andmi	r1, r6, r1, lsl #4
  f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f4:	00001301 	andeq	r1, r0, r1, lsl #6
  f8:	03012e11 	movweq	r2, #7697	; 0x1e11
  fc:	3b0b3a0e 	blcc	2ce93c <__bss_end+0x2b8e44>
 100:	1119270b 	tstne	r9, fp, lsl #14
 104:	40061201 	andmi	r1, r6, r1, lsl #4
 108:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 10c:	00001301 	andeq	r1, r0, r1, lsl #6
 110:	49002612 	stmdbmi	r0, {r1, r4, r9, sl, sp}
 114:	13000013 	movwne	r0, #19
 118:	13490035 	movtne	r0, #36917	; 0x9035
 11c:	01000000 	mrseq	r0, (UNDEF: 0)
 120:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 124:	0e030b13 	vmoveq.32	d3[0], r0
 128:	06120111 			; <UNDEFINED> instruction: 0x06120111
 12c:	00001710 	andeq	r1, r0, r0, lsl r7
 130:	0b002402 	bleq	9140 <__module_entries_end+0x109c>
 134:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 138:	03000008 	movweq	r0, #8
 13c:	0b0b0024 	bleq	2c01d4 <__bss_end+0x2aa6dc>
 140:	0e030b3e 	vmoveq.16	d3[0], r0
 144:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 148:	03193f01 	tsteq	r9, #1, 30
 14c:	3b0b3a0e 	blcc	2ce98c <__bss_end+0x2b8e94>
 150:	1119270b 	tstne	r9, fp, lsl #14
 154:	40061201 	andmi	r1, r6, r1, lsl #4
 158:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 15c:	00001301 	andeq	r1, r0, r1, lsl #6
 160:	11010b05 	tstne	r1, r5, lsl #22
 164:	00061201 	andeq	r1, r6, r1, lsl #4
 168:	00340600 	eorseq	r0, r4, r0, lsl #12
 16c:	0b3a0e03 	bleq	e83980 <__bss_end+0xe6de88>
 170:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 174:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 178:	35070000 	strcc	r0, [r7, #-0]
 17c:	00134900 	andseq	r4, r3, r0, lsl #18
 180:	000f0800 	andeq	r0, pc, r0, lsl #16
 184:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 188:	35090000 	strcc	r0, [r9, #-0]
 18c:	0a000000 	beq	194 <_start-0x7e6c>
 190:	0111010b 	tsteq	r1, fp, lsl #2
 194:	13010612 	movwne	r0, #5650	; 0x1612
 198:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 19c:	03193f01 	tsteq	r9, #1, 30
 1a0:	3b0b3a0e 	blcc	2ce9e0 <__bss_end+0x2b8ee8>
 1a4:	1119270b 	tstne	r9, fp, lsl #14
 1a8:	40061201 	andmi	r1, r6, r1, lsl #4
 1ac:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1b0:	00001301 	andeq	r1, r0, r1, lsl #6
 1b4:	3f002e0c 	svccc	0x00002e0c
 1b8:	3a0e0319 	bcc	380e24 <__bss_end+0x36b32c>
 1bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1c4:	97184006 	ldrls	r4, [r8, -r6]
 1c8:	00001942 	andeq	r1, r0, r2, asr #18
 1cc:	0300340d 	movweq	r3, #1037	; 0x40d
 1d0:	3b0b3a0e 	blcc	2cea10 <__bss_end+0x2b8f18>
 1d4:	3f13490b 	svccc	0x0013490b
 1d8:	00180219 	andseq	r0, r8, r9, lsl r2
 1dc:	11010000 	mrsne	r0, (UNDEF: 1)
 1e0:	130e2501 	movwne	r2, #58625	; 0xe501
 1e4:	110e030b 	tstne	lr, fp, lsl #6
 1e8:	10061201 	andne	r1, r6, r1, lsl #4
 1ec:	02000017 	andeq	r0, r0, #23
 1f0:	0b0b0024 	bleq	2c0288 <__bss_end+0x2aa790>
 1f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1f8:	24030000 	strcs	r0, [r3], #-0
 1fc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 200:	000e030b 	andeq	r0, lr, fp, lsl #6
 204:	000f0400 	andeq	r0, pc, r0, lsl #8
 208:	00000b0b 	andeq	r0, r0, fp, lsl #22
 20c:	03001605 	movweq	r1, #1541	; 0x605
 210:	3b0b3a0e 	blcc	2cea50 <__bss_end+0x2b8f58>
 214:	0013490b 	andseq	r4, r3, fp, lsl #18
 218:	01130600 	tsteq	r3, r0, lsl #12
 21c:	0b0b0e03 	bleq	2c3a30 <__bss_end+0x2adf38>
 220:	0b3b0b3a 	bleq	ec2f10 <__bss_end+0xead418>
 224:	00001301 	andeq	r1, r0, r1, lsl #6
 228:	03000d07 	movweq	r0, #3335	; 0xd07
 22c:	3b0b3a0e 	blcc	2cea6c <__bss_end+0x2b8f74>
 230:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 234:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 238:	0b0b000f 	bleq	2c027c <__bss_end+0x2aa784>
 23c:	00001349 	andeq	r1, r0, r9, asr #6
 240:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
 244:	0a000013 	beq	298 <_start-0x7d68>
 248:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 24c:	00001301 	andeq	r1, r0, r1, lsl #6
 250:	4900050b 	stmdbmi	r0, {r0, r1, r3, r8, sl}
 254:	0c000013 	stceq	0, cr0, [r0], {19}
 258:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 25c:	0b3a0e03 	bleq	e83a70 <__bss_end+0xe6df78>
 260:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 264:	01111349 	tsteq	r1, r9, asr #6
 268:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 26c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 270:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 274:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 278:	0b3b0b3a 	bleq	ec2f68 <__bss_end+0xead470>
 27c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 280:	340e0000 	strcc	r0, [lr], #-0
 284:	3a0e0300 	bcc	380e8c <__bss_end+0x36b394>
 288:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 28c:	00180213 	andseq	r0, r8, r3, lsl r2
 290:	012e0f00 	teqeq	lr, r0, lsl #30
 294:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 298:	0b3b0b3a 	bleq	ec2f88 <__bss_end+0xead490>
 29c:	01111927 	tsteq	r1, r7, lsr #18
 2a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2a4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2a8:	10000013 	andne	r0, r0, r3, lsl r0
 2ac:	0e03012e 	adfeqsp	f0, f3, #0.5
 2b0:	0b3b0b3a 	bleq	ec2fa0 <__bss_end+0xead4a8>
 2b4:	01111927 	tsteq	r1, r7, lsr #18
 2b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2bc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2c0:	11000013 	tstne	r0, r3, lsl r0
 2c4:	0111010b 	tsteq	r1, fp, lsl #2
 2c8:	00000612 	andeq	r0, r0, r2, lsl r6
 2cc:	03012e12 	movweq	r2, #7698	; 0x1e12
 2d0:	3b0b3a0e 	blcc	2ceb10 <__bss_end+0x2b9018>
 2d4:	11192705 	tstne	r9, r5, lsl #14
 2d8:	40061201 	andmi	r1, r6, r1, lsl #4
 2dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2e0:	00001301 	andeq	r1, r0, r1, lsl #6
 2e4:	03003413 	movweq	r3, #1043	; 0x413
 2e8:	3b0b3a0e 	blcc	2ceb28 <__bss_end+0x2b9030>
 2ec:	02134905 	andseq	r4, r3, #81920	; 0x14000
 2f0:	14000018 	strne	r0, [r0], #-24
 2f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2f8:	0b3a0e03 	bleq	e83b0c <__bss_end+0xe6e014>
 2fc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 300:	06120111 			; <UNDEFINED> instruction: 0x06120111
 304:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 308:	00130119 	andseq	r0, r3, r9, lsl r1
 30c:	00261500 	eoreq	r1, r6, r0, lsl #10
 310:	00001349 	andeq	r1, r0, r9, asr #6
 314:	3f012e16 	svccc	0x00012e16
 318:	3a0e0319 	bcc	380f84 <__bss_end+0x36b48c>
 31c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 320:	11134919 	tstne	r3, r9, lsl r9
 324:	40061201 	andmi	r1, r6, r1, lsl #4
 328:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 32c:	00001301 	andeq	r1, r0, r1, lsl #6
 330:	03000517 	movweq	r0, #1303	; 0x517
 334:	3b0b3a0e 	blcc	2ceb74 <__bss_end+0x2b907c>
 338:	02134905 	andseq	r4, r3, #81920	; 0x14000
 33c:	18000018 	stmdane	r0, {r3, r4}
 340:	13490101 	movtne	r0, #37121	; 0x9101
 344:	00001301 	andeq	r1, r0, r1, lsl #6
 348:	49002119 	stmdbmi	r0, {r0, r3, r4, r8, sp}
 34c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 350:	00341a00 	eorseq	r1, r4, r0, lsl #20
 354:	0b3a0e03 	bleq	e83b68 <__bss_end+0xe6e070>
 358:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 35c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 360:	01000000 	mrseq	r0, (UNDEF: 0)
 364:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 368:	0e030b13 	vmoveq.32	d3[0], r0
 36c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 370:	00001710 	andeq	r1, r0, r0, lsl r7
 374:	0b002402 	bleq	9384 <__module_entries_end+0x12e0>
 378:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 37c:	0300000e 	movweq	r0, #14
 380:	0b0b0024 	bleq	2c0418 <__bss_end+0x2aa920>
 384:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 388:	0f040000 	svceq	0x00040000
 38c:	000b0b00 	andeq	r0, fp, r0, lsl #22
 390:	00160500 	andseq	r0, r6, r0, lsl #10
 394:	0b3a0e03 	bleq	e83ba8 <__bss_end+0xe6e0b0>
 398:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 39c:	13060000 	movwne	r0, #24576	; 0x6000
 3a0:	0b0e0301 	bleq	380fac <__bss_end+0x36b4b4>
 3a4:	3b0b3a0b 	blcc	2cebd8 <__bss_end+0x2b90e0>
 3a8:	0013010b 	andseq	r0, r3, fp, lsl #2
 3ac:	000d0700 	andeq	r0, sp, r0, lsl #14
 3b0:	0b3a0e03 	bleq	e83bc4 <__bss_end+0xe6e0cc>
 3b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3b8:	00000b38 	andeq	r0, r0, r8, lsr fp
 3bc:	0b000f08 	bleq	3fe4 <_start-0x401c>
 3c0:	0013490b 	andseq	r4, r3, fp, lsl #18
 3c4:	00350900 	eorseq	r0, r5, r0, lsl #18
 3c8:	00001349 	andeq	r1, r0, r9, asr #6
 3cc:	3f012e0a 	svccc	0x00012e0a
 3d0:	3a0e0319 	bcc	38103c <__bss_end+0x36b544>
 3d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3dc:	97184006 	ldrls	r4, [r8, -r6]
 3e0:	13011942 	movwne	r1, #6466	; 0x1942
 3e4:	050b0000 	streq	r0, [fp, #-0]
 3e8:	3a0e0300 	bcc	380ff0 <__bss_end+0x36b4f8>
 3ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3f0:	00180213 	andseq	r0, r8, r3, lsl r2
 3f4:	00340c00 	eorseq	r0, r4, r0, lsl #24
 3f8:	0b3a0e03 	bleq	e83c0c <__bss_end+0xe6e114>
 3fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 400:	00001802 	andeq	r1, r0, r2, lsl #16
 404:	3f012e0d 	svccc	0x00012e0d
 408:	3a0e0319 	bcc	381074 <__bss_end+0x36b57c>
 40c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 410:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 414:	97184006 	ldrls	r4, [r8, -r6]
 418:	00001942 	andeq	r1, r0, r2, asr #18
 41c:	01110100 	tsteq	r1, r0, lsl #2
 420:	0b130e25 	bleq	4c3cbc <__bss_end+0x4ae1c4>
 424:	01110e03 	tsteq	r1, r3, lsl #28
 428:	17100612 			; <UNDEFINED> instruction: 0x17100612
 42c:	16020000 	strne	r0, [r2], -r0
 430:	3a0e0300 	bcc	381038 <__bss_end+0x36b540>
 434:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 438:	03000013 	movweq	r0, #19
 43c:	0b0b0024 	bleq	2c04d4 <__bss_end+0x2aa9dc>
 440:	0e030b3e 	vmoveq.16	d3[0], r0
 444:	24040000 	strcs	r0, [r4], #-0
 448:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 44c:	0008030b 	andeq	r0, r8, fp, lsl #6
 450:	000f0500 	andeq	r0, pc, r0, lsl #10
 454:	00000b0b 	andeq	r0, r0, fp, lsl #22
 458:	0b000f06 	bleq	4078 <_start-0x3f88>
 45c:	0013490b 	andseq	r4, r3, fp, lsl #18
 460:	00260700 	eoreq	r0, r6, r0, lsl #14
 464:	13080000 	movwne	r0, #32768	; 0x8000
 468:	0b0e0301 	bleq	381074 <__bss_end+0x36b57c>
 46c:	3b0b3a0b 	blcc	2ceca0 <__bss_end+0x2b91a8>
 470:	0013010b 	andseq	r0, r3, fp, lsl #2
 474:	000d0900 	andeq	r0, sp, r0, lsl #18
 478:	0b3a0e03 	bleq	e83c8c <__bss_end+0xe6e194>
 47c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 480:	00000b38 	andeq	r0, r0, r8, lsr fp
 484:	4900350a 	stmdbmi	r0, {r1, r3, r8, sl, ip, sp}
 488:	0b000013 	bleq	4dc <_start-0x7b24>
 48c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 490:	0b3a0e03 	bleq	e83ca4 <__bss_end+0xe6e1ac>
 494:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 498:	01111349 	tsteq	r1, r9, asr #6
 49c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4a0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4a4:	0c000013 	stceq	0, cr0, [r0], {19}
 4a8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 4ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 4b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4b4:	340d0000 	strcc	r0, [sp], #-0
 4b8:	3a0e0300 	bcc	3810c0 <__bss_end+0x36b5c8>
 4bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c0:	00180213 	andseq	r0, r8, r3, lsl r2
 4c4:	00260e00 	eoreq	r0, r6, r0, lsl #28
 4c8:	00001349 	andeq	r1, r0, r9, asr #6
 4cc:	3f012e0f 	svccc	0x00012e0f
 4d0:	3a0e0319 	bcc	38113c <__bss_end+0x36b644>
 4d4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 4d8:	11134919 	tstne	r3, r9, lsl r9
 4dc:	40061201 	andmi	r1, r6, r1, lsl #4
 4e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4e4:	00001301 	andeq	r1, r0, r1, lsl #6
 4e8:	3f012e10 	svccc	0x00012e10
 4ec:	3a0e0319 	bcc	381158 <__bss_end+0x36b660>
 4f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 4f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4f8:	96184006 	ldrls	r4, [r8], -r6
 4fc:	13011942 	movwne	r1, #6466	; 0x1942
 500:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 504:	3a0e0301 	bcc	381110 <__bss_end+0x36b618>
 508:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 50c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 510:	96184006 	ldrls	r4, [r8], -r6
 514:	13011942 	movwne	r1, #6466	; 0x1942
 518:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 51c:	3a0e0301 	bcc	381128 <__bss_end+0x36b630>
 520:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 524:	11134919 	tstne	r3, r9, lsl r9
 528:	40061201 	andmi	r1, r6, r1, lsl #4
 52c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 530:	00001301 	andeq	r1, r0, r1, lsl #6
 534:	3f012e13 	svccc	0x00012e13
 538:	3a0e0319 	bcc	3811a4 <__bss_end+0x36b6ac>
 53c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 540:	11134919 	tstne	r3, r9, lsl r9
 544:	40061201 	andmi	r1, r6, r1, lsl #4
 548:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 54c:	01000000 	mrseq	r0, (UNDEF: 0)
 550:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 554:	0e030b13 	vmoveq.32	d3[0], r0
 558:	01110e1b 	tsteq	r1, fp, lsl lr
 55c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 560:	16020000 	strne	r0, [r2], -r0
 564:	3a0e0300 	bcc	38116c <__bss_end+0x36b674>
 568:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 56c:	03000013 	movweq	r0, #19
 570:	0b0b0024 	bleq	2c0608 <__bss_end+0x2aab10>
 574:	0e030b3e 	vmoveq.16	d3[0], r0
 578:	0f040000 	svceq	0x00040000
 57c:	000b0b00 	andeq	r0, fp, r0, lsl #22
 580:	00240500 	eoreq	r0, r4, r0, lsl #10
 584:	0b3e0b0b 	bleq	f831b8 <__bss_end+0xf6d6c0>
 588:	00000803 	andeq	r0, r0, r3, lsl #16
 58c:	0b000f06 	bleq	41ac <_start-0x3e54>
 590:	0013490b 	andseq	r4, r3, fp, lsl #18
 594:	01150700 	tsteq	r5, r0, lsl #14
 598:	13011927 	movwne	r1, #6439	; 0x1927
 59c:	05080000 	streq	r0, [r8, #-0]
 5a0:	00134900 	andseq	r4, r3, r0, lsl #18
 5a4:	01150900 	tsteq	r5, r0, lsl #18
 5a8:	13491927 	movtne	r1, #39207	; 0x9927
 5ac:	00001301 	andeq	r1, r0, r1, lsl #6
 5b0:	0301130a 	movweq	r1, #4874	; 0x130a
 5b4:	3a0b0b0e 	bcc	2c31f4 <__bss_end+0x2ad6fc>
 5b8:	010b3b0b 	tsteq	fp, fp, lsl #22
 5bc:	0b000013 	bleq	610 <_start-0x79f0>
 5c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5c4:	0b3b0b3a 	bleq	ec32b4 <__bss_end+0xead7bc>
 5c8:	0b381349 	bleq	e052f4 <__bss_end+0xdef7fc>
 5cc:	350c0000 	strcc	r0, [ip, #-0]
 5d0:	00134900 	andseq	r4, r3, r0, lsl #18
 5d4:	00260d00 	eoreq	r0, r6, r0, lsl #26
 5d8:	00001349 	andeq	r1, r0, r9, asr #6
 5dc:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
 5e0:	00130113 	andseq	r0, r3, r3, lsl r1
 5e4:	00210f00 	eoreq	r0, r1, r0, lsl #30
 5e8:	0b2f1349 	bleq	bc5314 <__bss_end+0xbaf81c>
 5ec:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 5f0:	03193f01 	tsteq	r9, #1, 30
 5f4:	3b0b3a0e 	blcc	2cee34 <__bss_end+0x2b933c>
 5f8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 5fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 600:	96184006 	ldrls	r4, [r8], -r6
 604:	13011942 	movwne	r1, #6466	; 0x1942
 608:	05110000 	ldreq	r0, [r1, #-0]
 60c:	3a0e0300 	bcc	381214 <__bss_end+0x36b71c>
 610:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 614:	00180213 	andseq	r0, r8, r3, lsl r2
 618:	00341200 	eorseq	r1, r4, r0, lsl #4
 61c:	0b3a0e03 	bleq	e83e30 <__bss_end+0xe6e338>
 620:	1349053b 	movtne	r0, #38203	; 0x953b
 624:	00001802 	andeq	r1, r0, r2, lsl #16
 628:	11010b13 	tstne	r1, r3, lsl fp
 62c:	00061201 	andeq	r1, r6, r1, lsl #4
 630:	012e1400 	teqeq	lr, r0, lsl #8
 634:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 638:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 63c:	01111927 	tsteq	r1, r7, lsr #18
 640:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 644:	01194296 			; <UNDEFINED> instruction: 0x01194296
 648:	15000013 	strne	r0, [r0, #-19]
 64c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 650:	0b3a0e03 	bleq	e83e64 <__bss_end+0xe6e36c>
 654:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 658:	01111349 	tsteq	r1, r9, asr #6
 65c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 660:	01194297 			; <UNDEFINED> instruction: 0x01194297
 664:	16000013 			; <UNDEFINED> instruction: 0x16000013
 668:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 66c:	0b3a0e03 	bleq	e83e80 <__bss_end+0xe6e388>
 670:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 674:	06120111 			; <UNDEFINED> instruction: 0x06120111
 678:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 67c:	17000019 	smladne	r0, r9, r0, r0
 680:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 684:	0b3a0e03 	bleq	e83e98 <__bss_end+0xe6e3a0>
 688:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 68c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 690:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 694:	18000019 	stmdane	r0, {r0, r3, r4}
 698:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 69c:	0b3a0e03 	bleq	e83eb0 <__bss_end+0xe6e3b8>
 6a0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 6a4:	01111349 	tsteq	r1, r9, asr #6
 6a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6ac:	00194297 	mulseq	r9, r7, r2
 6b0:	010b1900 	tsteq	fp, r0, lsl #18
 6b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6b8:	00001301 	andeq	r1, r0, r1, lsl #6
 6bc:	3f012e1a 	svccc	0x00012e1a
 6c0:	3a0e0319 	bcc	38132c <__bss_end+0x36b834>
 6c4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 6c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6cc:	97184006 	ldrls	r4, [r8, -r6]
 6d0:	13011942 	movwne	r1, #6466	; 0x1942
 6d4:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 6d8:	3a0e0301 	bcc	3812e4 <__bss_end+0x36b7ec>
 6dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 6e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6e4:	96184006 	ldrls	r4, [r8], -r6
 6e8:	13011942 	movwne	r1, #6466	; 0x1942
 6ec:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 6f0:	3a0e0301 	bcc	3812fc <__bss_end+0x36b804>
 6f4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 6f8:	11134919 	tstne	r3, r9, lsl r9
 6fc:	40061201 	andmi	r1, r6, r1, lsl #4
 700:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 704:	00001301 	andeq	r1, r0, r1, lsl #6
 708:	0300341d 	movweq	r3, #1053	; 0x41d
 70c:	3b0b3a0e 	blcc	2cef4c <__bss_end+0x2b9454>
 710:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 714:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
 718:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 71c:	0b3b0b3a 	bleq	ec340c <__bss_end+0xead914>
 720:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 724:	00001802 	andeq	r1, r0, r2, lsl #16
 728:	01110100 	tsteq	r1, r0, lsl #2
 72c:	0b130e25 	bleq	4c3fc8 <__bss_end+0x4ae4d0>
 730:	01110e03 	tsteq	r1, r3, lsl #28
 734:	17100612 			; <UNDEFINED> instruction: 0x17100612
 738:	16020000 	strne	r0, [r2], -r0
 73c:	3a0e0300 	bcc	381344 <__bss_end+0x36b84c>
 740:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 744:	03000013 	movweq	r0, #19
 748:	0b0b000f 	bleq	2c078c <__bss_end+0x2aac94>
 74c:	00001349 	andeq	r1, r0, r9, asr #6
 750:	27011504 	strcs	r1, [r1, -r4, lsl #10]
 754:	00130119 	andseq	r0, r3, r9, lsl r1
 758:	00050500 	andeq	r0, r5, r0, lsl #10
 75c:	00001349 	andeq	r1, r0, r9, asr #6
 760:	0b002406 	bleq	9780 <__module_entries_end+0x16dc>
 764:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 768:	07000008 	streq	r0, [r0, -r8]
 76c:	0b0b000f 	bleq	2c07b0 <__bss_end+0x2aacb8>
 770:	13080000 	movwne	r0, #32768	; 0x8000
 774:	3a0b0b01 	bcc	2c3380 <__bss_end+0x2ad888>
 778:	010b3b0b 	tsteq	fp, fp, lsl #22
 77c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 780:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 784:	0b3b0b3a 	bleq	ec3474 <__bss_end+0xead97c>
 788:	0b381349 	bleq	e054b4 <__bss_end+0xdef9bc>
 78c:	240a0000 	strcs	r0, [sl], #-0
 790:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 794:	000e030b 	andeq	r0, lr, fp, lsl #6
 798:	002e0b00 	eoreq	r0, lr, r0, lsl #22
 79c:	0b3a0e03 	bleq	e83fb0 <__bss_end+0xe6e4b8>
 7a0:	01110b3b 	tsteq	r1, fp, lsr fp
 7a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7a8:	00194297 	mulseq	r9, r7, r2
 7ac:	012e0c00 	teqeq	lr, r0, lsl #24
 7b0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 7b4:	0b3b0b3a 	bleq	ec34a4 <__bss_end+0xead9ac>
 7b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7c0:	00130119 	andseq	r0, r3, r9, lsl r1
 7c4:	00340d00 	eorseq	r0, r4, r0, lsl #26
 7c8:	0b3a0e03 	bleq	e83fdc <__bss_end+0xe6e4e4>
 7cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7d0:	00001802 	andeq	r1, r0, r2, lsl #16
 7d4:	11010b0e 	tstne	r1, lr, lsl #22
 7d8:	00061201 	andeq	r1, r6, r1, lsl #4
 7dc:	012e0f00 	teqeq	lr, r0, lsl #30
 7e0:	0b3a0e03 	bleq	e83ff4 <__bss_end+0xe6e4fc>
 7e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7f0:	00130119 	andseq	r0, r3, r9, lsl r1
 7f4:	00051000 	andeq	r1, r5, r0
 7f8:	0b3a0e03 	bleq	e8400c <__bss_end+0xe6e514>
 7fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 800:	00001802 	andeq	r1, r0, r2, lsl #16
 804:	3f012e11 	svccc	0x00012e11
 808:	3a0e0319 	bcc	381474 <__bss_end+0x36b97c>
 80c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 810:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 814:	97184006 	ldrls	r4, [r8, -r6]
 818:	13011942 	movwne	r1, #6466	; 0x1942
 81c:	34120000 	ldrcc	r0, [r2], #-0
 820:	3a080300 	bcc	201428 <__bss_end+0x1eb930>
 824:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 828:	00180213 	andseq	r0, r8, r3, lsl r2
 82c:	012e1300 	teqeq	lr, r0, lsl #6
 830:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 834:	0b3b0b3a 	bleq	ec3524 <__bss_end+0xeada2c>
 838:	13491927 	movtne	r1, #39207	; 0x9927
 83c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 840:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 844:	00130119 	andseq	r0, r3, r9, lsl r1
 848:	012e1400 	teqeq	lr, r0, lsl #8
 84c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 850:	0b3b0b3a 	bleq	ec3540 <__bss_end+0xeada48>
 854:	13491927 	movtne	r1, #39207	; 0x9927
 858:	06120111 			; <UNDEFINED> instruction: 0x06120111
 85c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 860:	00130119 	andseq	r0, r3, r9, lsl r1
 864:	002e1500 	eoreq	r1, lr, r0, lsl #10
 868:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 86c:	0b3b0b3a 	bleq	ec355c <__bss_end+0xeada64>
 870:	01111349 	tsteq	r1, r9, asr #6
 874:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 878:	00194296 	mulseq	r9, r6, r2
 87c:	01011600 	tsteq	r1, r0, lsl #12
 880:	13011349 	movwne	r1, #4937	; 0x1349
 884:	21170000 	tstcs	r7, r0
 888:	2f134900 	svccs	0x00134900
 88c:	1800000b 	stmdane	r0, {r0, r1, r3}
 890:	13490026 	movtne	r0, #36902	; 0x9026
 894:	35190000 	ldrcc	r0, [r9, #-0]
 898:	00134900 	andseq	r4, r3, r0, lsl #18
 89c:	11010000 	mrsne	r0, (UNDEF: 1)
 8a0:	130e2501 	movwne	r2, #58625	; 0xe501
 8a4:	110e030b 	tstne	lr, fp, lsl #6
 8a8:	10061201 	andne	r1, r6, r1, lsl #4
 8ac:	02000017 	andeq	r0, r0, #23
 8b0:	0e030104 	adfeqs	f0, f3, f4
 8b4:	0b3a0b0b 	bleq	e834e8 <__bss_end+0xe6d9f0>
 8b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 8bc:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
 8c0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 8c4:	0400000d 	streq	r0, [r0], #-13
 8c8:	0b0b0113 	bleq	2c0d1c <__bss_end+0x2ab224>
 8cc:	0b3b0b3a 	bleq	ec35bc <__bss_end+0xeadac4>
 8d0:	00001301 	andeq	r1, r0, r1, lsl #6
 8d4:	03000d05 	movweq	r0, #3333	; 0xd05
 8d8:	3b0b3a0e 	blcc	2cf118 <__bss_end+0x2b9620>
 8dc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 8e0:	0600000b 	streq	r0, [r0], -fp
 8e4:	13490101 	movtne	r0, #37121	; 0x9101
 8e8:	00001301 	andeq	r1, r0, r1, lsl #6
 8ec:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
 8f0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 8f4:	00240800 	eoreq	r0, r4, r0, lsl #16
 8f8:	0b3e0b0b 	bleq	f8352c <__bss_end+0xf6da34>
 8fc:	00000e03 	andeq	r0, r0, r3, lsl #28
 900:	03001609 	movweq	r1, #1545	; 0x609
 904:	3b0b3a0e 	blcc	2cf144 <__bss_end+0x2b964c>
 908:	0013490b 	andseq	r4, r3, fp, lsl #18
 90c:	012e0a00 	teqeq	lr, r0, lsl #20
 910:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 914:	0b3b0b3a 	bleq	ec3604 <__bss_end+0xeadb0c>
 918:	01111927 	tsteq	r1, r7, lsr #18
 91c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 920:	01194297 			; <UNDEFINED> instruction: 0x01194297
 924:	0b000013 	bleq	978 <_start-0x7688>
 928:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 92c:	0b3b0b3a 	bleq	ec361c <__bss_end+0xeadb24>
 930:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 934:	340c0000 	strcc	r0, [ip], #-0
 938:	3a0e0300 	bcc	381540 <__bss_end+0x36ba48>
 93c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 940:	00180213 	andseq	r0, r8, r3, lsl r2
 944:	00340d00 	eorseq	r0, r4, r0, lsl #26
 948:	0b3a0803 	bleq	e8295c <__bss_end+0xe6ce64>
 94c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 950:	00001802 	andeq	r1, r0, r2, lsl #16
 954:	0b00240e 	bleq	9994 <__module_entries_end+0x18f0>
 958:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 95c:	0f000008 	svceq	0x00000008
 960:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 964:	0b3a0e03 	bleq	e84178 <__bss_end+0xe6e680>
 968:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 96c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 970:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 974:	00130119 	andseq	r0, r3, r9, lsl r1
 978:	00051000 	andeq	r1, r5, r0
 97c:	0b3a0803 	bleq	e82990 <__bss_end+0xe6ce98>
 980:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 984:	00001802 	andeq	r1, r0, r2, lsl #16
 988:	3f012e11 	svccc	0x00012e11
 98c:	3a0e0319 	bcc	3815f8 <__bss_end+0x36bb00>
 990:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 994:	11134919 	tstne	r3, r9, lsl r9
 998:	40061201 	andmi	r1, r6, r1, lsl #4
 99c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 9a0:	00001301 	andeq	r1, r0, r1, lsl #6
 9a4:	03003412 	movweq	r3, #1042	; 0x412
 9a8:	3b0b3a0e 	blcc	2cf1e8 <__bss_end+0x2b96f0>
 9ac:	3f13490b 	svccc	0x0013490b
 9b0:	00180219 	andseq	r0, r8, r9, lsl r2
 9b4:	00261300 	eoreq	r1, r6, r0, lsl #6
 9b8:	00001349 	andeq	r1, r0, r9, asr #6
 9bc:	0b000f14 	bleq	4614 <_start-0x39ec>
 9c0:	0013490b 	andseq	r4, r3, fp, lsl #18
 9c4:	00351500 	eorseq	r1, r5, r0, lsl #10
 9c8:	00001349 	andeq	r1, r0, r9, asr #6
 9cc:	01110100 	tsteq	r1, r0, lsl #2
 9d0:	0b130e25 	bleq	4c426c <__bss_end+0x4ae774>
 9d4:	01110e03 	tsteq	r1, r3, lsl #28
 9d8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 9dc:	16020000 	strne	r0, [r2], -r0
 9e0:	3a0e0300 	bcc	3815e8 <__bss_end+0x36baf0>
 9e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9e8:	03000013 	movweq	r0, #19
 9ec:	0b0b0024 	bleq	2c0a84 <__bss_end+0x2aaf8c>
 9f0:	0e030b3e 	vmoveq.16	d3[0], r0
 9f4:	24040000 	strcs	r0, [r4], #-0
 9f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 9fc:	0008030b 	andeq	r0, r8, fp, lsl #6
 a00:	000f0500 	andeq	r0, pc, r0, lsl #10
 a04:	00000b0b 	andeq	r0, r0, fp, lsl #22
 a08:	0b000f06 	bleq	4628 <_start-0x39d8>
 a0c:	0013490b 	andseq	r4, r3, fp, lsl #18
 a10:	01170700 	tsteq	r7, r0, lsl #14
 a14:	050b0e03 	streq	r0, [fp, #-3587]	; 0xe03
 a18:	0b3b0b3a 	bleq	ec3708 <__bss_end+0xeadc10>
 a1c:	00001301 	andeq	r1, r0, r1, lsl #6
 a20:	03000d08 	movweq	r0, #3336	; 0xd08
 a24:	3b0b3a0e 	blcc	2cf264 <__bss_end+0x2b976c>
 a28:	0013490b 	andseq	r4, r3, fp, lsl #18
 a2c:	00350900 	eorseq	r0, r5, r0, lsl #18
 a30:	00001349 	andeq	r1, r0, r9, asr #6
 a34:	4901010a 	stmdbmi	r1, {r1, r3, r8}
 a38:	00130113 	andseq	r0, r3, r3, lsl r1
 a3c:	00210b00 	eoreq	r0, r1, r0, lsl #22
 a40:	052f1349 	streq	r1, [pc, #-841]!	; 6ff <_start-0x7901>
 a44:	130c0000 	movwne	r0, #49152	; 0xc000
 a48:	0b0e0301 	bleq	381654 <__bss_end+0x36bb5c>
 a4c:	3b0b3a0b 	blcc	2cf280 <__bss_end+0x2b9788>
 a50:	0013010b 	andseq	r0, r3, fp, lsl #2
 a54:	000d0d00 	andeq	r0, sp, r0, lsl #26
 a58:	0b3a0e03 	bleq	e8426c <__bss_end+0xe6e774>
 a5c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 a60:	00000b38 	andeq	r0, r0, r8, lsr fp
 a64:	3f012e0e 	svccc	0x00012e0e
 a68:	3a0e0319 	bcc	3816d4 <__bss_end+0x36bbdc>
 a6c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 a70:	11134919 	tstne	r3, r9, lsl r9
 a74:	40061201 	andmi	r1, r6, r1, lsl #4
 a78:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 a7c:	00001301 	andeq	r1, r0, r1, lsl #6
 a80:	0300050f 	movweq	r0, #1295	; 0x50f
 a84:	3b0b3a0e 	blcc	2cf2c4 <__bss_end+0x2b97cc>
 a88:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a8c:	10000018 	andne	r0, r0, r8, lsl r0
 a90:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 a94:	0b3b0b3a 	bleq	ec3784 <__bss_end+0xeadc8c>
 a98:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 a9c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 aa0:	03193f01 	tsteq	r9, #1, 30
 aa4:	3b0b3a0e 	blcc	2cf2e4 <__bss_end+0x2b97ec>
 aa8:	1119270b 	tstne	r9, fp, lsl #14
 aac:	40061201 	andmi	r1, r6, r1, lsl #4
 ab0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 ab4:	00001301 	andeq	r1, r0, r1, lsl #6
 ab8:	03000512 	movweq	r0, #1298	; 0x512
 abc:	3b0b3a08 	blcc	2cf2e4 <__bss_end+0x2b97ec>
 ac0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 ac4:	13000018 	movwne	r0, #24
 ac8:	08030034 	stmdaeq	r3, {r2, r4, r5}
 acc:	0b3b0b3a 	bleq	ec37bc <__bss_end+0xeadcc4>
 ad0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 ad4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 ad8:	03193f00 	tsteq	r9, #0, 30
 adc:	3b0b3a0e 	blcc	2cf31c <__bss_end+0x2b9824>
 ae0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 ae4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 ae8:	97184006 	ldrls	r4, [r8, -r6]
 aec:	00001942 	andeq	r1, r0, r2, asr #18
 af0:	3f002e15 	svccc	0x00002e15
 af4:	3a0e0319 	bcc	381760 <__bss_end+0x36bc68>
 af8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 afc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 b00:	97184006 	ldrls	r4, [r8, -r6]
 b04:	00001942 	andeq	r1, r0, r2, asr #18
 b08:	03012e16 	movweq	r2, #7702	; 0x1e16
 b0c:	3b0b3a0e 	blcc	2cf34c <__bss_end+0x2b9854>
 b10:	11192705 	tstne	r9, r5, lsl #14
 b14:	40061201 	andmi	r1, r6, r1, lsl #4
 b18:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 b1c:	00001301 	andeq	r1, r0, r1, lsl #6
 b20:	03003417 	movweq	r3, #1047	; 0x417
 b24:	3b0b3a0e 	blcc	2cf364 <__bss_end+0x2b986c>
 b28:	02134905 	andseq	r4, r3, #81920	; 0x14000
 b2c:	18000018 	stmdane	r0, {r3, r4}
 b30:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 b34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 b38:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 b3c:	34190000 	ldrcc	r0, [r9], #-0
 b40:	3a080300 	bcc	201748 <__bss_end+0x1ebc50>
 b44:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 b48:	00180213 	andseq	r0, r8, r3, lsl r2
 b4c:	00261a00 	eoreq	r1, r6, r0, lsl #20
 b50:	00001349 	andeq	r1, r0, r9, asr #6
 b54:	0300341b 	movweq	r3, #1051	; 0x41b
 b58:	3b0b3a0e 	blcc	2cf398 <__bss_end+0x2b98a0>
 b5c:	3f13490b 	svccc	0x0013490b
 b60:	00180219 	andseq	r0, r8, r9, lsl r2
 b64:	11010000 	mrsne	r0, (UNDEF: 1)
 b68:	130e2501 	movwne	r2, #58625	; 0xe501
 b6c:	110e030b 	tstne	lr, fp, lsl #6
 b70:	10061201 	andne	r1, r6, r1, lsl #4
 b74:	02000017 	andeq	r0, r0, #23
 b78:	0b0b0024 	bleq	2c0c10 <__bss_end+0x2ab118>
 b7c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 b80:	24030000 	strcs	r0, [r3], #-0
 b84:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 b88:	000e030b 	andeq	r0, lr, fp, lsl #6
 b8c:	000f0400 	andeq	r0, pc, r0, lsl #8
 b90:	00000b0b 	andeq	r0, r0, fp, lsl #22
 b94:	3f012e05 	svccc	0x00012e05
 b98:	3a0e0319 	bcc	381804 <__bss_end+0x36bd0c>
 b9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 ba0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 ba4:	96184006 	ldrls	r4, [r8], -r6
 ba8:	13011942 	movwne	r1, #6466	; 0x1942
 bac:	05060000 	streq	r0, [r6, #-0]
 bb0:	3a0e0300 	bcc	3817b8 <__bss_end+0x36bcc0>
 bb4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 bb8:	00180213 	andseq	r0, r8, r3, lsl r2
 bbc:	00340700 	eorseq	r0, r4, r0, lsl #14
 bc0:	0b3a0803 	bleq	e82bd4 <__bss_end+0xe6d0dc>
 bc4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 bc8:	00001802 	andeq	r1, r0, r2, lsl #16
 bcc:	3f002e08 	svccc	0x00002e08
 bd0:	3a0e0319 	bcc	38183c <__bss_end+0x36bd44>
 bd4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 bd8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 bdc:	96184006 	ldrls	r4, [r8], -r6
 be0:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00010000 	andeq	r0, r1, r0
  14:	00000338 	andeq	r0, r0, r8, lsr r3
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01f50002 	mvnseq	r0, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00010338 	andeq	r0, r1, r8, lsr r3
  34:	00000290 	muleq	r0, r0, r2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	037d0002 	cmneq	sp, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000105d0 	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  54:	00000758 	andeq	r0, r0, r8, asr r7
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	07e70002 	strbeq	r0, [r7, r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00010d28 	andeq	r0, r1, r8, lsr #26
  74:	00000288 	andeq	r0, r0, r8, lsl #5
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0a660002 	beq	1980094 <__bss_end+0x196a59c>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00010fb0 			; <UNDEFINED> instruction: 0x00010fb0
  94:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	11820002 	orrne	r0, r2, r2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00011b6c 	andeq	r1, r1, ip, ror #22
  b4:	000018dc 	ldrdeq	r1, [r0], -ip
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	1ea30002 	cdpne	0, 10, cr0, cr3, cr2, {0}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	00013448 	andeq	r3, r1, r8, asr #8
  d4:	000003ec 	andeq	r0, r0, ip, ror #7
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	21a80002 			; <UNDEFINED> instruction: 0x21a80002
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00013834 	andeq	r3, r1, r4, lsr r8
  f4:	0000062c 	andeq	r0, r0, ip, lsr #12
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	259b0002 	ldrcs	r0, [fp, #2]
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00013e60 	andeq	r3, r1, r0, ror #28
 114:	00000498 	muleq	r0, r8, r4
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	28620002 	stmdacs	r2!, {r1}^
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00014310 	andeq	r4, r1, r0, lsl r3
 134:	00000120 	andeq	r0, r0, r0, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000001c0 	andeq	r0, r0, r0, asr #3
       4:	01630002 	cmneq	r3, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
      20:	75656b2f 	strbvc	r6, [r5, #-2863]!	; 0xb2f
      24:	6f6f776e 	svcvs	0x006f776e
      28:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
      2c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
      30:	772f7374 			; <UNDEFINED> instruction: 0x772f7374
      34:	68657261 	stmdavs	r5!, {r0, r5, r6, r9, ip, sp, lr}^
      38:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0x56f
      3c:	2f343034 	svccs	0x00343034
      40:	75726f54 	ldrbvc	r6, [r2, #-3924]!	; 0xf54
      44:	72462f73 	subvc	r2, r6, #460	; 0x1cc
      48:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
      4c:	4b5f534f 	blmi	17d4d90 <__bss_end+0x17bf298>
      50:	656e7265 	strbvs	r7, [lr, #-613]!	; 0x265
      54:	65442f6c 	strbvs	r2, [r4, #-3948]	; 0xf6c
      58:	425f6f6d 	subsmi	r6, pc, #436	; 0x1b4
      5c:	6b6e696c 	blvs	1b9a614 <__bss_end+0x1b84b1c>
      60:	5f676e69 	svcpl	0x00676e69
      64:	4f495047 	svcmi	0x00495047
      68:	522f385f 	eorpl	r3, pc, #6225920	; 0x5f0000
      6c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
      70:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      74:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
      78:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      7c:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
      80:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
      84:	34312d64 	ldrtcc	r2, [r1], #-3428	; 0xd64
      88:	33323530 	teqcc	r2, #48, 10	; 0xc000000
      8c:	462f332d 	strtmi	r3, [pc], -sp, lsr #6
      90:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      94:	2f534f54 	svccs	0x00534f54
      98:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
      9c:	702f6563 	eorvc	r6, pc, r3, ror #10
      a0:	6174726f 	cmnvs	r4, pc, ror #4
      a4:	2f656c62 	svccs	0x00656c62
      a8:	2f434347 	svccs	0x00434347
      ac:	70736152 	rsbsvc	r6, r3, r2, asr r1
      b0:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      b4:	00695079 	rsbeq	r5, r9, r9, ror r0
      b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4 <_start-0x7ffc>
      bc:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xf65
      c0:	6f776e75 	svcvs	0x00776e75
      c4:	6f442f6f 	svcvs	0x00442f6f
      c8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0x563
      cc:	2f73746e 	svccs	0x0073746e
      d0:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
      d4:	73756f68 	cmnvc	r5, #104, 30	; 0x1a0
      d8:	34303465 	ldrtcc	r3, [r0], #-1125	; 0x465
      dc:	726f542f 	rsbvc	r5, pc, #788529152	; 0x2f000000
      e0:	462f7375 			; <UNDEFINED> instruction: 0x462f7375
      e4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      e8:	5f534f54 	svcpl	0x00534f54
      ec:	6e72654b 	cdpvs	5, 7, cr6, cr2, cr11, {2}
      f0:	442f6c65 	strtmi	r6, [pc], #-3173	; f8 <_start-0x7f08>
      f4:	5f6f6d65 	svcpl	0x006f6d65
      f8:	6e696c42 	cdpvs	12, 6, cr6, cr9, cr2, {2}
      fc:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
     100:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     104:	2f385f4f 	svccs	0x00385f4f
     108:	70736152 	rsbsvc	r6, r3, r2, asr r1
     10c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     110:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     114:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     118:	534f5452 	movtpl	r5, #62546	; 0xf452
     11c:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
     120:	312d646c 	teqcc	sp, ip, ror #8
     124:	32353034 	eorscc	r3, r5, #52	; 0x34
     128:	2f332d33 	svccs	0x00332d33
     12c:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     130:	534f5452 	movtpl	r5, #62546	; 0xf452
     134:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffe0d <_estack+0xf7fefe0d>
     138:	2f656372 	svccs	0x00656372
     13c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     140:	00656475 	rsbeq	r6, r5, r5, ror r4
     144:	726f7000 	rsbvc	r7, pc, #0
     148:	00632e74 	rsbeq	r2, r3, r4, ror lr
     14c:	70000001 	andvc	r0, r0, r1
     150:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xf72
     154:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
     158:	00020068 	andeq	r0, r2, r8, rrx
     15c:	726f7000 	rsbvc	r7, pc, #0
     160:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     164:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     168:	00000100 	andeq	r0, r0, r0, lsl #2
     16c:	02050000 	andeq	r0, r5, #0
     170:	00010000 	andeq	r0, r1, r0
     174:	bd013603 	stclt	6, cr3, [r1, #-12]
     178:	68836e4e 	stmvs	r3, {r1, r2, r3, r6, r9, sl, fp, sp, lr}
     17c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     180:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     184:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     188:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     18c:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     190:	67676767 	strbvs	r6, [r7, -r7, ror #14]!
     194:	6a676767 	bvs	19d9f38 <__bss_end+0x19c4440>
     198:	85686a67 	strbhi	r6, [r8, #-2663]!	; 0xa67
     19c:	2f686ca1 	svccs	0x00686ca1
     1a0:	4d162202 	lfmmi	f2, 4, [r6, #-8]
     1a4:	4e2f3131 	mcrmi	1, 1, r3, cr15, cr1, {1}
     1a8:	660a034d 	strvs	r0, [sl], -sp, asr #6
     1ac:	6731319f 			; <UNDEFINED> instruction: 0x6731319f
     1b0:	0a036b6c 	beq	daf68 <__bss_end+0xc5470>
     1b4:	6767304a 	strbvs	r3, [r7, -sl, asr #32]!
     1b8:	68676767 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
     1bc:	022f4c84 	eoreq	r4, pc, #132, 24	; 0x8400
     1c0:	0101000c 	tsteq	r1, ip
     1c4:	00000100 	andeq	r0, r0, r0, lsl #2
     1c8:	00bd0002 	adcseq	r0, sp, r2
     1cc:	01020000 	mrseq	r0, (UNDEF: 2)
     1d0:	000d0efb 	strdeq	r0, [sp], -fp
     1d4:	01010101 	tsteq	r1, r1, lsl #2
     1d8:	01000000 	mrseq	r0, (UNDEF: 0)
     1dc:	2f010000 	svccs	0x00010000
     1e0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     1e4:	75656b2f 	strbvc	r6, [r5, #-2863]!	; 0xb2f
     1e8:	6f6f776e 	svcvs	0x006f776e
     1ec:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     1f0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     1f4:	772f7374 			; <UNDEFINED> instruction: 0x772f7374
     1f8:	68657261 	stmdavs	r5!, {r0, r5, r6, r9, ip, sp, lr}^
     1fc:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0x56f
     200:	2f343034 	svccs	0x00343034
     204:	75726f54 	ldrbvc	r6, [r2, #-3924]!	; 0xf54
     208:	72462f73 	subvc	r2, r6, #460	; 0x1cc
     20c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     210:	4b5f534f 	blmi	17d4f54 <__bss_end+0x17bf45c>
     214:	656e7265 	strbvs	r7, [lr, #-613]!	; 0x265
     218:	65442f6c 	strbvs	r2, [r4, #-3948]	; 0xf6c
     21c:	425f6f6d 	subsmi	r6, pc, #436	; 0x1b4
     220:	6b6e696c 	blvs	1b9a7d8 <__bss_end+0x1b84ce0>
     224:	5f676e69 	svcpl	0x00676e69
     228:	4f495047 	svcmi	0x00495047
     22c:	522f385f 	eorpl	r3, pc, #6225920	; 0x5f0000
     230:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     234:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     238:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     23c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     240:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     244:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
     248:	34312d64 	ldrtcc	r2, [r1], #-3428	; 0xd64
     24c:	33323530 	teqcc	r2, #48, 10	; 0xc000000
     250:	462f332d 	strtmi	r3, [pc], -sp, lsr #6
     254:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     258:	2f534f54 	svccs	0x00534f54
     25c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     260:	702f6563 	eorvc	r6, pc, r3, ror #10
     264:	6174726f 	cmnvs	r4, pc, ror #4
     268:	2f656c62 	svccs	0x00656c62
     26c:	2f434347 	svccs	0x00434347
     270:	70736152 	rsbsvc	r6, r3, r2, asr r1
     274:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     278:	00695079 	rsbeq	r5, r9, r9, ror r0
     27c:	726f7000 	rsbvc	r7, pc, #0
     280:	72736974 	rsbsvc	r6, r3, #116, 18	; 0x1d0000
     284:	0100632e 	tsteq	r0, lr, lsr #6
     288:	00000000 	andeq	r0, r0, r0
     28c:	03380205 	teqeq	r8, #1342177280	; 0x50000000
     290:	33030001 	movwcc	r0, #12289	; 0x3001
     294:	2fa05201 	svccs	0x00a05201
     298:	2402342f 	strcs	r3, [r2], #-1071	; 0x42f
     29c:	0e036c13 	mcreq	12, 0, r6, cr3, cr3, {0}
     2a0:	023116ba 	eorseq	r1, r1, #195035136	; 0xba00000
     2a4:	0231152c 	eorseq	r1, r1, #44, 10	; 0xb000000
     2a8:	16031328 	strne	r1, [r3], -r8, lsr #6
     2ac:	2c021301 	stccs	3, cr1, [r2], {1}
     2b0:	28022f13 	stmdacs	r2, {r0, r1, r4, r8, r9, sl, fp, sp}
     2b4:	012a0313 	teqeq	sl, r3, lsl r3
     2b8:	9e0a034c 	cdpls	3, 0, cr0, cr10, cr12, {2}
     2bc:	854b859f 	strbhi	r8, [fp, #-1439]	; 0x59f
     2c0:	02a685a2 	adceq	r8, r6, #679477248	; 0x28800000
     2c4:	0101000c 	tsteq	r1, ip
     2c8:	000002dd 	ldrdeq	r0, [r0], -sp
     2cc:	01f50002 	mvnseq	r0, r2
     2d0:	01020000 	mrseq	r0, (UNDEF: 2)
     2d4:	000d0efb 	strdeq	r0, [sp], -fp
     2d8:	01010101 	tsteq	r1, r1, lsl #2
     2dc:	01000000 	mrseq	r0, (UNDEF: 0)
     2e0:	2f010000 	svccs	0x00010000
     2e4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     2e8:	75656b2f 	strbvc	r6, [r5, #-2863]!	; 0xb2f
     2ec:	6f6f776e 	svcvs	0x006f776e
     2f0:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     2f4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     2f8:	772f7374 			; <UNDEFINED> instruction: 0x772f7374
     2fc:	68657261 	stmdavs	r5!, {r0, r5, r6, r9, ip, sp, lr}^
     300:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0x56f
     304:	2f343034 	svccs	0x00343034
     308:	75726f54 	ldrbvc	r6, [r2, #-3924]!	; 0xf54
     30c:	72462f73 	subvc	r2, r6, #460	; 0x1cc
     310:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     314:	4b5f534f 	blmi	17d5058 <__bss_end+0x17bf560>
     318:	656e7265 	strbvs	r7, [lr, #-613]!	; 0x265
     31c:	65442f6c 	strbvs	r2, [r4, #-3948]	; 0xf6c
     320:	425f6f6d 	subsmi	r6, pc, #436	; 0x1b4
     324:	6b6e696c 	blvs	1b9a8dc <__bss_end+0x1b84de4>
     328:	5f676e69 	svcpl	0x00676e69
     32c:	4f495047 	svcmi	0x00495047
     330:	522f385f 	eorpl	r3, pc, #6225920	; 0x5f0000
     334:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     338:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     33c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     340:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     344:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     348:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
     34c:	34312d64 	ldrtcc	r2, [r1], #-3428	; 0xd64
     350:	33323530 	teqcc	r2, #48, 10	; 0xc000000
     354:	462f332d 	strtmi	r3, [pc], -sp, lsr #6
     358:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     35c:	2f534f54 	svccs	0x00534f54
     360:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     364:	2f006563 	svccs	0x00006563
     368:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     36c:	75656b2f 	strbvc	r6, [r5, #-2863]!	; 0xb2f
     370:	6f6f776e 	svcvs	0x006f776e
     374:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     378:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     37c:	772f7374 			; <UNDEFINED> instruction: 0x772f7374
     380:	68657261 	stmdavs	r5!, {r0, r5, r6, r9, ip, sp, lr}^
     384:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0x56f
     388:	2f343034 	svccs	0x00343034
     38c:	75726f54 	ldrbvc	r6, [r2, #-3924]!	; 0xf54
     390:	72462f73 	subvc	r2, r6, #460	; 0x1cc
     394:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     398:	4b5f534f 	blmi	17d50dc <__bss_end+0x17bf5e4>
     39c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0x265
     3a0:	65442f6c 	strbvs	r2, [r4, #-3948]	; 0xf6c
     3a4:	425f6f6d 	subsmi	r6, pc, #436	; 0x1b4
     3a8:	6b6e696c 	blvs	1b9a960 <__bss_end+0x1b84e68>
     3ac:	5f676e69 	svcpl	0x00676e69
     3b0:	4f495047 	svcmi	0x00495047
     3b4:	522f385f 	eorpl	r3, pc, #6225920	; 0x5f0000
     3b8:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     3bc:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     3c0:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     3c4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     3c8:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     3cc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
     3d0:	34312d64 	ldrtcc	r2, [r1], #-3428	; 0xd64
     3d4:	33323530 	teqcc	r2, #48, 10	; 0xc000000
     3d8:	462f332d 	strtmi	r3, [pc], -sp, lsr #6
     3dc:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     3e0:	2f534f54 	svccs	0x00534f54
     3e4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3e8:	692f6563 	stmdbvs	pc!, {r0, r1, r5, r6, r8, sl, sp, lr}	; <UNPREDICTABLE>
     3ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     3f0:	2f006564 	svccs	0x00006564
     3f4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     3f8:	75656b2f 	strbvc	r6, [r5, #-2863]!	; 0xb2f
     3fc:	6f6f776e 	svcvs	0x006f776e
     400:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     404:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     408:	772f7374 			; <UNDEFINED> instruction: 0x772f7374
     40c:	68657261 	stmdavs	r5!, {r0, r5, r6, r9, ip, sp, lr}^
     410:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0x56f
     414:	2f343034 	svccs	0x00343034
     418:	75726f54 	ldrbvc	r6, [r2, #-3924]!	; 0xf54
     41c:	72462f73 	subvc	r2, r6, #460	; 0x1cc
     420:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     424:	4b5f534f 	blmi	17d5168 <__bss_end+0x17bf670>
     428:	656e7265 	strbvs	r7, [lr, #-613]!	; 0x265
     42c:	65442f6c 	strbvs	r2, [r4, #-3948]	; 0xf6c
     430:	425f6f6d 	subsmi	r6, pc, #436	; 0x1b4
     434:	6b6e696c 	blvs	1b9a9ec <__bss_end+0x1b84ef4>
     438:	5f676e69 	svcpl	0x00676e69
     43c:	4f495047 	svcmi	0x00495047
     440:	522f385f 	eorpl	r3, pc, #6225920	; 0x5f0000
     444:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     448:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     44c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     450:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     454:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     458:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
     45c:	34312d64 	ldrtcc	r2, [r1], #-3428	; 0xd64
     460:	33323530 	teqcc	r2, #48, 10	; 0xc000000
     464:	462f332d 	strtmi	r3, [pc], -sp, lsr #6
     468:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     46c:	2f534f54 	svccs	0x00534f54
     470:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     474:	702f6563 	eorvc	r6, pc, r3, ror #10
     478:	6174726f 	cmnvs	r4, pc, ror #4
     47c:	2f656c62 	svccs	0x00656c62
     480:	2f434347 	svccs	0x00434347
     484:	70736152 	rsbsvc	r6, r3, r2, asr r1
     488:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     48c:	00695079 	rsbeq	r5, r9, r9, ror r0
     490:	6f726300 	svcvs	0x00726300
     494:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     498:	00632e65 	rsbeq	r2, r3, r5, ror #28
     49c:	6c000001 	stcvs	0, cr0, [r0], {1}
     4a0:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     4a4:	00020068 	andeq	r0, r2, r8, rrx
     4a8:	726f7000 	rsbvc	r7, pc, #0
     4ac:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     4b0:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     4b4:	00000300 	andeq	r0, r0, r0, lsl #6
     4b8:	756f7263 	strbvc	r7, [pc, #-611]!	; 25d <_start-0x7da3>
     4bc:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     4c0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     4c4:	00000000 	andeq	r0, r0, r0
     4c8:	05d00205 	ldrbeq	r0, [r0, #517]	; 0x205
     4cc:	8a030001 	bhi	c04d8 <__bss_end+0xaa9e0>
     4d0:	67bf0101 	ldrvs	r0, [pc, r1, lsl #2]!
     4d4:	3267846a 	rsbcc	r8, r7, #1778384896	; 0x6a000000
     4d8:	67674e68 	strbvs	r4, [r7, -r8, ror #28]!
     4dc:	87836967 	strhi	r6, [r3, r7, ror #18]
     4e0:	00866967 	addeq	r6, r6, r7, ror #18
     4e4:	06010402 	streq	r0, [r1], -r2, lsl #8
     4e8:	040200ba 	streq	r0, [r2], #-186	; 0xba
     4ec:	02008202 	andeq	r8, r0, #536870912	; 0x20000000
     4f0:	08060204 	stmdaeq	r6, {r2, r9}
     4f4:	2f4d6a92 	svccs	0x004d6a92
     4f8:	a1a3a3be 			; <UNDEFINED> instruction: 0xa1a3a3be
     4fc:	2608a284 	strcs	sl, [r8], -r4, lsl #5
     500:	bebc6af5 	mrclt	10, 5, r6, cr12, cr5, {7}
     504:	83a0336a 	movhi	r3, #-1476395007	; 0xa8000001
     508:	0083a084 	addeq	sl, r3, r4, lsl #1
     50c:	06010402 	streq	r0, [r1], -r2, lsl #8
     510:	040200ba 	streq	r0, [r2], #-186	; 0xba
     514:	02008202 	andeq	r8, r0, #536870912	; 0x20000000
     518:	03060104 	movweq	r0, #24836	; 0x6104
     51c:	03900873 	orrseq	r0, r0, #7536640	; 0x730000
     520:	69a2820f 	stmibvs	r2!, {r0, r1, r2, r3, r9, pc}
     524:	a19f30d7 	ldrsbge	r3, [pc, r7]
     528:	6a836788 	bvs	fe0da350 <_estack+0xf60ca350>
     52c:	31bda04c 			; <UNDEFINED> instruction: 0x31bda04c
     530:	858485a5 	strhi	r8, [r4, #1445]	; 0x5a5
     534:	040200a0 	streq	r0, [r2], #-160	; 0xa0
     538:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     53c:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
     540:	01040200 	mrseq	r0, R12_usr
     544:	08650306 	stmdaeq	r5!, {r1, r2, r8, r9}^
     548:	04020090 	streq	r0, [r2], #-144	; 0x90
     54c:	9e6e0301 	cdpls	3, 6, cr0, cr14, cr1, {0}
     550:	83823103 	orrhi	r3, r2, #-1073741824	; 0xc0000000
     554:	31682408 	cmncc	r8, r8, lsl #8
     558:	30853031 	addcc	r3, r5, r1, lsr r0
     55c:	01040200 	mrseq	r0, R12_usr
     560:	039e7903 	orrseq	r7, lr, #49152	; 0xc000
     564:	0058080c 	subseq	r0, r8, ip, lsl #16
     568:	06010402 	streq	r0, [r1], -r2, lsl #8
     56c:	00122802 	andseq	r2, r2, r2, lsl #16
     570:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
     574:	02040200 	andeq	r0, r4, #0, 4
     578:	0200a106 	andeq	sl, r0, #-2147483647	; 0x80000001
     57c:	5a080204 	bpl	200d94 <__bss_end+0x1eb29c>
     580:	0069a22f 	rsbeq	sl, r9, pc, lsr #4
     584:	68020402 	stmdavs	r2, {r1, sl}
     588:	02040200 	andeq	r0, r4, #0, 4
     58c:	02001e08 	andeq	r1, r0, #8, 28	; 0x80
     590:	66060104 	strvs	r0, [r6], -r4, lsl #2
     594:	4b4b6b06 	blmi	12db1b4 <__bss_end+0x12c56bc>
     598:	f667674e 			; <UNDEFINED> instruction: 0xf667674e
     59c:	a0838389 	addge	r8, r3, r9, lsl #7
     5a0:	2f4d6ad8 	svccs	0x004d6ad8
     5a4:	01000a02 	tsteq	r0, r2, lsl #20
     5a8:	00023101 	andeq	r3, r2, r1, lsl #2
     5ac:	e3000200 	movw	r0, #512	; 0x200
     5b0:	02000001 	andeq	r0, r0, #1
     5b4:	0d0efb01 	vstreq	d15, [lr, #-4]
     5b8:	01010100 	mrseq	r0, (UNDEF: 17)
     5bc:	00000001 	andeq	r0, r0, r1
     5c0:	01000001 	tsteq	r0, r1
     5c4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 510 <_start-0x7af0>
     5c8:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xf65
     5cc:	6f776e75 	svcvs	0x00776e75
     5d0:	6f442f6f 	svcvs	0x00442f6f
     5d4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0x563
     5d8:	2f73746e 	svccs	0x0073746e
     5dc:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     5e0:	73756f68 	cmnvc	r5, #104, 30	; 0x1a0
     5e4:	34303465 	ldrtcc	r3, [r0], #-1125	; 0x465
     5e8:	726f542f 	rsbvc	r5, pc, #788529152	; 0x2f000000
     5ec:	462f7375 			; <UNDEFINED> instruction: 0x462f7375
     5f0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     5f4:	5f534f54 	svcpl	0x00534f54
     5f8:	6e72654b 	cdpvs	5, 7, cr6, cr2, cr11, {2}
     5fc:	442f6c65 	strtmi	r6, [pc], #-3173	; 604 <_start-0x79fc>
     600:	5f6f6d65 	svcpl	0x006f6d65
     604:	6e696c42 	cdpvs	12, 6, cr6, cr9, cr2, {2}
     608:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
     60c:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     610:	2f385f4f 	svccs	0x00385f4f
     614:	70736152 	rsbsvc	r6, r3, r2, asr r1
     618:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     61c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     620:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     624:	534f5452 	movtpl	r5, #62546	; 0xf452
     628:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
     62c:	312d646c 	teqcc	sp, ip, ror #8
     630:	32353034 	eorscc	r3, r5, #52	; 0x34
     634:	2f332d33 	svccs	0x00332d33
     638:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     63c:	534f5452 	movtpl	r5, #62546	; 0xf452
     640:	756f532f 	strbvc	r5, [pc, #-815]!	; 319 <_start-0x7ce7>
     644:	00656372 	rsbeq	r6, r5, r2, ror r3
     648:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 594 <_start-0x7a6c>
     64c:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xf65
     650:	6f776e75 	svcvs	0x00776e75
     654:	6f442f6f 	svcvs	0x00442f6f
     658:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0x563
     65c:	2f73746e 	svccs	0x0073746e
     660:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     664:	73756f68 	cmnvc	r5, #104, 30	; 0x1a0
     668:	34303465 	ldrtcc	r3, [r0], #-1125	; 0x465
     66c:	726f542f 	rsbvc	r5, pc, #788529152	; 0x2f000000
     670:	462f7375 			; <UNDEFINED> instruction: 0x462f7375
     674:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     678:	5f534f54 	svcpl	0x00534f54
     67c:	6e72654b 	cdpvs	5, 7, cr6, cr2, cr11, {2}
     680:	442f6c65 	strtmi	r6, [pc], #-3173	; 688 <_start-0x7978>
     684:	5f6f6d65 	svcpl	0x006f6d65
     688:	6e696c42 	cdpvs	12, 6, cr6, cr9, cr2, {2}
     68c:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
     690:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     694:	2f385f4f 	svccs	0x00385f4f
     698:	70736152 	rsbsvc	r6, r3, r2, asr r1
     69c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     6a0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     6a4:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     6a8:	534f5452 	movtpl	r5, #62546	; 0xf452
     6ac:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
     6b0:	312d646c 	teqcc	sp, ip, ror #8
     6b4:	32353034 	eorscc	r3, r5, #52	; 0x34
     6b8:	2f332d33 	svccs	0x00332d33
     6bc:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     6c0:	534f5452 	movtpl	r5, #62546	; 0xf452
     6c4:	756f532f 	strbvc	r5, [pc, #-815]!	; 39d <_start-0x7c63>
     6c8:	2f656372 	svccs	0x00656372
     6cc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     6d0:	00656475 	rsbeq	r6, r5, r5, ror r4
     6d4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 620 <_start-0x79e0>
     6d8:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xf65
     6dc:	6f776e75 	svcvs	0x00776e75
     6e0:	6f442f6f 	svcvs	0x00442f6f
     6e4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0x563
     6e8:	2f73746e 	svccs	0x0073746e
     6ec:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     6f0:	73756f68 	cmnvc	r5, #104, 30	; 0x1a0
     6f4:	34303465 	ldrtcc	r3, [r0], #-1125	; 0x465
     6f8:	726f542f 	rsbvc	r5, pc, #788529152	; 0x2f000000
     6fc:	462f7375 			; <UNDEFINED> instruction: 0x462f7375
     700:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     704:	5f534f54 	svcpl	0x00534f54
     708:	6e72654b 	cdpvs	5, 7, cr6, cr2, cr11, {2}
     70c:	442f6c65 	strtmi	r6, [pc], #-3173	; 714 <_start-0x78ec>
     710:	5f6f6d65 	svcpl	0x006f6d65
     714:	6e696c42 	cdpvs	12, 6, cr6, cr9, cr2, {2}
     718:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
     71c:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     720:	2f385f4f 	svccs	0x00385f4f
     724:	70736152 	rsbsvc	r6, r3, r2, asr r1
     728:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     72c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     730:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     734:	534f5452 	movtpl	r5, #62546	; 0xf452
     738:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
     73c:	312d646c 	teqcc	sp, ip, ror #8
     740:	32353034 	eorscc	r3, r5, #52	; 0x34
     744:	2f332d33 	svccs	0x00332d33
     748:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     74c:	534f5452 	movtpl	r5, #62546	; 0xf452
     750:	756f532f 	strbvc	r5, [pc, #-815]!	; 429 <_start-0x7bd7>
     754:	2f656372 	svccs	0x00656372
     758:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
     75c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     760:	4343472f 	movtmi	r4, #14127	; 0x372f
     764:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     768:	72656270 	rsbvc	r6, r5, #112, 4
     76c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     770:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     774:	632e7473 	teqvs	lr, #1929379840	; 0x73000000
     778:	00000100 	andeq	r0, r0, r0, lsl #2
     77c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0x96c
     780:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     784:	6f700000 	svcvs	0x00700000
     788:	616d7472 	smcvs	55106	; 0xd742
     78c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     790:	00030068 	andeq	r0, r3, r8, rrx
     794:	05000000 	streq	r0, [r0, #-0]
     798:	010d2802 	tsteq	sp, r2, lsl #16
     79c:	00cc0300 	sbceq	r0, ip, r0, lsl #6
     7a0:	6a868601 	bvs	fe1a1fac <_estack+0xf6191fac>
     7a4:	6a678483 	bvs	19e19b8 <__bss_end+0x19cbec0>
     7a8:	a56a6784 	strbge	r6, [sl, #-1924]!	; 0x784
     7ac:	83838368 	orrhi	r8, r3, #104, 6	; 0xa0000001
     7b0:	9f686967 	svcls	0x00686967
     7b4:	0903a36a 	stmdbeq	r3, {r1, r3, r5, r6, r8, r9, sp, pc}
     7b8:	14036866 	strne	r6, [r3], #-2150	; 0x866
     7bc:	04020082 	streq	r0, [r2], #-130	; 0x82
     7c0:	00820602 	addeq	r0, r2, r2, lsl #12
     7c4:	66010402 	strvs	r0, [r1], -r2, lsl #8
     7c8:	8383c106 	orrhi	ip, r3, #-2147483647	; 0x80000001
     7cc:	9f686a67 	svcls	0x00686a67
     7d0:	a29f856a 	addsge	r8, pc, #444596224	; 0x1a800000
     7d4:	6785a069 	strvs	sl, [r5, r9, rrx]
     7d8:	0006029f 	muleq	r6, pc, r2	; <UNPREDICTABLE>
     7dc:	039d0101 	orrseq	r0, sp, #1073741824	; 0x40000000
     7e0:	00020000 	andeq	r0, r2, r0
     7e4:	00000246 	andeq	r0, r0, r6, asr #4
     7e8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     7ec:	0101000d 	tsteq	r1, sp
     7f0:	00000101 	andeq	r0, r0, r1, lsl #2
     7f4:	00000100 	andeq	r0, r0, r0, lsl #2
     7f8:	6f682f01 	svcvs	0x00682f01
     7fc:	6b2f656d 	blvs	bd9db8 <__bss_end+0xbc42c0>
     800:	776e7565 	strbvc	r7, [lr, -r5, ror #10]!
     804:	442f6f6f 	strtmi	r6, [pc], #-3951	; 80c <_start-0x77f4>
     808:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
     80c:	73746e65 	cmnvc	r4, #1616	; 0x650
     810:	7261772f 	rsbvc	r7, r1, #12320768	; 0xbc0000
     814:	756f6865 	strbvc	r6, [pc, #-2149]!	; ffffffb7 <_estack+0xf7feffb7>
     818:	30346573 	eorscc	r6, r4, r3, ror r5
     81c:	6f542f34 	svcvs	0x00542f34
     820:	2f737572 	svccs	0x00737572
     824:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     828:	534f5452 	movtpl	r5, #62546	; 0xf452
     82c:	72654b5f 	rsbvc	r4, r5, #97280	; 0x17c00
     830:	2f6c656e 	svccs	0x006c656e
     834:	6f6d6544 	svcvs	0x006d6544
     838:	696c425f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, lr}^
     83c:	6e696b6e 	vnmulvs.f64	d22, d9, d30
     840:	50475f67 	subpl	r5, r7, r7, ror #30
     844:	385f4f49 	ldmdacc	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     848:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     84c:	72656270 	rsbvc	r6, r5, #112, 4
     850:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     854:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0x62d
     858:	4f545265 	svcmi	0x00545265
     85c:	75622d53 	strbvc	r2, [r2, #-3411]!	; 0xd53
     860:	2d646c69 	stclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     864:	35303431 	ldrcc	r3, [r0, #-1073]!	; 0x431
     868:	332d3332 	teqcc	sp, #-939524096	; 0xc8000000
     86c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     870:	4f545265 	svcmi	0x00545265
     874:	6f532f53 	svcvs	0x00532f53
     878:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     87c:	73752f00 	cmnvc	r5, #0, 30
     880:	6f6c2f72 	svcvs	0x006c2f72
     884:	2f6c6163 	svccs	0x006c6163
     888:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     88c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     890:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     894:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     898:	5f342d69 	svcpl	0x00342d69
     89c:	30322d38 	eorscc	r2, r2, r8, lsr sp
     8a0:	33713431 	cmncc	r1, #822083584	; 0x31000000
     8a4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     8a8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     8ac:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     8b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     8b4:	61652d65 	cmnvs	r5, r5, ror #26
     8b8:	342f6962 	strtcc	r6, [pc], #-2402	; 8c0 <_start-0x7740>
     8bc:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
     8c0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     8c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     8c8:	6f682f00 	svcvs	0x00682f00
     8cc:	6b2f656d 	blvs	bd9e88 <__bss_end+0xbc4390>
     8d0:	776e7565 	strbvc	r7, [lr, -r5, ror #10]!
     8d4:	442f6f6f 	strtmi	r6, [pc], #-3951	; 8dc <_start-0x7724>
     8d8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
     8dc:	73746e65 	cmnvc	r4, #1616	; 0x650
     8e0:	7261772f 	rsbvc	r7, r1, #12320768	; 0xbc0000
     8e4:	756f6865 	strbvc	r6, [pc, #-2149]!	; 87 <_start-0x7f79>
     8e8:	30346573 	eorscc	r6, r4, r3, ror r5
     8ec:	6f542f34 	svcvs	0x00542f34
     8f0:	2f737572 	svccs	0x00737572
     8f4:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     8f8:	534f5452 	movtpl	r5, #62546	; 0xf452
     8fc:	72654b5f 	rsbvc	r4, r5, #97280	; 0x17c00
     900:	2f6c656e 	svccs	0x006c656e
     904:	6f6d6544 	svcvs	0x006d6544
     908:	696c425f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, lr}^
     90c:	6e696b6e 	vnmulvs.f64	d22, d9, d30
     910:	50475f67 	subpl	r5, r7, r7, ror #30
     914:	385f4f49 	ldmdacc	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     918:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     91c:	72656270 	rsbvc	r6, r5, #112, 4
     920:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     924:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0x62d
     928:	4f545265 	svcmi	0x00545265
     92c:	75622d53 	strbvc	r2, [r2, #-3411]!	; 0xd53
     930:	2d646c69 	stclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     934:	35303431 	ldrcc	r3, [r0, #-1073]!	; 0x431
     938:	332d3332 	teqcc	sp, #-939524096	; 0xc8000000
     93c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     940:	4f545265 	svcmi	0x00545265
     944:	6f532f53 	svcvs	0x00532f53
     948:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     94c:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     950:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     954:	43472f65 	movtmi	r2, #32613	; 0x7f65
     958:	61522f43 	cmpvs	r2, r3, asr #30
     95c:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
     960:	50797272 	rsbspl	r7, r9, r2, ror r2
     964:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	; <UNPREDICTABLE>
     968:	2f656d6f 	svccs	0x00656d6f
     96c:	6e75656b 	cdpvs	5, 7, cr6, cr5, cr11, {3}
     970:	2f6f6f77 	svccs	0x006f6f77
     974:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xf44
     978:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
     97c:	61772f73 	cmnvs	r7, r3, ror pc
     980:	6f686572 	svcvs	0x00686572
     984:	34657375 	strbtcc	r7, [r5], #-885	; 0x375
     988:	542f3430 	strtpl	r3, [pc], #-1072	; 990 <_start-0x7670>
     98c:	7375726f 	cmnvc	r5, #-268435450	; 0xf0000006
     990:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     994:	4f545265 	svcmi	0x00545265
     998:	654b5f53 	strbvs	r5, [fp, #-3923]	; 0xf53
     99c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     9a0:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
     9a4:	6c425f6f 	mcrrvs	15, 6, r5, r2, cr15
     9a8:	696b6e69 	stmdbvs	fp!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     9ac:	475f676e 	ldrbmi	r6, [pc, -lr, ror #14]
     9b0:	5f4f4950 	svcpl	0x004f4950
     9b4:	61522f38 	cmpvs	r2, r8, lsr pc
     9b8:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
     9bc:	50797272 	rsbspl	r7, r9, r2, ror r2
     9c0:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     9c4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     9c8:	622d534f 	eorvs	r5, sp, #1006632961	; 0x3c000001
     9cc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
     9d0:	3034312d 	eorscc	r3, r4, sp, lsr #2
     9d4:	2d333235 	lfmcs	f3, 4, [r3, #-212]!	; 0xffffff2c
     9d8:	72462f33 	subvc	r2, r6, #51, 30	; 0xcc
     9dc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     9e0:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     9e4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     9e8:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     9ec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     9f0:	71000065 	tstvc	r0, r5, rrx
     9f4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     9f8:	0100632e 	tsteq	r0, lr, lsr #6
     9fc:	74730000 	ldrbtvc	r0, [r3], #-0
     a00:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     a04:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a08:	6f700000 	svcvs	0x00700000
     a0c:	616d7472 	smcvs	55106	; 0xd742
     a10:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     a14:	00030068 	andeq	r0, r3, r8, rrx
     a18:	73696c00 	cmnvc	r9, #0, 24
     a1c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     a20:	74000004 	strvc	r0, [r0], #-4
     a24:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
     a28:	00040068 	andeq	r0, r4, r8, rrx
     a2c:	05000000 	streq	r0, [r0, #-0]
     a30:	010fb002 	tsteq	pc, r2
     a34:	02970300 	addseq	r0, r7, #0, 6
     a38:	0830a101 	ldmdaeq	r0!, {r0, r8, sp, pc}
     a3c:	0883673d 	stmeq	r3, {r0, r2, r3, r4, r5, r8, r9, sl, sp, lr}
     a40:	6d686759 	stclvs	7, cr6, [r8, #-356]!	; 0xfffffe9c
     a44:	8351d884 	cmphi	r1, #132, 16	; 0x840000
     a48:	6a2f3285 	bvs	bcd464 <__bss_end+0xbb796c>
     a4c:	676851d9 			; <UNDEFINED> instruction: 0x676851d9
     a50:	869fa06a 	ldrhi	sl, [pc], sl, rrx
     a54:	6b6e6767 	blvs	1b9a7f8 <__bss_end+0x1b84d00>
     a58:	d0032f51 	andle	r2, r3, r1, asr pc
     a5c:	03d76601 	bicseq	r6, r7, #1048576	; 0x100000
     a60:	bd324a0b 	vldmdblt	r2!, {s8-s18}
     a64:	32dc8486 	sbcscc	r8, ip, #-2046820352	; 0x86000000
     a68:	336a4e32 	cmncc	sl, #800	; 0x320
     a6c:	4e676a4c 	vnmulmi.f32	s13, s14, s24
     a70:	02002f33 	andeq	r2, r0, #51, 30	; 0xcc
     a74:	9e060104 	adflss	f0, f6, f4
     a78:	02040200 	andeq	r0, r4, #0, 4
     a7c:	04020066 	streq	r0, [r2], #-102	; 0x66
     a80:	02008201 	andeq	r8, r0, #268435456	; 0x10000000
     a84:	00660204 	rsbeq	r0, r6, r4, lsl #4
     a88:	06020402 	streq	r0, [r2], -r2, lsl #8
     a8c:	c1a1f431 			; <UNDEFINED> instruction: 0xc1a1f431
     a90:	4b508451 	blmi	1421bdc <__bss_end+0x140c0e4>
     a94:	032e0e03 	teqeq	lr, #3, 28	; 0x30
     a98:	334b2e78 	movtcc	r2, #48760	; 0xbe78
     a9c:	d2032f4c 	andle	r2, r3, #76, 30	; 0x130
     aa0:	0c036601 	stceq	6, cr6, [r3], {1}
     aa4:	86be4cd6 	ssathi	r4, #31, r6, asr #25
     aa8:	68da8484 	ldmvs	sl, {r2, r7, sl, pc}^
     aac:	00820903 	addeq	r0, r2, r3, lsl #18
     ab0:	a1010402 	tstge	r1, r2, lsl #8
     ab4:	6a2f4f6b 	bvs	bd4868 <__bss_end+0xbbed70>
     ab8:	4a0d03d7 	bmi	341a1c <__bss_end+0x32bf24>
     abc:	68688532 	stmdavs	r8!, {r1, r4, r5, r8, sl, pc}^
     ac0:	9e0d036b 	cdpls	3, 0, cr0, cr13, cr11, {3}
     ac4:	0a03d884 	beq	f6cdc <__bss_end+0xe11e4>
     ac8:	d9866a4a 	stmible	r6, {r1, r3, r6, r9, fp, sp, lr}
     acc:	6a4e2f33 	bvs	138c7a0 <__bss_end+0x1376ca8>
     ad0:	676a4c30 			; <UNDEFINED> instruction: 0x676a4c30
     ad4:	002f334e 	eoreq	r3, pc, lr, asr #6
     ad8:	06010402 	streq	r0, [r1], -r2, lsl #8
     adc:	0402009e 	streq	r0, [r2], #-158	; 0x9e
     ae0:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     ae4:	00820104 	addeq	r0, r2, r4, lsl #2
     ae8:	66020402 	strvs	r0, [r2], -r2, lsl #8
     aec:	02040200 	andeq	r0, r4, #0, 4
     af0:	03f43106 	mvnseq	r3, #-2147483647	; 0x80000001
     af4:	4bbb9e11 	blmi	feee8340 <_estack+0xf6ed8340>
     af8:	034b5084 	movteq	r5, #45188	; 0xb084
     afc:	4b292e0a 	blmi	a4c32c <__bss_end+0xa36834>
     b00:	6a2f4c30 	bvs	bd3bc8 <__bss_end+0xbbe0d0>
     b04:	67864dc1 	strvs	r4, [r6, r1, asr #27]
     b08:	da8484a3 	ble	fe121d9c <_estack+0xf6111d9c>
     b0c:	82090368 	andhi	r0, r9, #104, 6	; 0xa0000001
     b10:	01040200 	mrseq	r0, R12_usr
     b14:	2f506aa1 	svccs	0x00506aa1
     b18:	672f876a 	strvs	r8, [pc, -sl, ror #14]!
     b1c:	876a2f30 			; <UNDEFINED> instruction: 0x876a2f30
     b20:	87862f68 	strhi	r2, [r6, r8, ror #30]
     b24:	22034b83 	andcs	r4, r3, #134144	; 0x20c00
     b28:	0d03bb4a 	vstreq	d11, [r3, #-296]	; 0xfffffed8
     b2c:	d7f36882 	ldrble	r6, [r3, r2, lsl #17]!
     b30:	f3f3a3bc 	vrsra.u64	d26, d28, #13
     b34:	4e9ff6bc 	mrcmi	6, 4, APSR_nzcv, cr15, cr12, {5}
     b38:	bcd7849f 	cfldrdlt	mvd8, [r7], {159}	; 0x9f
     b3c:	894ef484 	stmdbhi	lr, {r2, r7, sl, ip, sp, lr, pc}^
     b40:	da863231 	ble	fe18d40c <_estack+0xf617d40c>
     b44:	0200be31 	andeq	fp, r0, #784	; 0x310
     b48:	6d030104 	stfvss	f0, [r3, #-16]
     b4c:	8217032e 	andshi	r0, r7, #-1207959552	; 0xb8000000
     b50:	30303168 	eorscc	r3, r0, r8, ror #2
     b54:	be31d884 	cdplt	8, 3, cr13, cr1, cr4, {4}
     b58:	01040200 	mrseq	r0, R12_usr
     b5c:	032e7303 	teqeq	lr, #201326592	; 0xc000000
     b60:	2f688211 	svccs	0x00688211
     b64:	d72f854e 	strle	r8, [pc, -lr, asr #10]!
     b68:	866a2f30 	uqasxhi	r2, sl, r0
     b6c:	85862fd8 	strhi	r2, [r6, #4056]	; 0xfd8
     b70:	3021082f 	eorcc	r0, r1, pc, lsr #16
     b74:	08866a2f 	stmeq	r6, {r0, r1, r2, r3, r5, r9, fp, sp, lr}
     b78:	08022f22 	stmdaeq	r2, {r1, r5, r8, r9, sl, fp, sp}
     b7c:	9c010100 	stflss	f0, [r1], {-0}
     b80:	02000005 	andeq	r0, r0, #5
     b84:	00026200 	andeq	r6, r2, r0, lsl #4
     b88:	fb010200 	blx	41392 <__bss_end+0x2b89a>
     b8c:	01000d0e 	tsteq	r0, lr, lsl #26
     b90:	00010101 	andeq	r0, r1, r1, lsl #2
     b94:	00010000 	andeq	r0, r1, r0
     b98:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     b9c:	2f656d6f 	svccs	0x00656d6f
     ba0:	6e75656b 	cdpvs	5, 7, cr6, cr5, cr11, {3}
     ba4:	2f6f6f77 	svccs	0x006f6f77
     ba8:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xf44
     bac:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
     bb0:	61772f73 	cmnvs	r7, r3, ror pc
     bb4:	6f686572 	svcvs	0x00686572
     bb8:	34657375 	strbtcc	r7, [r5], #-885	; 0x375
     bbc:	542f3430 	strtpl	r3, [pc], #-1072	; bc4 <_start-0x743c>
     bc0:	7375726f 	cmnvc	r5, #-268435450	; 0xf0000006
     bc4:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     bc8:	4f545265 	svcmi	0x00545265
     bcc:	654b5f53 	strbvs	r5, [fp, #-3923]	; 0xf53
     bd0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     bd4:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
     bd8:	6c425f6f 	mcrrvs	15, 6, r5, r2, cr15
     bdc:	696b6e69 	stmdbvs	fp!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     be0:	475f676e 	ldrbmi	r6, [pc, -lr, ror #14]
     be4:	5f4f4950 	svcpl	0x004f4950
     be8:	61522f38 	cmpvs	r2, r8, lsr pc
     bec:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
     bf0:	50797272 	rsbspl	r7, r9, r2, ror r2
     bf4:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     bf8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     bfc:	622d534f 	eorvs	r5, sp, #1006632961	; 0x3c000001
     c00:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
     c04:	3034312d 	eorscc	r3, r4, sp, lsr #2
     c08:	2d333235 	lfmcs	f3, 4, [r3, #-212]!	; 0xffffff2c
     c0c:	72462f33 	subvc	r2, r6, #51, 30	; 0xcc
     c10:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     c14:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     c18:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     c1c:	752f0065 	strvc	r0, [pc, #-101]!	; bbf <_start-0x7441>
     c20:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; a5c <_start-0x75a4>
     c24:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     c28:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     c2c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     c30:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     c34:	61652d65 	cmnvs	r5, r5, ror #26
     c38:	342d6962 	strtcc	r6, [sp], #-2402	; 0x962
     c3c:	322d385f 	eorcc	r3, sp, #6225920	; 0x5f0000
     c40:	71343130 	teqvc	r4, r0, lsr r1
     c44:	696c2f33 	stmdbvs	ip!, {r0, r1, r4, r5, r8, r9, sl, fp, sp}^
     c48:	63672f62 	cmnvs	r7, #392	; 0x188
     c4c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     c50:	6f6e2d6d 	svcvs	0x006e2d6d
     c54:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     c58:	2f696261 	svccs	0x00696261
     c5c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     c60:	6e692f34 	mcrvs	15, 3, r2, cr9, cr4, {1}
     c64:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     c68:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     c6c:	2f656d6f 	svccs	0x00656d6f
     c70:	6e75656b 	cdpvs	5, 7, cr6, cr5, cr11, {3}
     c74:	2f6f6f77 	svccs	0x006f6f77
     c78:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xf44
     c7c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
     c80:	61772f73 	cmnvs	r7, r3, ror pc
     c84:	6f686572 	svcvs	0x00686572
     c88:	34657375 	strbtcc	r7, [r5], #-885	; 0x375
     c8c:	542f3430 	strtpl	r3, [pc], #-1072	; c94 <_start-0x736c>
     c90:	7375726f 	cmnvc	r5, #-268435450	; 0xf0000006
     c94:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     c98:	4f545265 	svcmi	0x00545265
     c9c:	654b5f53 	strbvs	r5, [fp, #-3923]	; 0xf53
     ca0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     ca4:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
     ca8:	6c425f6f 	mcrrvs	15, 6, r5, r2, cr15
     cac:	696b6e69 	stmdbvs	fp!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     cb0:	475f676e 	ldrbmi	r6, [pc, -lr, ror #14]
     cb4:	5f4f4950 	svcpl	0x004f4950
     cb8:	61522f38 	cmpvs	r2, r8, lsr pc
     cbc:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
     cc0:	50797272 	rsbspl	r7, r9, r2, ror r2
     cc4:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     cc8:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     ccc:	622d534f 	eorvs	r5, sp, #1006632961	; 0x3c000001
     cd0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
     cd4:	3034312d 	eorscc	r3, r4, sp, lsr #2
     cd8:	2d333235 	lfmcs	f3, 4, [r3, #-212]!	; 0xffffff2c
     cdc:	72462f33 	subvc	r2, r6, #51, 30	; 0xcc
     ce0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     ce4:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     ce8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     cec:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     cf0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     cf4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     cf8:	2f656d6f 	svccs	0x00656d6f
     cfc:	6e75656b 	cdpvs	5, 7, cr6, cr5, cr11, {3}
     d00:	2f6f6f77 	svccs	0x006f6f77
     d04:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xf44
     d08:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
     d0c:	61772f73 	cmnvs	r7, r3, ror pc
     d10:	6f686572 	svcvs	0x00686572
     d14:	34657375 	strbtcc	r7, [r5], #-885	; 0x375
     d18:	542f3430 	strtpl	r3, [pc], #-1072	; d20 <_start-0x72e0>
     d1c:	7375726f 	cmnvc	r5, #-268435450	; 0xf0000006
     d20:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     d24:	4f545265 	svcmi	0x00545265
     d28:	654b5f53 	strbvs	r5, [fp, #-3923]	; 0xf53
     d2c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     d30:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
     d34:	6c425f6f 	mcrrvs	15, 6, r5, r2, cr15
     d38:	696b6e69 	stmdbvs	fp!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     d3c:	475f676e 	ldrbmi	r6, [pc, -lr, ror #14]
     d40:	5f4f4950 	svcpl	0x004f4950
     d44:	61522f38 	cmpvs	r2, r8, lsr pc
     d48:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
     d4c:	50797272 	rsbspl	r7, r9, r2, ror r2
     d50:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     d54:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     d58:	622d534f 	eorvs	r5, sp, #1006632961	; 0x3c000001
     d5c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
     d60:	3034312d 	eorscc	r3, r4, sp, lsr #2
     d64:	2d333235 	lfmcs	f3, 4, [r3, #-212]!	; 0xffffff2c
     d68:	72462f33 	subvc	r2, r6, #51, 30	; 0xcc
     d6c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     d70:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     d74:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d78:	6f702f65 	svcvs	0x00702f65
     d7c:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     d80:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     d84:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     d88:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     d8c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     d90:	00006950 	andeq	r6, r0, r0, asr r9
     d94:	6b736174 	blvs	1cd936c <__bss_end+0x1cc3874>
     d98:	00632e73 	rsbeq	r2, r3, r3, ror lr
     d9c:	73000001 	movwvc	r0, #1
     da0:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
     da4:	00682e66 	rsbeq	r2, r8, r6, ror #28
     da8:	70000002 	andvc	r0, r0, r2
     dac:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xf72
     db0:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
     db4:	00030068 	andeq	r0, r3, r8, rrx
     db8:	726f7000 	rsbvc	r7, pc, #0
     dbc:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     dc0:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     dc4:	00000400 	andeq	r0, r0, r0, lsl #8
     dc8:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     dcc:	534f5452 	movtpl	r5, #62546	; 0xf452
     dd0:	0300682e 	movweq	r6, #2094	; 0x82e
     dd4:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     dd8:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     ddc:	00000300 	andeq	r0, r0, r0, lsl #6
     de0:	6b736174 	blvs	1cd93b8 <__bss_end+0x1cc38c0>
     de4:	0300682e 	movweq	r6, #2094	; 0x82e
     de8:	00000000 	andeq	r0, r0, r0
     dec:	1b6c0205 	blne	1b01608 <__bss_end+0x1aebb10>
     df0:	9b030001 	blls	c0dfc <__bss_end+0xab304>
     df4:	09030103 	stmdbeq	r3, {r0, r1, r8}
     df8:	1803a0d6 	stmdane	r3, {r1, r2, r4, r6, r7, sp, pc}
     dfc:	1403d766 	strne	sp, [r3], #-1894	; 0x766
     e00:	d60c0366 	strle	r0, [ip], -r6, ror #6
     e04:	306b6bdd 	ldrdcc	r6, [fp], #-189	; 0xffffff43	; <UNPREDICTABLE>
     e08:	8768869f 			; <UNDEFINED> instruction: 0x8768869f
     e0c:	6dbc8452 	cfldrsvs	mvf8, [ip, #328]!	; 0x148
     e10:	820903bc 	andhi	r0, r9, #188, 6	; 0xf0000002
     e14:	040200a0 	streq	r0, [r2], #-160	; 0xa0
     e18:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     e1c:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
     e20:	02040200 	andeq	r0, r4, #0, 4
     e24:	00920806 	addseq	r0, r2, r6, lsl #16
     e28:	4e020402 	cdpmi	4, 0, cr0, cr2, cr2, {0}
     e2c:	86684e4e 	strbthi	r4, [r8], -lr, asr #28
     e30:	082f33bc 	stmdaeq	pc!, {r2, r3, r4, r5, r7, r8, r9, ip, sp}	; <UNPREDICTABLE>
     e34:	a0328542 	eorsge	r8, r2, r2, asr #10
     e38:	0402004e 	streq	r0, [r2], #-78	; 0x4e
     e3c:	00660601 	rsbeq	r0, r6, r1, lsl #12
     e40:	66020402 	strvs	r0, [r2], -r2, lsl #8
     e44:	03040200 	movweq	r0, #16896	; 0x4200
     e48:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     e4c:	00340603 	eorseq	r0, r4, r3, lsl #12
     e50:	85030402 	strhi	r0, [r3, #-1026]	; 0x402
     e54:	a2a38584 	adcge	r8, r3, #132, 10	; 0x21000000
     e58:	688431a2 	stmvs	r4, {r1, r5, r7, r8, ip, sp}
     e5c:	d6100331 			; <UNDEFINED> instruction: 0xd6100331
     e60:	a0314fa0 	eorsge	r4, r1, r0, lsr #31
     e64:	040200c1 	streq	r0, [r2], #-193	; 0xc1
     e68:	069e0601 	ldreq	r0, [lr], r1, lsl #12
     e6c:	02006ea0 	andeq	r6, r0, #160, 28	; 0xa00
     e70:	9e060104 	adflss	f0, f6, f4
     e74:	684fa006 	stmdavs	pc, {r1, r2, sp, pc}^	; <UNPREDICTABLE>
     e78:	4e4d9f6d 	cdpmi	15, 4, cr9, cr13, cr13, {3}
     e7c:	848a3068 	strhi	r3, [sl], #104	; 0x68
     e80:	0e03684d 	cdpeq	8, 0, cr6, cr3, cr13, {2}
     e84:	4c9fa32e 	ldcmi	3, cr10, [pc], {46}	; 0x2e
     e88:	8a30684f 	bhi	c1afcc <__bss_end+0xc054d4>
     e8c:	02003286 	andeq	r3, r0, #1610612744	; 0x60000008
     e90:	66060104 	strvs	r0, [r6], -r4, lsl #2
     e94:	02040200 	andeq	r0, r4, #0, 4
     e98:	04020066 	streq	r0, [r2], #-102	; 0x66
     e9c:	02002e03 	andeq	r2, r0, #3, 28	; 0x30
     ea0:	2f060304 	svccs	0x00060304
     ea4:	03040200 	movweq	r0, #16896	; 0x4200
     ea8:	04020068 	streq	r0, [r2], #-104	; 0x68
     eac:	02003003 	andeq	r3, r0, #3
     eb0:	8a2f0304 	bhi	bc1ac8 <__bss_end+0xbabfd0>
     eb4:	4d684fa1 	stclmi	15, cr4, [r8, #-644]!	; 0xfffffd7c
     eb8:	004fa030 	subeq	sl, pc, r0, lsr r0	; <UNPREDICTABLE>
     ebc:	06010402 	streq	r0, [r1], -r2, lsl #8
     ec0:	04020066 	streq	r0, [r2], #-102	; 0x66
     ec4:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     ec8:	002e0304 	eoreq	r0, lr, r4, lsl #6
     ecc:	06030402 	streq	r0, [r3], -r2, lsl #8
     ed0:	002e0a03 	eoreq	r0, lr, r3, lsl #20
     ed4:	6a030402 	bvs	c1ee4 <__bss_end+0xac3ec>
     ed8:	696c8486 	stmdbvs	ip!, {r1, r2, r7, sl, pc}^
     edc:	4a13036a 	bmi	4c1c8c <__bss_end+0x4ac194>
     ee0:	5d08886a 	stcpl	8, cr8, [r8, #-424]	; 0xfffffe58
     ee4:	04020083 	streq	r0, [r2], #-131	; 0x83
     ee8:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     eec:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
     ef0:	68930806 	ldmvs	r3, {r1, r2, fp}
     ef4:	85a62f32 	strhi	r2, [r6, #3890]!	; 0xf32
     ef8:	004ea032 	subeq	sl, lr, r2, lsr r0
     efc:	06010402 	streq	r0, [r1], -r2, lsl #8
     f00:	04020066 	streq	r0, [r2], #-102	; 0x66
     f04:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     f08:	002e0304 	eoreq	r0, lr, r4, lsl #6
     f0c:	06030402 	streq	r0, [r3], -r2, lsl #8
     f10:	04020033 	streq	r0, [r2], #-51	; 0x33
     f14:	85848503 	strhi	r8, [r4, #1283]	; 0x503
     f18:	856830a0 	strbhi	r3, [r8, #-160]!	; 0xa0
     f1c:	3286c051 	addcc	ip, r6, #81	; 0x51
     f20:	514b83c2 	smlalbtpl	r8, fp, r2, r3
     f24:	4f84a4a1 	svcmi	0x0084a4a1
     f28:	4e8ac22f 	cdpmi	2, 8, cr12, cr10, cr15, {1}
     f2c:	01040200 	mrseq	r0, R12_usr
     f30:	a0066606 	andge	r6, r6, r6, lsl #12
     f34:	0083a430 	addeq	sl, r3, r0, lsr r4
     f38:	06010402 	streq	r0, [r1], -r2, lsl #8
     f3c:	040200ba 	streq	r0, [r2], #-186	; 0xba
     f40:	02008202 	andeq	r8, r0, #536870912	; 0x20000000
     f44:	08060204 	stmdaeq	r6, {r2, r9}
     f48:	3032da93 	mlascc	r2, r3, sl, sp
     f4c:	839e0903 	orrshi	r0, lr, #49152	; 0xc000
     f50:	a24c4c50 	subge	r4, ip, #80, 24	; 0x5000
     f54:	833d0884 	teqhi	sp, #132, 16	; 0x840000
     f58:	01040200 	mrseq	r0, R12_usr
     f5c:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     f60:	06820204 	streq	r0, [r2], r4, lsl #4
     f64:	2fa4b308 	svccs	0x00a4b308
     f68:	03f20d03 	mvnseq	r0, #3, 26	; 0xc0
     f6c:	0d03660d 	stceq	6, cr6, [r3, #-52]	; 0xffffffcc
     f70:	0a03ac08 	beq	ebf98 <__bss_end+0xd64a0>
     f74:	0367a066 	cmneq	r7, #102	; 0x66
     f78:	0d036609 	stceq	6, cr6, [r3, #-36]	; 0xffffffdc
     f7c:	9f4ebe2e 	svcls	0x004ebe2e
     f80:	4d4e2f67 	stclmi	15, cr2, [lr, #-412]	; 0xfffffe64
     f84:	0368869f 	cmneq	r8, #166723584	; 0x9f00000
     f88:	a0304a0b 	eorsge	r4, r0, fp, lsl #20
     f8c:	304e8484 	subcc	r8, lr, r4, lsl #9
     f90:	00676767 	rsbeq	r6, r7, r7, ror #14
     f94:	06010402 	streq	r0, [r1], -r2, lsl #8
     f98:	0402009e 	streq	r0, [r2], #-158	; 0x9e
     f9c:	02006602 	andeq	r6, r0, #2097152	; 0x200000
     fa0:	08060204 	stmdaeq	r6, {r2, r9}
     fa4:	0200bc5c 	andeq	fp, r0, #92, 24	; 0x5c00
     fa8:	75030104 	strvc	r0, [r3, #-260]	; 0x104
     fac:	8212034a 	andshi	r0, r2, #671088641	; 0x28000001
     fb0:	002f3084 	eoreq	r3, pc, r4, lsl #1
     fb4:	9b010402 	blls	41fc4 <__bss_end+0x2c4cc>
     fb8:	4f820b03 	svcmi	0x00820b03
     fbc:	01040200 	mrseq	r0, R12_usr
     fc0:	84066606 	strhi	r6, [r6], #-1542	; 0x606
     fc4:	3033674b 	eorscc	r6, r3, fp, asr #14
     fc8:	080e032f 	stmdaeq	lr, {r0, r1, r2, r3, r5, r8, r9}
     fcc:	68306a58 	ldmdavs	r0!, {r3, r4, r6, r9, fp, sp, lr}
     fd0:	6a862f30 	bvs	fe18cc98 <_estack+0xf617cc98>
     fd4:	a22f694b 	eorge	r6, pc, #1228800	; 0x12c000
     fd8:	ae034b4d 	vmlsge.f64	d4, d3, d13
     fdc:	846c9e01 	strbthi	r9, [ip], #-3585	; 0xe01
     fe0:	8209039f 	andhi	r0, r9, #2080374786	; 0x7c000002
     fe4:	a0678367 	rsbge	r8, r7, r7, ror #6
     fe8:	879f8aa5 	ldrhi	r8, [pc, r5, lsr #21]
     fec:	01040200 	mrseq	r0, R12_usr
     ff0:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
     ff4:	20080204 	andcs	r0, r8, r4, lsl #4
     ff8:	01040200 	mrseq	r0, R12_usr
     ffc:	02009008 	andeq	r9, r0, #8
    1000:	00820204 	addeq	r0, r2, r4, lsl #4
    1004:	f2010402 	vshl.s8	d0, d2, d1
    1008:	02040200 	andeq	r0, r4, #0, 4
    100c:	04020082 	streq	r0, [r2], #-130	; 0x82
    1010:	0200ba01 	andeq	fp, r0, #4096	; 0x1000
    1014:	06820204 	streq	r0, [r2], r4, lsl #4
    1018:	1703cc08 	strne	ip, [r3, -r8, lsl #24]
    101c:	a25e089e 	subsge	r0, lr, #10354688	; 0x9e0000
    1020:	2f4f8668 	svccs	0x004f8668
    1024:	876e2f67 	strbhi	r2, [lr, -r7, ror #30]!
    1028:	2f4f8668 	svccs	0x004f8668
    102c:	8a2f3067 	bhi	bcd1d0 <__bss_end+0xbb76d8>
    1030:	4d8668a3 	stcmi	8, cr6, [r6, #652]	; 0x28c
    1034:	2f4dbe84 	svccs	0x004dbe84
    1038:	03866788 	orreq	r6, r6, #136, 14	; 0x2200000
    103c:	0031821e 	eorseq	r8, r1, lr, lsl r2
    1040:	9b010402 	blls	42050 <__bss_end+0x2c558>
    1044:	58080d03 	stmdapl	r8, {r0, r1, r8, sl, fp}
    1048:	01040200 	mrseq	r0, R12_usr
    104c:	12280206 	eorne	r0, r8, #1610612736	; 0x60000000
    1050:	02040200 	andeq	r0, r4, #0, 4
    1054:	f6a6069e 			; <UNDEFINED> instruction: 0xf6a6069e
    1058:	bf9e0b03 	svclt	0x009e0b03
    105c:	9fdc6ba3 	svcls	0x00dc6ba3
    1060:	034a0b03 	movteq	r0, #43779	; 0xab03
    1064:	11039e26 	tstne	r3, r6, lsr #28
    1068:	84848482 	strhi	r8, [r4], #1154	; 0x482
    106c:	04020083 	streq	r0, [r2], #-131	; 0x83
    1070:	00ba0601 	adcseq	r0, sl, r1, lsl #12
    1074:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    1078:	a1b20806 			; <UNDEFINED> instruction: 0xa1b20806
    107c:	2f4d6adc 	svccs	0x004d6adc
    1080:	838384f6 	orrhi	r8, r3, #-167772160	; 0xf6000000
    1084:	8434a4a2 	ldrthi	sl, [r4], #-1186	; 0x4a2
    1088:	0402006b 	streq	r0, [r2], #-107	; 0x6b
    108c:	06ba0601 	ldrteq	r0, [sl], r1, lsl #12
    1090:	230868c0 	movwcs	r6, #35008	; 0x88c0
    1094:	6a4b3d08 	bvs	12d04bc <__bss_end+0x12ba9c4>
    1098:	a22f304d 	eorge	r3, pc, #77	; 0x4d
    109c:	3203674b 	andcc	r6, r3, #19660800	; 0x12c0000
    10a0:	17038982 	strne	r8, [r3, -r2, lsl #19]
    10a4:	1103842e 	tstne	r3, lr, lsr #8
    10a8:	6610032e 	ldrvs	r0, [r0], -lr, lsr #6
    10ac:	686abddb 	stmdavs	sl!, {r0, r1, r3, r4, r6, r7, r8, sl, fp, ip, sp, pc}^
    10b0:	86836d4d 	strhi	r6, [r3], sp, asr #26
    10b4:	0a038369 	beq	e1e60 <__bss_end+0xcc368>
    10b8:	66140366 	ldrvs	r0, [r4], -r6, ror #6
    10bc:	694a1703 	stmdbvs	sl, {r0, r1, r8, r9, sl, ip}^
    10c0:	02040200 	andeq	r0, r4, #0, 4
    10c4:	04020068 	streq	r0, [r2], #-104	; 0x68
    10c8:	001e0802 	andseq	r0, lr, r2, lsl #16
    10cc:	06010402 	streq	r0, [r1], -r2, lsl #8
    10d0:	4b6b0666 	blmi	1ac2a70 <__bss_end+0x1aacf78>
    10d4:	50504e4b 	subspl	r4, r0, fp, asr #28
    10d8:	40086767 	andmi	r6, r8, r7, ror #14
    10dc:	d72f846d 	strle	r8, [pc, -sp, ror #8]!
    10e0:	83306a30 	teqhi	r0, #48, 20	; 0x30000
    10e4:	30a09f83 	adccc	r9, r0, r3, lsl #31
    10e8:	8484a24f 	strhi	sl, [r4], #591	; 0x24f
    10ec:	f72508a1 			; <UNDEFINED> instruction: 0xf72508a1
    10f0:	bfda69a0 	svclt	0x00da69a0
    10f4:	02006b68 	andeq	r6, r0, #104, 22	; 0x1a000
    10f8:	66060104 	strvs	r0, [r6], -r4, lsl #2
    10fc:	02040200 	andeq	r0, r4, #0, 4
    1100:	040200ba 	streq	r0, [r2], #-186	; 0xba
    1104:	02002e03 	andeq	r2, r0, #3, 28	; 0x30
    1108:	4c060304 	stcmi	3, cr0, [r6], {4}
    110c:	036b4b85 	cmneq	fp, #136192	; 0x21400
    1110:	032ff20a 	msreq	CPSR_fsxc, #-1610612736	; 0xa0000000
    1114:	8a66019d 	bhi	1981790 <__bss_end+0x196bc98>
    1118:	04024b83 	streq	r4, [r2], #-2947	; 0xb83
    111c:	5a010100 	bpl	41524 <__bss_end+0x2ba2c>
    1120:	02000001 	andeq	r0, r0, #1
    1124:	0000b400 	andeq	fp, r0, r0, lsl #8
    1128:	fb010200 	blx	41932 <__bss_end+0x2be3a>
    112c:	01000d0e 	tsteq	r0, lr, lsl #26
    1130:	00010101 	andeq	r0, r1, r1, lsl #2
    1134:	00010000 	andeq	r0, r1, r0
    1138:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    113c:	2f656d6f 	svccs	0x00656d6f
    1140:	6e75656b 	cdpvs	5, 7, cr6, cr5, cr11, {3}
    1144:	2f6f6f77 	svccs	0x006f6f77
    1148:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xf44
    114c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    1150:	61772f73 	cmnvs	r7, r3, ror pc
    1154:	6f686572 	svcvs	0x00686572
    1158:	34657375 	strbtcc	r7, [r5], #-885	; 0x375
    115c:	542f3430 	strtpl	r3, [pc], #-1072	; 1164 <_start-0x6e9c>
    1160:	7375726f 	cmnvc	r5, #-268435450	; 0xf0000006
    1164:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
    1168:	4f545265 	svcmi	0x00545265
    116c:	654b5f53 	strbvs	r5, [fp, #-3923]	; 0xf53
    1170:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1174:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1178:	6c425f6f 	mcrrvs	15, 6, r5, r2, cr15
    117c:	696b6e69 	stmdbvs	fp!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1180:	475f676e 	ldrbmi	r6, [pc, -lr, ror #14]
    1184:	5f4f4950 	svcpl	0x004f4950
    1188:	61522f38 	cmpvs	r2, r8, lsr pc
    118c:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
    1190:	50797272 	rsbspl	r7, r9, r2, ror r2
    1194:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1198:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
    119c:	622d534f 	eorvs	r5, sp, #1006632961	; 0x3c000001
    11a0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    11a4:	3034312d 	eorscc	r3, r4, sp, lsr #2
    11a8:	2d333235 	lfmcs	f3, 4, [r3, #-212]!	; 0xffffff2c
    11ac:	65442f33 	strbvs	r2, [r4, #-3891]	; 0xf33
    11b0:	442f6f6d 	strtmi	r6, [pc], #-3949	; 11b8 <_start-0x6e48>
    11b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    11b8:	00007372 	andeq	r7, r0, r2, ror r3
    11bc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    11c0:	70757272 	rsbsvc	r7, r5, r2, ror r2
    11c4:	632e7374 	teqvs	lr, #116, 6	; 0xd0000001
    11c8:	00000100 	andeq	r0, r0, r0, lsl #2
    11cc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    11d0:	70757272 	rsbsvc	r7, r5, r2, ror r2
    11d4:	682e7374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    11d8:	00000100 	andeq	r0, r0, r0, lsl #2
    11dc:	02050000 	andeq	r0, r5, #0
    11e0:	00013448 	andeq	r3, r1, r8, asr #8
    11e4:	4b011d03 	blmi	485f8 <__bss_end+0x32b00>
    11e8:	682f2f2f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
    11ec:	302f2f4b 	eorcc	r2, pc, fp, asr #30
    11f0:	6a660c03 	bvs	1984204 <__bss_end+0x196e70c>
    11f4:	674e674d 	strbvs	r6, [lr, -sp, asr #14]
    11f8:	4b674e4b 	blmi	19d4b2c <__bss_end+0x19bf034>
    11fc:	bc4c324f 	sfmlt	f3, 2, [ip], {79}	; 0x4f
    1200:	a4857508 	strge	r7, [r5], #1288	; 0x508
    1204:	02006868 	andeq	r6, r0, #104, 16	; 0x680000
    1208:	00670204 	rsbeq	r0, r7, r4, lsl #4
    120c:	83020402 	movwhi	r0, #9218	; 0x2402
    1210:	02040200 	andeq	r0, r4, #0, 4
    1214:	040200f0 	streq	r0, [r2], #-240	; 0xf0
    1218:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    121c:	bbbe2f6a 	bllt	fef8cfcc <_estack+0xf6f7cfcc>
    1220:	01040200 	mrseq	r0, R12_usr
    1224:	67066606 	strvs	r6, [r6, -r6, lsl #12]
    1228:	f483304c 	vst1.8	{d3[2]}, [r3], ip
    122c:	84842f2f 	strhi	r2, [r4], #3887	; 0xf2f
    1230:	02002208 	andeq	r2, r0, #8, 4	; 0x80000000
    1234:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1238:	00846706 	addeq	r6, r4, r6, lsl #14
    123c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1240:	84670666 	strbthi	r0, [r7], #-1638	; 0x666
    1244:	01040200 	mrseq	r0, R12_usr
    1248:	67066606 	strvs	r6, [r6, -r6, lsl #12]
    124c:	a02f4c84 	eorge	r4, pc, r4, lsl #25
    1250:	00220884 	eoreq	r0, r2, r4, lsl #17
    1254:	06010402 	streq	r0, [r1], -r2, lsl #8
    1258:	84670666 	strbthi	r0, [r7], #-1638	; 0x666
    125c:	01040200 	mrseq	r0, R12_usr
    1260:	67066606 	strvs	r6, [r6, -r6, lsl #12]
    1264:	04020084 	streq	r0, [r2], #-132	; 0x84
    1268:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    126c:	2f4c8467 	svccs	0x004c8467
    1270:	2f2f4ba0 	svccs	0x002f4ba0
    1274:	2f2f4b4c 	svccs	0x002f4b4c
    1278:	01000402 	tsteq	r0, r2, lsl #8
    127c:	00011301 	andeq	r1, r1, r1, lsl #6
    1280:	a8000200 	stmdage	r0, {r9}
    1284:	02000000 	andeq	r0, r0, #0
    1288:	0d0efb01 	vstreq	d15, [lr, #-4]
    128c:	01010100 	mrseq	r0, (UNDEF: 17)
    1290:	00000001 	andeq	r0, r0, r1
    1294:	01000001 	tsteq	r0, r1
    1298:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 11e4 <_start-0x6e1c>
    129c:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xf65
    12a0:	6f776e75 	svcvs	0x00776e75
    12a4:	6f442f6f 	svcvs	0x00442f6f
    12a8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0x563
    12ac:	2f73746e 	svccs	0x0073746e
    12b0:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    12b4:	73756f68 	cmnvc	r5, #104, 30	; 0x1a0
    12b8:	34303465 	ldrtcc	r3, [r0], #-1125	; 0x465
    12bc:	726f542f 	rsbvc	r5, pc, #788529152	; 0x2f000000
    12c0:	462f7375 			; <UNDEFINED> instruction: 0x462f7375
    12c4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    12c8:	5f534f54 	svcpl	0x00534f54
    12cc:	6e72654b 	cdpvs	5, 7, cr6, cr2, cr11, {2}
    12d0:	442f6c65 	strtmi	r6, [pc], #-3173	; 12d8 <_start-0x6d28>
    12d4:	5f6f6d65 	svcpl	0x006f6d65
    12d8:	6e696c42 	cdpvs	12, 6, cr6, cr9, cr2, {2}
    12dc:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
    12e0:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
    12e4:	2f385f4f 	svccs	0x00385f4f
    12e8:	70736152 	rsbsvc	r6, r3, r2, asr r1
    12ec:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    12f0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    12f4:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    12f8:	534f5452 	movtpl	r5, #62546	; 0xf452
    12fc:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    1300:	312d646c 	teqcc	sp, ip, ror #8
    1304:	32353034 	eorscc	r3, r5, #52	; 0x34
    1308:	2f332d33 	svccs	0x00332d33
    130c:	6f6d6544 	svcvs	0x006d6544
    1310:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1314:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1318:	70670000 	rsbvc	r0, r7, r0
    131c:	632e6f69 	teqvs	lr, #420	; 0x1a4
    1320:	00000100 	andeq	r0, r0, r0, lsl #2
    1324:	6f697067 	svcvs	0x00697067
    1328:	0100682e 	tsteq	r0, lr, lsr #16
    132c:	00000000 	andeq	r0, r0, r0
    1330:	38340205 	ldmdacc	r4!, {r0, r2, r9}
    1334:	26030001 	strcs	r0, [r3], -r1
    1338:	84a0a001 	strthi	sl, [r0], #1
    133c:	3d083d08 	stccc	13, cr3, [r8, #-32]	; 0xffffffe0
    1340:	a0833d08 	addge	r3, r3, r8, lsl #26
    1344:	9f4c83bb 	svcls	0x004c83bb
    1348:	0267a067 	rsbeq	sl, r7, #103	; 0x67
    134c:	3e081426 	cdpcc	4, 0, cr1, cr8, cr6, {1}
    1350:	91088384 	smlabbls	r8, r4, r3, r8
    1354:	6883bba1 	stmvs	r3, {r0, r5, r7, r8, r9, fp, ip, sp, pc}
    1358:	24025a08 	strcs	r5, [r2], #-2568	; 0xa08
    135c:	3d083013 	stccc	0, cr3, [r8, #-76]	; 0xffffffb4
    1360:	13240230 	teqne	r4, #48, 4
    1364:	303d0830 	eorscc	r0, sp, r0, lsr r8
    1368:	30132402 	andscc	r2, r3, r2, lsl #8
    136c:	85323d08 	ldrhi	r3, [r2, #-3336]!	; 0xd08
    1370:	0868bbbb 	stmdaeq	r8!, {r0, r1, r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}^
    1374:	1324025a 	teqne	r4, #-1610612731	; 0xa0000005
    1378:	303d0830 	eorscc	r0, sp, r0, lsr r8
    137c:	30132402 	andscc	r2, r3, r2, lsl #8
    1380:	02303d08 	eorseq	r3, r0, #8, 26	; 0x200
    1384:	08301324 	ldmdaeq	r0!, {r2, r5, r8, r9, ip}
    1388:	8385323d 	orrhi	r3, r5, #-805306365	; 0xd0000003
    138c:	029f689f 	addseq	r6, pc, #10420224	; 0x9f0000
    1390:	01010008 	tsteq	r1, r8
    1394:	0000018d 	andeq	r0, r0, sp, lsl #3
    1398:	010d0002 	tsteq	sp, r2
    139c:	01020000 	mrseq	r0, (UNDEF: 2)
    13a0:	000d0efb 	strdeq	r0, [sp], -fp
    13a4:	01010101 	tsteq	r1, r1, lsl #2
    13a8:	01000000 	mrseq	r0, (UNDEF: 0)
    13ac:	2f010000 	svccs	0x00010000
    13b0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    13b4:	75656b2f 	strbvc	r6, [r5, #-2863]!	; 0xb2f
    13b8:	6f6f776e 	svcvs	0x006f776e
    13bc:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
    13c0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    13c4:	772f7374 			; <UNDEFINED> instruction: 0x772f7374
    13c8:	68657261 	stmdavs	r5!, {r0, r5, r6, r9, ip, sp, lr}^
    13cc:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0x56f
    13d0:	2f343034 	svccs	0x00343034
    13d4:	75726f54 	ldrbvc	r6, [r2, #-3924]!	; 0xf54
    13d8:	72462f73 	subvc	r2, r6, #460	; 0x1cc
    13dc:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
    13e0:	4b5f534f 	blmi	17d6124 <__bss_end+0x17c062c>
    13e4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0x265
    13e8:	65442f6c 	strbvs	r2, [r4, #-3948]	; 0xf6c
    13ec:	425f6f6d 	subsmi	r6, pc, #436	; 0x1b4
    13f0:	6b6e696c 	blvs	1b9b9a8 <__bss_end+0x1b85eb0>
    13f4:	5f676e69 	svcpl	0x00676e69
    13f8:	4f495047 	svcmi	0x00495047
    13fc:	522f385f 	eorpl	r3, pc, #6225920	; 0x5f0000
    1400:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1404:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1408:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    140c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1410:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1414:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1418:	34312d64 	ldrtcc	r2, [r1], #-3428	; 0xd64
    141c:	33323530 	teqcc	r2, #48, 10	; 0xc000000
    1420:	2f2f332d 	svccs	0x002f332d
    1424:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    1428:	534f5452 	movtpl	r5, #62546	; 0xf452
    142c:	756f532f 	strbvc	r5, [pc, #-815]!	; 1105 <_start-0x6efb>
    1430:	2f656372 	svccs	0x00656372
    1434:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    1438:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    143c:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	; 0xffffff44
    1440:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
    1444:	73752f00 	cmnvc	r5, #0, 30
    1448:	6f6c2f72 	svcvs	0x006c2f72
    144c:	2f6c6163 	svccs	0x006c6163
    1450:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    1454:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1458:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    145c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1460:	5f342d69 	svcpl	0x00342d69
    1464:	30322d38 	eorscc	r2, r2, r8, lsr sp
    1468:	33713431 	cmncc	r1, #822083584	; 0x31000000
    146c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1470:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1474:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1478:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    147c:	61652d65 	cmnvs	r5, r5, ror #26
    1480:	342f6962 	strtcc	r6, [pc], #-2402	; 1488 <_start-0x6b78>
    1484:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
    1488:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    148c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1490:	65680000 	strbvs	r0, [r8, #-0]!
    1494:	345f7061 	ldrbcc	r7, [pc], #-97	; 149c <_start-0x6b64>
    1498:	0100632e 	tsteq	r0, lr, lsr #6
    149c:	74730000 	ldrbtvc	r0, [r3], #-0
    14a0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    14a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    14a8:	00000000 	andeq	r0, r0, r0
    14ac:	3e600205 	cdpcc	2, 6, cr0, cr0, cr5, {0}
    14b0:	92030001 	andls	r0, r3, #1
    14b4:	4c840101 	stfmis	f0, [r4], {1}
    14b8:	68338432 	ldmdavs	r3!, {r1, r4, r5, sl, pc}
    14bc:	00868586 	addeq	r8, r6, r6, lsl #11
    14c0:	06010402 	streq	r0, [r1], -r2, lsl #8
    14c4:	4b860666 	blmi	fe182e64 <_estack+0xf6172e64>
    14c8:	004b3067 	subeq	r3, fp, r7, rrx
    14cc:	63010402 	movwvs	r0, #5122	; 0x1402
    14d0:	02040200 	andeq	r0, r4, #0, 4
    14d4:	8a069e06 	bhi	1a8cf4 <__bss_end+0x1931fc>
    14d8:	f785a2a2 			; <UNDEFINED> instruction: 0xf785a2a2
    14dc:	4d69bb86 	vstmdbmi	r9!, {d27-d29}
    14e0:	2e0c03da 	mcrcs	3, 0, r0, cr12, cr10, {6}
    14e4:	83da2fbc 	bicshi	r2, sl, #188, 30	; 0x2f0
    14e8:	4ca16a4d 	vstmiami	r1!, {s12-s88}
    14ec:	304cd731 	subcc	sp, ip, r1, lsr r7
    14f0:	a24b4b6a 	subge	r4, fp, #108544	; 0x1a800
    14f4:	09036a4c 	stmdbeq	r3, {r2, r3, r6, r9, fp, sp, lr}
    14f8:	836a6766 	cmnhi	sl, #26738688	; 0x1980000
    14fc:	8683689f 	pkhbthi	r6, r3, pc, lsl #17	; <UNPREDICTABLE>
    1500:	bb859f4b 	bllt	fe169234 <_estack+0xf6159234>
    1504:	020088da 	andeq	r8, r0, #14286848	; 0xda0000
    1508:	66060204 	strvs	r0, [r6], -r4, lsl #4
    150c:	01040200 	mrseq	r0, R12_usr
    1510:	4ba50666 	blmi	fe942eb0 <_estack+0xf6932eb0>
    1514:	4b4fd7d8 	blmi	13f747c <__bss_end+0x13e1984>
    1518:	bef3bdf4 	mrclt	13, 7, fp, cr3, cr4, {7}
    151c:	688489a3 	stmvs	r4, {r0, r1, r5, r7, r8, fp, pc}
    1520:	01000a02 	tsteq	r0, r2, lsl #20
    1524:	0000e901 	andeq	lr, r0, r1, lsl #18
    1528:	96000200 	strls	r0, [r0], -r0, lsl #4
    152c:	02000000 	andeq	r0, r0, #0
    1530:	0d0efb01 	vstreq	d15, [lr, #-4]
    1534:	01010100 	mrseq	r0, (UNDEF: 17)
    1538:	00000001 	andeq	r0, r0, r1
    153c:	01000001 	tsteq	r0, r1
    1540:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 148c <_start-0x6b74>
    1544:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xf65
    1548:	6f776e75 	svcvs	0x00776e75
    154c:	6f442f6f 	svcvs	0x00442f6f
    1550:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0x563
    1554:	2f73746e 	svccs	0x0073746e
    1558:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    155c:	73756f68 	cmnvc	r5, #104, 30	; 0x1a0
    1560:	34303465 	ldrtcc	r3, [r0], #-1125	; 0x465
    1564:	726f542f 	rsbvc	r5, pc, #788529152	; 0x2f000000
    1568:	462f7375 			; <UNDEFINED> instruction: 0x462f7375
    156c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1570:	5f534f54 	svcpl	0x00534f54
    1574:	6e72654b 	cdpvs	5, 7, cr6, cr2, cr11, {2}
    1578:	442f6c65 	strtmi	r6, [pc], #-3173	; 1580 <_start-0x6a80>
    157c:	5f6f6d65 	svcpl	0x006f6d65
    1580:	6e696c42 	cdpvs	12, 6, cr6, cr9, cr2, {2}
    1584:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
    1588:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
    158c:	2f385f4f 	svccs	0x00385f4f
    1590:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1594:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1598:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    159c:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    15a0:	534f5452 	movtpl	r5, #62546	; 0xf452
    15a4:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    15a8:	312d646c 	teqcc	sp, ip, ror #8
    15ac:	32353034 	eorscc	r3, r5, #52	; 0x34
    15b0:	2f332d33 	svccs	0x00332d33
    15b4:	6f6d6544 	svcvs	0x006d6544
    15b8:	616d0000 	cmnvs	sp, r0
    15bc:	632e6e69 	teqvs	lr, #1680	; 0x690
    15c0:	00000100 	andeq	r0, r0, r0, lsl #2
    15c4:	02050000 	andeq	r0, r5, #0
    15c8:	00014310 	andeq	r4, r1, r0, lsl r3
    15cc:	02008418 	andeq	r8, r0, #24, 8	; 0x18000000
    15d0:	004c0104 	subeq	r0, ip, r4, lsl #2
    15d4:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    15d8:	01040200 	mrseq	r0, R12_usr
    15dc:	04020067 	streq	r0, [r2], #-103	; 0x67
    15e0:	84314b01 	ldrthi	r4, [r1], #-2817	; 0xb01
    15e4:	01040200 	mrseq	r0, R12_usr
    15e8:	0402004c 	streq	r0, [r2], #-76	; 0x4c
    15ec:	02006701 	andeq	r6, r0, #262144	; 0x40000
    15f0:	004b0104 	subeq	r0, fp, r4, lsl #2
    15f4:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    15f8:	01040200 	mrseq	r0, R12_usr
    15fc:	2e0a034b 	cdpcs	3, 0, cr0, cr10, cr11, {2}
    1600:	68302f68 	ldmdavs	r0!, {r3, r5, r6, r8, r9, sl, fp, sp}
    1604:	92089108 	andls	r9, r8, #8, 2
    1608:	01040200 	mrseq	r0, R12_usr
    160c:	000a0236 	andeq	r0, sl, r6, lsr r2
    1610:	Address 0x00001610 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
      10:	6b636954 	blvs	18da568 <__bss_end+0x18c4a70>
      14:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
      18:	76727000 	ldrbtvc	r7, [r2], -r0
      1c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
      20:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
      24:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
      28:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
      2c:	00747075 	rsbseq	r7, r4, r5, ror r0
      30:	72615070 	rsbvc	r5, r1, #112	; 0x70
      34:	70006d61 	andvc	r6, r0, r1, ror #26
      38:	69724f78 	ldmdbvs	r2!, {r3, r4, r5, r6, r8, r9, sl, fp, lr}^
      3c:	616e6967 	cmnvs	lr, r7, ror #18
      40:	534f546c 	movtpl	r5, #62572	; 0xf46c
      44:	6f682f00 	svcvs	0x00682f00
      48:	6b2f656d 	blvs	bd9604 <__bss_end+0xbc3b0c>
      4c:	776e7565 	strbvc	r7, [lr, -r5, ror #10]!
      50:	442f6f6f 	strtmi	r6, [pc], #-3951	; 58 <_start-0x7fa8>
      54:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
      58:	73746e65 	cmnvc	r4, #1616	; 0x650
      5c:	7261772f 	rsbvc	r7, r1, #12320768	; 0xbc0000
      60:	756f6865 	strbvc	r6, [pc, #-2149]!	; fffff803 <_estack+0xf7fef803>
      64:	30346573 	eorscc	r6, r4, r3, ror r5
      68:	6f542f34 	svcvs	0x00542f34
      6c:	2f737572 	svccs	0x00737572
      70:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
      74:	534f5452 	movtpl	r5, #62546	; 0xf452
      78:	72654b5f 	rsbvc	r4, r5, #97280	; 0x17c00
      7c:	2f6c656e 	svccs	0x006c656e
      80:	6f6d6544 	svcvs	0x006d6544
      84:	696c425f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, lr}^
      88:	6e696b6e 	vnmulvs.f64	d22, d9, d30
      8c:	50475f67 	subpl	r5, r7, r7, ror #30
      90:	385f4f49 	ldmdacc	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
      94:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
      98:	72656270 	rsbvc	r6, r5, #112, 4
      9c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
      a0:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0x62d
      a4:	4f545265 	svcmi	0x00545265
      a8:	75622d53 	strbvc	r2, [r2, #-3411]!	; 0xd53
      ac:	2d646c69 	stclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
      b0:	35303431 	ldrcc	r3, [r0, #-1073]!	; 0x431
      b4:	332d3332 	teqcc	sp, #-939524096	; 0xc8000000
      b8:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
      bc:	4f545265 	svcmi	0x00545265
      c0:	6f532f53 	svcvs	0x00532f53
      c4:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
      c8:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
      cc:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
      d0:	43472f65 	movtmi	r2, #32613	; 0x7f65
      d4:	61522f43 	cmpvs	r2, r3, asr #30
      d8:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
      dc:	50797272 	rsbspl	r7, r9, r2, ror r2
      e0:	6f702f69 	svcvs	0x00702f69
      e4:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
      e8:	6f687300 	svcvs	0x00687300
      ec:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
      f0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      f4:	2064656e 	rsbcs	r6, r4, lr, ror #10
      f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
      fc:	41546470 	cmpmi	r4, r0, ror r4
     100:	435f4b53 	cmpmi	pc, #84992	; 0x14c00
     104:	0045444f 	subeq	r4, r5, pc, asr #8
     108:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     10c:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
     110:	65686353 	strbvs	r6, [r8, #-851]!	; 0x353
     114:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0x564
     118:	54760072 	ldrbtpl	r0, [r6], #-114	; 0x72
     11c:	496b6369 	stmdbmi	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
     120:	73005253 	movwvc	r5, #595	; 0x253
     124:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xa69
     128:	00657079 	rsbeq	r7, r5, r9, ror r0
     12c:	61507670 	cmpvs	r0, r0, ror r6
     130:	656d6172 	strbvs	r6, [sp, #-370]!	; 0x172
     134:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
     138:	65527000 	ldrbvs	r7, [r2, #-0]
     13c:	70007367 	andvc	r7, r0, r7, ror #6
     140:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
     144:	7453664f 	ldrbvc	r6, [r3], #-1615	; 0x64f
     148:	006b6361 	rsbeq	r6, fp, r1, ror #6
     14c:	4d43425f 	sfmmi	f4, 2, [r3, #-380]	; 0xfffffe84
     150:	35333832 	ldrcc	r3, [r3, #-2098]!	; 0x832
     154:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     158:	525f5245 	subspl	r5, pc, #1342177284	; 0x50000004
     15c:	00534745 	subseq	r4, r3, r5, asr #14
     160:	726f5078 	rsbvc	r5, pc, #120	; 0x78
     164:	61745374 	cmnvs	r4, r4, ror r3
     168:	63537472 	cmpvs	r3, #1912602624	; 0x72000000
     16c:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
     170:	0072656c 	rsbseq	r6, r2, ip, ror #10
     174:	20554e47 	subscs	r4, r5, r7, asr #28
     178:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     17c:	20342e38 	eorscs	r2, r4, r8, lsr lr
     180:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     184:	35323730 	ldrcc	r3, [r2, #-1840]!	; 0x730
     188:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0x820
     18c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     190:	5b202965 	blpl	80a72c <__bss_end+0x7f4c34>
     194:	2f4d5241 	svccs	0x004d5241
     198:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     19c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     1a0:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     1a4:	6172622d 	cmnvs	r2, sp, lsr #4
     1a8:	2068636e 	rsbcs	r6, r8, lr, ror #6
     1ac:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     1b0:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     1b4:	33313220 	teqcc	r1, #32, 4
     1b8:	5d373431 	cfldrspl	mvf3, [r7, #-196]!	; 0xffffff3c
     1bc:	616d2d20 	cmnvs	sp, r0, lsr #26
     1c0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     1c4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     1c8:	2d207a36 	vstmdbcs	r0!, {s14-s67}
     1cc:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     1d0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     1d4:	7a36766d 	bvc	d9db90 <__bss_end+0xd88098>
     1d8:	616d2d20 	cmnvs	sp, r0, lsr #26
     1dc:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     1e0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     1e4:	2d207a36 	vstmdbcs	r0!, {s14-s67}
     1e8:	672d2067 	strvs	r2, [sp, -r7, rrx]!
     1ec:	00672d20 	rsbeq	r2, r7, r0, lsr #26
     1f0:	6f507870 	svcvs	0x00507870
     1f4:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
     1f8:	61697469 	cmnvs	r9, r9, ror #8
     1fc:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
     200:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     204:	6c75006b 	ldclvs	0, cr0, [r5], #-428	; 0xfffffe54
     208:	706d6f43 	rsbvc	r6, sp, r3, asr #30
     20c:	4d657261 	sfmmi	f7, 2, [r5, #-388]!	; 0xfffffe7c
     210:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
     214:	6f507600 	svcvs	0x00507600
     218:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
     21c:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
     220:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     224:	006c6163 	rsbeq	r6, ip, r3, ror #2
     228:	72436c75 	subvc	r6, r3, #29952	; 0x7500
     22c:	63697469 	cmnvs	r9, #1761607680	; 0x69000000
     230:	654e6c61 	strbvs	r6, [lr, #-3169]	; 0xc61
     234:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
     238:	5f670067 	svcpl	0x00670067
     23c:	61745362 	cmnvs	r4, r2, ror #6
     240:	64657472 	strbtvs	r7, [r5], #-1138	; 0x472
     244:	6f507600 	svcvs	0x00507600
     248:	69597472 	ldmdbvs	r9, {r1, r4, r5, r6, sl, ip, sp, lr}^
     24c:	50646c65 	rsbpl	r6, r4, r5, ror #24
     250:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
     254:	726f7373 	rsbvc	r7, pc, #-872415231	; 0xcc000001
     258:	6f682f00 	svcvs	0x00682f00
     25c:	6b2f656d 	blvs	bd9818 <__bss_end+0xbc3d20>
     260:	776e7565 	strbvc	r7, [lr, -r5, ror #10]!
     264:	442f6f6f 	strtmi	r6, [pc], #-3951	; 26c <_start-0x7d94>
     268:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
     26c:	73746e65 	cmnvc	r4, #1616	; 0x650
     270:	7261772f 	rsbvc	r7, r1, #12320768	; 0xbc0000
     274:	756f6865 	strbvc	r6, [pc, #-2149]!	; fffffa17 <_estack+0xf7fefa17>
     278:	30346573 	eorscc	r6, r4, r3, ror r5
     27c:	6f542f34 	svcvs	0x00542f34
     280:	2f737572 	svccs	0x00737572
     284:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     288:	534f5452 	movtpl	r5, #62546	; 0xf452
     28c:	72654b5f 	rsbvc	r4, r5, #97280	; 0x17c00
     290:	2f6c656e 	svccs	0x006c656e
     294:	6f6d6544 	svcvs	0x006d6544
     298:	696c425f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, lr}^
     29c:	6e696b6e 	vnmulvs.f64	d22, d9, d30
     2a0:	50475f67 	subpl	r5, r7, r7, ror #30
     2a4:	385f4f49 	ldmdacc	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     2a8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     2ac:	72656270 	rsbvc	r6, r5, #112, 4
     2b0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     2b4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0x62d
     2b8:	4f545265 	svcmi	0x00545265
     2bc:	75622d53 	strbvc	r2, [r2, #-3411]!	; 0xd53
     2c0:	2d646c69 	stclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     2c4:	35303431 	ldrcc	r3, [r0, #-1073]!	; 0x431
     2c8:	332d3332 	teqcc	sp, #-939524096	; 0xc8000000
     2cc:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     2d0:	4f545265 	svcmi	0x00545265
     2d4:	6f532f53 	svcvs	0x00532f53
     2d8:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     2dc:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     2e0:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     2e4:	43472f65 	movtmi	r2, #32613	; 0x7f65
     2e8:	61522f43 	cmpvs	r2, r3, asr #30
     2ec:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
     2f0:	50797272 	rsbspl	r7, r9, r2, ror r2
     2f4:	6f702f69 	svcvs	0x00702f69
     2f8:	73697472 	cmnvc	r9, #1912602624	; 0x72000000
     2fc:	00632e72 	rsbeq	r2, r3, r2, ror lr
     300:	75437870 	strbvc	r7, [r3, #-2160]	; 0x870
     304:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     308:	42435474 	submi	r5, r3, #116, 8	; 0x74000000
     30c:	6f507600 	svcvs	0x00507600
     310:	78457472 	stmdavc	r5, {r1, r4, r5, r6, sl, ip, sp, lr}^
     314:	72437469 	subvc	r7, r3, #1761607680	; 0x69000000
     318:	63697469 	cmnvs	r9, #1761607680	; 0x69000000
     31c:	76006c61 	strvc	r6, [r0], -r1, ror #24
     320:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
     324:	53525349 	cmppl	r2, #603979777	; 0x24000001
     328:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     32c:	73726946 	cmnvc	r2, #1146880	; 0x118000
     330:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
     334:	4676006b 	ldrbtmi	r0, [r6], -fp, rrx
     338:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     33c:	5f534f54 	svcpl	0x00534f54
     340:	00525349 	subseq	r5, r2, r9, asr #6
     344:	6e557870 	mrcvs	8, 2, r7, cr5, cr0, {3}
     348:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     34c:	4364656b 	cmnmi	r4, #448790528	; 0x1ac00000
     350:	00424352 	subeq	r4, r2, r2, asr r3
     354:	65547870 	ldrbvs	r7, [r4, #-2160]	; 0x870
     358:	7600706d 	strvc	r7, [r0], -sp, rrx
     35c:	6f526f43 	svcvs	0x00526f43
     360:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     364:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
     368:	65446f54 	strbvs	r6, [r4, #-3924]	; 0xf54
     36c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0x16c
     370:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
     374:	76700074 			; <UNDEFINED> instruction: 0x76700074
     378:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     37c:	656e6961 	strbvs	r6, [lr, #-2401]!	; 0x961
     380:	78700072 	ldmdavc	r0!, {r1, r4, r5, r6}^
     384:	6f526f43 	svcvs	0x00526f43
     388:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     38c:	6e754665 	cdpvs	6, 7, cr4, cr5, cr5, {3}
     390:	6f697463 	svcvs	0x00697463
     394:	5078006e 	rsbspl	r0, r8, lr, rrx
     398:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0x361
     39c:	63695464 	cmnvs	r9, #100, 8	; 0x64000000
     3a0:	7000736b 	andvc	r7, r0, fp, ror #6
     3a4:	646e4978 	strbtvs	r4, [lr], #-2424	; 0x978
     3a8:	78007865 	stmdavc	r0, {r0, r2, r5, r6, fp, ip, sp, lr}
     3ac:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     3b0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
     3b4:	4c780065 	ldclmi	0, cr0, [r8], #-404	; 0xfffffe6c
     3b8:	45747369 	ldrbmi	r7, [r4, #-873]!	; 0x369
     3bc:	7000646e 	andvc	r6, r0, lr, ror #8
     3c0:	6e774f76 	mrcvs	15, 3, r4, cr7, cr6, {3}
     3c4:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     3c8:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
     3cc:	6b636954 	blvs	18da924 <__bss_end+0x18c4e2c>
     3d0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     3d4:	43780074 	cmnmi	r8, #116	; 0x74
     3d8:	756f526f 	strbvc	r5, [pc, #-623]!	; 171 <_start-0x7e8f>
     3dc:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     3e0:	6b636954 	blvs	18da938 <__bss_end+0x18c4e40>
     3e4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     3e8:	4c780074 	ldclmi	0, cr0, [r8], #-464	; 0xfffffe30
     3ec:	5f545349 	svcpl	0x00545349
     3f0:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	; 0xfffffedc
     3f4:	43787000 	cmnmi	r8, #0
     3f8:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xe6f
     3fc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     400:	65477800 	strbvs	r7, [r7, #-2048]	; 0x800
     404:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     408:	73694c63 	cmnvc	r9, #25344	; 0x6300
     40c:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
     410:	7875006d 	ldmdavc	r5!, {r0, r2, r3, r5, r6}^
     414:	43706f54 	cmnmi	r0, #84, 30	; 0x150
     418:	756f526f 	strbvc	r5, [pc, #-623]!	; 1b1 <_start-0x7e4f>
     41c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     420:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     424:	69725079 	ldmdbvs	r2!, {r0, r3, r4, r5, r6, ip, lr}^
     428:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     42c:	44780079 	ldrbtmi	r0, [r8], #-121	; 0x79
     430:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     434:	6f436465 	svcvs	0x00436465
     438:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     43c:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     440:	31747369 	cmncc	r4, r9, ror #6
     444:	65447800 	strbvs	r7, [r4, #-2048]	; 0x800
     448:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0x16c
     44c:	526f4364 	rsbpl	r4, pc, #100, 6	; 0x90000001
     450:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     454:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     458:	00327473 	eorseq	r7, r2, r3, ror r4
     45c:	43726f63 	cmnmi	r2, #396	; 0x18c
     460:	00424352 	subeq	r4, r2, r2, asr r3
     464:	52437870 	subpl	r7, r3, #112, 16	; 0x700000
     468:	70004243 	andvc	r4, r0, r3, asr #4
     46c:	65725078 	ldrbvs	r5, [r2, #-120]!	; 0x78
     470:	756f6976 	strbvc	r6, [pc, #-2422]!	; fffffb02 <_estack+0xf7fefb02>
     474:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     478:	6f526f43 	svcvs	0x00526f43
     47c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     480:	646f4365 	strbtvs	r4, [pc], #-869	; 488 <_start-0x7b78>
     484:	6f630065 	svcvs	0x00630065
     488:	526f4372 	rsbpl	r4, pc, #-939524095	; 0xc8000001
     48c:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     490:	6f43656e 	svcvs	0x0043656e
     494:	6f72746e 	svcvs	0x0072746e
     498:	6f6c426c 	svcvs	0x006c426c
     49c:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     4a0:	6f526f43 	svcvs	0x00526f43
     4a4:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     4a8:	6d655265 	sfmvs	f5, 2, [r5, #-404]!	; 0xfffffe6c
     4ac:	4665766f 	strbtmi	r7, [r5], -pc, ror #12
     4b0:	456d6f72 	strbmi	r6, [sp, #-3954]!	; 0xf72
     4b4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     4b8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     4bc:	4f787000 	svcmi	0x00787000
     4c0:	66726576 			; <UNDEFINED> instruction: 0x66726576
     4c4:	44776f6c 	ldrbtmi	r6, [r7], #-3948	; 0xf6c
     4c8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     4cc:	6f436465 	svcvs	0x00436465
     4d0:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     4d4:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     4d8:	00747369 	rsbseq	r7, r4, r9, ror #6
     4dc:	6e497875 	mcrvs	8, 2, r7, cr9, cr5, {3}
     4e0:	00786564 	rsbseq	r6, r8, r4, ror #10
     4e4:	6e694d78 	mcrvs	13, 3, r4, cr9, cr8, {3}
     4e8:	73694c69 	cmnvc	r9, #26880	; 0x6900
     4ec:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
     4f0:	4378006d 	cmnmi	r8, #109	; 0x6d
     4f4:	756f526f 	strbvc	r5, [pc, #-623]!	; 28d <_start-0x7d73>
     4f8:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     4fc:	61657243 	cmnvs	r5, r3, asr #4
     500:	75006574 	strvc	r6, [r0, #-1396]	; 0x574
     504:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
     508:	4f726562 	svcmi	0x00726562
     50c:	65744966 	ldrbvs	r4, [r4, #-2406]!	; 0x966
     510:	7000736d 	andvc	r7, r0, sp, ror #6
     514:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     518:	506b6365 	rsbpl	r6, fp, r5, ror #6
     51c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     520:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0x76e
     524:	4c796461 	cfldrdmi	mvd6, [r9], #-388	; 0xfffffe7c
     528:	00747369 	rsbseq	r7, r4, r9, ror #6
     52c:	72507875 	subsvc	r7, r0, #7667712	; 0x750000
     530:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     534:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     538:	6f526f43 	svcvs	0x00526f43
     53c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     540:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
     544:	00656c64 	rsbeq	r6, r5, r4, ror #24
     548:	6e655078 	mcrvs	0, 3, r5, cr5, cr8, {3}
     54c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     550:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     554:	526f4379 	rsbpl	r4, pc, #-469762047	; 0xe4000001
     558:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     55c:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     560:	70007473 	andvc	r7, r0, r3, ror r4
     564:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     568:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     56c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     570:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     574:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     578:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     57c:	43746e65 	cmnmi	r4, #1616	; 0x650
     580:	756f526f 	strbvc	r5, [pc, #-623]!	; 319 <_start-0x7ce7>
     584:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     588:	6f682f00 	svcvs	0x00682f00
     58c:	6b2f656d 	blvs	bd9b48 <__bss_end+0xbc4050>
     590:	776e7565 	strbvc	r7, [lr, -r5, ror #10]!
     594:	442f6f6f 	strtmi	r6, [pc], #-3951	; 59c <_start-0x7a64>
     598:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
     59c:	73746e65 	cmnvc	r4, #1616	; 0x650
     5a0:	7261772f 	rsbvc	r7, r1, #12320768	; 0xbc0000
     5a4:	756f6865 	strbvc	r6, [pc, #-2149]!	; fffffd47 <_estack+0xf7fefd47>
     5a8:	30346573 	eorscc	r6, r4, r3, ror r5
     5ac:	6f542f34 	svcvs	0x00542f34
     5b0:	2f737572 	svccs	0x00737572
     5b4:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     5b8:	534f5452 	movtpl	r5, #62546	; 0xf452
     5bc:	72654b5f 	rsbvc	r4, r5, #97280	; 0x17c00
     5c0:	2f6c656e 	svccs	0x006c656e
     5c4:	6f6d6544 	svcvs	0x006d6544
     5c8:	696c425f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, lr}^
     5cc:	6e696b6e 	vnmulvs.f64	d22, d9, d30
     5d0:	50475f67 	subpl	r5, r7, r7, ror #30
     5d4:	385f4f49 	ldmdacc	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     5d8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     5dc:	72656270 	rsbvc	r6, r5, #112, 4
     5e0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     5e4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0x62d
     5e8:	4f545265 	svcmi	0x00545265
     5ec:	75622d53 	strbvc	r2, [r2, #-3411]!	; 0xd53
     5f0:	2d646c69 	stclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     5f4:	35303431 	ldrcc	r3, [r0, #-1073]!	; 0x431
     5f8:	332d3332 	teqcc	sp, #-939524096	; 0xc8000000
     5fc:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     600:	4f545265 	svcmi	0x00545265
     604:	6f532f53 	svcvs	0x00532f53
     608:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     60c:	6f72632f 	svcvs	0x0072632f
     610:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     614:	00632e65 	rsbeq	r2, r3, r5, ror #28
     618:	73694c78 	cmnvc	r9, #120, 24	; 0x7800
     61c:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
     620:	4376006d 	cmnmi	r6, #109	; 0x6d
     624:	756f526f 	strbvc	r5, [pc, #-623]!	; 3bd <_start-0x7c43>
     628:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     62c:	65686353 	strbvs	r6, [r8, #-851]!	; 0x353
     630:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0x564
     634:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     638:	6f54656d 	svcvs	0x0054656d
     63c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
     640:	43787000 	cmnmi	r8, #0
     644:	756f526f 	strbvc	r5, [pc, #-623]!	; 3dd <_start-0x7c23>
     648:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     64c:	53787500 	cmnpl	r8, #0, 10
     650:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     654:	44787000 	ldrbtmi	r7, [r8], #-0
     658:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     65c:	6f436465 	svcvs	0x00436465
     660:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     664:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     668:	00747369 	rsbseq	r7, r4, r9, ror #6
     66c:	65527870 	ldrbvs	r7, [r2, #-2160]	; 0x870
     670:	43796461 	cmnmi	r9, #1627389952	; 0x61000000
     674:	756f526f 	strbvc	r5, [pc, #-623]!	; 40d <_start-0x7bf3>
     678:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     67c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     680:	4d780073 	ldclmi	0, cr0, [r8, #-460]!	; 0xfffffe34
     684:	5f494e49 	svcpl	0x00494e49
     688:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0x94c
     68c:	4554495f 	ldrbmi	r4, [r4, #-2399]	; 0x95f
     690:	4c78004d 	ldclmi	0, cr0, [r8], #-308	; 0xfffffecc
     694:	00545349 	subseq	r5, r4, r9, asr #6
     698:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     69c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     6a0:	73696c61 	cmnvc	r9, #24832	; 0x6100
     6a4:	526f4365 	rsbpl	r4, pc, #-1811939327	; 0x94000001
     6a8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     6ac:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     6b0:	00737473 	rsbseq	r7, r3, r3, ror r4
     6b4:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
     6b8:	6f54736b 	svcvs	0x0054736b
     6bc:	616c6544 	cmnvs	ip, r4, asr #10
     6c0:	45780079 	ldrbmi	r0, [r8, #-121]!	; 0x79
     6c4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     6c8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     6cc:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     6d0:	76727000 	ldrbtvc	r7, [r2], -r0
     6d4:	63656843 	cmnvs	r5, #4390912	; 0x430000
     6d8:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
     6dc:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
     6e0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     6e4:	43726300 	cmnmi	r2, #0, 6
     6e8:	554f524f 	strbpl	r5, [pc, #-591]	; 4a1 <_start-0x7b5f>
     6ec:	454e4954 	strbmi	r4, [lr, #-2388]	; 0x954
     6f0:	444f435f 	strbmi	r4, [pc], #-863	; 6f8 <_start-0x7908>
     6f4:	6f6c0045 	svcvs	0x006c0045
     6f8:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     6fc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     700:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     704:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     708:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     70c:	736e7500 	cmnvc	lr, #0, 10
     710:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     714:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     718:	70007261 	andvc	r7, r0, r1, ror #4
     71c:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0x978
     720:	526f546d 	rsbpl	r5, pc, #1828716544	; 0x6d000000
     724:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     728:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     72c:	2f656d6f 	svccs	0x00656d6f
     730:	6e75656b 	cdpvs	5, 7, cr6, cr5, cr11, {3}
     734:	2f6f6f77 	svccs	0x006f6f77
     738:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xf44
     73c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
     740:	61772f73 	cmnvs	r7, r3, ror pc
     744:	6f686572 	svcvs	0x00686572
     748:	34657375 	strbtcc	r7, [r5], #-885	; 0x375
     74c:	542f3430 	strtpl	r3, [pc], #-1072	; 754 <_start-0x78ac>
     750:	7375726f 	cmnvc	r5, #-268435450	; 0xf0000006
     754:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
     758:	4f545265 	svcmi	0x00545265
     75c:	654b5f53 	strbvs	r5, [fp, #-3923]	; 0xf53
     760:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     764:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
     768:	6c425f6f 	mcrrvs	15, 6, r5, r2, cr15
     76c:	696b6e69 	stmdbvs	fp!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     770:	475f676e 	ldrbmi	r6, [pc, -lr, ror #14]
     774:	5f4f4950 	svcpl	0x004f4950
     778:	61522f38 	cmpvs	r2, r8, lsr pc
     77c:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
     780:	50797272 	rsbspl	r7, r9, r2, ror r2
     784:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     788:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     78c:	622d534f 	eorvs	r5, sp, #1006632961	; 0x3c000001
     790:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
     794:	3034312d 	eorscc	r3, r4, sp, lsr #2
     798:	2d333235 	lfmcs	f3, 4, [r3, #-212]!	; 0xffffff2c
     79c:	72462f33 	subvc	r2, r6, #51, 30	; 0xcc
     7a0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     7a4:	532f534f 	teqpl	pc, #1006632961	; 0x3c000001
     7a8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     7ac:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     7b0:	632e7473 	teqvs	lr, #1929379840	; 0x73000000
     7b4:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     7b8:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     7bc:	61697469 	cmnvs	r9, r9, ror #8
     7c0:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
     7c4:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     7c8:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     7cc:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     7d0:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0x573
     7d4:	00646e45 	rsbeq	r6, r4, r5, asr #28
     7d8:	73694c76 	cmnvc	r9, #30208	; 0x7600
     7dc:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     7e0:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
     7e4:	00657369 	rsbeq	r7, r5, r9, ror #6
     7e8:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
     7ec:	664f6575 			; <UNDEFINED> instruction: 0x664f6575
     7f0:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xe49
     7f4:	6f697472 	svcvs	0x00697472
     7f8:	7870006e 	ldmdavc	r0!, {r1, r2, r3, r5, r6}^
     7fc:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     800:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     804:	6f6c2067 	svcvs	0x006c2067
     808:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     80c:	7600746e 	strvc	r7, [r0], -lr, ror #8
     810:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     814:	6f6d6552 	svcvs	0x006d6552
     818:	70006576 	andvc	r6, r0, r6, ror r5
     81c:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0x978
     820:	6f746172 	svcvs	0x00746172
     824:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
     828:	2074726f 	rsbscs	r7, r4, pc, ror #4
     82c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     830:	694c7870 	stmdbvs	ip, {r4, r5, r6, fp, ip, sp, lr}^
     834:	70007473 	andvc	r7, r0, r3, ror r4
     838:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
     83c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     840:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     844:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     848:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     84c:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0x573
     850:	51637500 	cmnpl	r3, r0, lsl #10
     854:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     858:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     85c:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
     860:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
     864:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     868:	65536369 	ldrbvs	r6, [r3, #-873]	; 0x369
     86c:	7246646e 	subvc	r6, r6, #1845493760	; 0x6e000000
     870:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     874:	78750052 	ldmdavc	r5!, {r1, r4, r6}^
     878:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     87c:	73654d65 	cmnvc	r5, #6464	; 0x1940
     880:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
     884:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     888:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     88c:	7a697300 	bvc	1a5d494 <__bss_end+0x1a4799c>
     890:	00745f65 	rsbseq	r5, r4, r5, ror #30
     894:	69487870 	stmdbvs	r8, {r4, r5, r6, fp, ip, sp, lr}^
     898:	72656867 	rsbvc	r6, r5, #6750208	; 0x670000
     89c:	6f697250 	svcvs	0x00697250
     8a0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     8a4:	6b736154 	blvs	1cd8dfc <__bss_end+0x1cc3304>
     8a8:	656b6f57 	strbvs	r6, [fp, #-3927]!	; 0xf57
     8ac:	5178006e 	cmnpl	r8, lr, rrx
     8b0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     8b4:	75517349 	ldrbvc	r7, [r1, #-841]	; 0x349
     8b8:	45657565 	strbmi	r7, [r5, #-1381]!	; 0x565
     8bc:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     8c0:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 7b0 <_start-0x7850>
     8c4:	00525349 	subseq	r5, r2, r9, asr #6
     8c8:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     8cc:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0x173
     8d0:	6d456575 	cfstr64vs	mvdx6, [r5, #-468]	; 0xfffffe2c
     8d4:	00797470 	rsbseq	r7, r9, r0, ror r4
     8d8:	43767270 	cmnmi	r6, #112, 4
     8dc:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
     8e0:	46617461 	strbtmi	r7, [r1], -r1, ror #8
     8e4:	516d6f72 	smcpl	55026	; 0xd6f2
     8e8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     8ec:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     8f0:	75517765 	ldrbvc	r7, [r1, #-1893]	; 0x765
     8f4:	00657565 	rsbeq	r7, r5, r5, ror #10
     8f8:	43767270 	cmnmi	r6, #112, 4
     8fc:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
     900:	54617461 	strbtpl	r7, [r1], #-1121	; 0x461
     904:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0x16f
     908:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     90c:	454d4954 	strbmi	r4, [sp, #-2388]	; 0x954
     910:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
     914:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
     918:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
     91c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     920:	65526369 	ldrbvs	r6, [r2, #-873]	; 0x369
     924:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     928:	63700065 	cmnvs	r0, #101	; 0x65
     92c:	6769724f 	strbvs	r7, [r9, -pc, asr #4]!
     930:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     934:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     938:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     93c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     940:	52637000 	rsbpl	r7, r3, #0
     944:	46646165 	strbtmi	r6, [r4], -r5, ror #2
     948:	006d6f72 	rsbeq	r6, sp, r2, ror pc
     94c:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xf78
     950:	6f6c6672 	svcvs	0x006c6672
     954:	756f4377 	strbvc	r4, [pc, #-887]!	; 5e5 <_start-0x7a1b>
     958:	7600746e 	strvc	r7, [r0], -lr, ror #8
     95c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     960:	6c654465 	cfstrdvs	mvd4, [r5], #-404	; 0xfffffe6c
     964:	00657465 	rsbeq	r7, r5, r5, ror #8
     968:	72576370 	subsvc	r6, r7, #112, 6	; 0xc0000001
     96c:	54657469 	strbtpl	r7, [r5], #-1129	; 0x469
     970:	6370006f 	cmnvs	r0, #111	; 0x6f
     974:	64616548 	strbtvs	r6, [r1], #-1352	; 0x548
     978:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     97c:	6e4f656d 	cdpvs	5, 4, cr6, cr15, cr13, {3}
     980:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xe45
     984:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     988:	754a7800 	strbvc	r7, [sl, #-2048]	; 0x800
     98c:	65507473 	ldrbvs	r7, [r0, #-1139]	; 0x473
     990:	6e696b65 	vnmulvs.f64	d22, d9, d21
     994:	51780067 	cmnpl	r8, r7, rrx
     998:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     99c:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
     9a0:	53636972 	cmnpl	r3, #1867776	; 0x1c8000
     9a4:	00646e65 	rsbeq	r6, r4, r5, ror #28
     9a8:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
     9ac:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xf65
     9b0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     9b4:	52787500 	rsbspl	r7, r8, #0, 10
     9b8:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
     9bc:	5178006e 	cmnpl	r8, lr, rrx
     9c0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     9c4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     9c8:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     9cc:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     9d0:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
     9d4:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
     9d8:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 8c8 <_start-0x7738>
     9dc:	00525349 	subseq	r5, r2, r9, asr #6
     9e0:	654c7875 	strbvs	r7, [ip, #-2165]	; 0x875
     9e4:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     9e8:	51787500 	cmnpl	r8, r0, lsl #10
     9ec:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     9f0:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     9f4:	78006874 	stmdavc	r0, {r2, r4, r5, r6, fp, sp, lr}
     9f8:	6b736154 	blvs	1cd8f50 <__bss_end+0x1cc3458>
     9fc:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     a00:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     a04:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xf54
     a08:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     a0c:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     a10:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     a14:	73654d65 	cmnvc	r5, #6464	; 0x1940
     a18:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
     a1c:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     a20:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     a24:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 914 <_start-0x76ec>
     a28:	00525349 	subseq	r5, r2, r9, asr #6
     a2c:	74497670 	strbvc	r7, [r9], #-1648	; 0x670
     a30:	6f546d65 	svcvs	0x00546d65
     a34:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     a38:	51780065 	cmnpl	r8, r5, rrx
     a3c:	45554555 	ldrbmi	r4, [r5, #-1365]	; 0x555
     a40:	6e457800 	cdpvs	8, 4, cr7, cr5, cr0, {0}
     a44:	54797274 	ldrbtpl	r7, [r9], #-628	; 0x274
     a48:	53656d69 	cmnpl	r5, #6720	; 0x1a40
     a4c:	51007465 	tstpl	r0, r5, ror #8
     a50:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     a54:	69666544 	stmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     a58:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     a5c:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     a60:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     a64:	51734965 	cmnpl	r3, r5, ror #18
     a68:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     a6c:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
     a70:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 960 <_start-0x76a0>
     a74:	00525349 	subseq	r5, r2, r9, asr #6
     a78:	4c785478 	cfldrdmi	mvd5, [r8], #-480	; 0xfffffe20
     a7c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     a80:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
     a84:	65476575 	strbvs	r6, [r7, #-1397]	; 0x575
     a88:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     a8c:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0x363
     a90:	00657461 	rsbeq	r7, r5, r1, ror #8
     a94:	61537875 	cmpvs	r3, r5, ror r8
     a98:	49646576 	stmdbmi	r4!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     a9c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     aa0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     aa4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     aa8:	70007375 	andvc	r7, r0, r5, ror r3
     aac:	73497672 	movtvc	r7, #38514	; 0x9672
     ab0:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
     ab4:	6c754665 	ldclvs	6, cr4, [r5], #-404	; 0xfffffe6c
     ab8:	7875006c 	ldmdavc	r5!, {r2, r3, r5, r6}^
     abc:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     ac0:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     ac4:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
     ac8:	00676e69 	rsbeq	r6, r7, r9, ror #28
     acc:	75427670 	strbvc	r7, [r2, #-1648]	; 0x670
     ad0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     ad4:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
     ad8:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
     adc:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     ae0:	65526369 	ldrbvs	r6, [r2, #-873]	; 0x369
     ae4:	00746573 	rsbseq	r6, r4, r3, ror r5
     ae8:	706f4378 	rsbvc	r4, pc, r8, ror r3	; <UNPREDICTABLE>
     aec:	736f5079 	cmnvc	pc, #121	; 0x79
     af0:	6f697469 	svcvs	0x00697469
     af4:	7270006e 	rsbsvc	r0, r0, #110	; 0x6e
     af8:	6c6e5576 	cfstr64vs	mvdx5, [lr], #-472	; 0xfffffe28
     afc:	516b636f 	cmnpl	fp, pc, ror #6
     b00:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     b04:	78527800 	ldmdavc	r2, {fp, ip, sp, lr}^
     b08:	6b636f4c 	blvs	18dc840 <__bss_end+0x18c6d48>
     b0c:	54637000 	strbtpl	r7, [r3], #-0
     b10:	006c6961 	rsbeq	r6, ip, r1, ror #18
     b14:	736f5078 	cmnvc	pc, #120	; 0x78
     b18:	6f697469 	svcvs	0x00697469
     b1c:	5478006e 	ldrbtpl	r0, [r8], #-110	; 0x6e
     b20:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     b24:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
     b28:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xe69
     b2c:	6e65536f 	cdpvs	3, 6, cr5, cr5, cr15, {3}
     b30:	51780064 	cmnpl	r8, r4, rrx
     b34:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
     b38:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     b3c:	79426e49 	stmdbvc	r2, {r0, r3, r6, r9, sl, fp, sp, lr}^
     b40:	00736574 	rsbseq	r6, r3, r4, ror r5
     b44:	75517870 	ldrbvc	r7, [r1, #-2160]	; 0x870
     b48:	00657565 	rsbeq	r7, r5, r5, ror #10
     b4c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; a98 <_start-0x7568>
     b50:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xf65
     b54:	6f776e75 	svcvs	0x00776e75
     b58:	6f442f6f 	svcvs	0x00442f6f
     b5c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0x563
     b60:	2f73746e 	svccs	0x0073746e
     b64:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     b68:	73756f68 	cmnvc	r5, #104, 30	; 0x1a0
     b6c:	34303465 	ldrtcc	r3, [r0], #-1125	; 0x465
     b70:	726f542f 	rsbvc	r5, pc, #788529152	; 0x2f000000
     b74:	462f7375 			; <UNDEFINED> instruction: 0x462f7375
     b78:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     b7c:	5f534f54 	svcpl	0x00534f54
     b80:	6e72654b 	cdpvs	5, 7, cr6, cr2, cr11, {2}
     b84:	442f6c65 	strtmi	r6, [pc], #-3173	; b8c <_start-0x7474>
     b88:	5f6f6d65 	svcpl	0x006f6d65
     b8c:	6e696c42 	cdpvs	12, 6, cr6, cr9, cr2, {2}
     b90:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
     b94:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     b98:	2f385f4f 	svccs	0x00385f4f
     b9c:	70736152 	rsbsvc	r6, r3, r2, asr r1
     ba0:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     ba4:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     ba8:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     bac:	534f5452 	movtpl	r5, #62546	; 0xf452
     bb0:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
     bb4:	312d646c 	teqcc	sp, ip, ror #8
     bb8:	32353034 	eorscc	r3, r5, #52	; 0x34
     bbc:	2f332d33 	svccs	0x00332d33
     bc0:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     bc4:	534f5452 	movtpl	r5, #62546	; 0xf452
     bc8:	756f532f 	strbvc	r5, [pc, #-815]!	; 8a1 <_start-0x775f>
     bcc:	2f656372 	svccs	0x00656372
     bd0:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
     bd4:	00632e65 	rsbeq	r2, r3, r5, ror #28
     bd8:	74497875 	strbvc	r7, [r9], #-2165	; 0x875
     bdc:	69536d65 	ldmdbvs	r3, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
     be0:	7000657a 	andvc	r6, r0, sl, ror r5
     be4:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
     be8:	61697469 	cmnvs	r9, r9, ror #8
     bec:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
     bf0:	56424354 			; <UNDEFINED> instruction: 0x56424354
     bf4:	61697261 	cmnvs	r9, r1, ror #4
     bf8:	73656c62 	cmnvc	r5, #25088	; 0x6200
     bfc:	61547600 	cmpvs	r4, r0, lsl #12
     c00:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xb73
     c04:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
     c08:	78750064 	ldmdavc	r5!, {r2, r5, r6}^
     c0c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     c10:	4e746e65 	cdpmi	14, 7, cr6, cr4, cr5, {3}
     c14:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
     c18:	54664f72 	strbtpl	r4, [r6], #-3954	; 0xf72
     c1c:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     c20:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0x500
     c24:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     c28:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0x544
     c2c:	00646574 	rsbeq	r6, r4, r4, ror r5
     c30:	6f487870 	svcvs	0x00487870
     c34:	75466b6f 	strbvc	r6, [r6, #-2927]	; 0xb6f
     c38:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     c3c:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     c40:	70737553 	rsbsvc	r7, r3, r3, asr r5
     c44:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xe65
     c48:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
     c4c:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
     c50:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     c54:	6b736154 	blvs	1cd91ac <__bss_end+0x1cc36b4>
     c58:	00676154 	rsbeq	r6, r7, r4, asr r1
     c5c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     c60:	6e65476b 	cdpvs	7, 6, cr4, cr5, cr11, {3}
     c64:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     c68:	61657243 	cmnvs	r5, r3, asr #4
     c6c:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     c70:	65726c41 	ldrbvs	r6, [r2, #-3137]!	; 0xc41
     c74:	59796461 	ldmdbpl	r9!, {r0, r5, r6, sl, sp, lr}^
     c78:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
     c7c:	70006465 	andvc	r6, r0, r5, ror #8
     c80:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
     c84:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xf65
     c88:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     c8c:	73497473 	movtvc	r7, #38003	; 0x9473
     c90:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xd45
     c94:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
     c98:	6b736154 	blvs	1cd91f0 <__bss_end+0x1cc36f8>
     c9c:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xf54
     ca0:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     ca4:	61547600 	cmpvs	r4, r0, lsl #12
     ca8:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xb73
     cac:	0079616c 	rsbseq	r6, r9, ip, ror #2
     cb0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     cb4:	6e61486b 	cdpvs	8, 6, cr4, cr1, cr11, {3}
     cb8:	00656c64 	rsbeq	r6, r5, r4, ror #24
     cbc:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     cc0:	6c61436b 	stclvs	3, cr4, [r1], #-428	; 0xfffffe54
     cc4:	7070416c 	rsbsvc	r4, r0, ip, ror #2
     cc8:	6163696c 	cmnvs	r3, ip, ror #18
     ccc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     cd0:	6b736154 	blvs	1cd9228 <__bss_end+0x1cc3730>
     cd4:	6b6f6f48 	blvs	1bdc9fc <__bss_end+0x1bc6f04>
     cd8:	6b737400 	blvs	1cddce0 <__bss_end+0x1cc81e8>
     cdc:	6b736154 	blvs	1cd9234 <__bss_end+0x1cc373c>
     ce0:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     ce4:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
     ce8:	6b636f6c 	blvs	18dcaa0 <__bss_end+0x18c6fa8>
     cec:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     cf0:	43547765 	cmpmi	r4, #26476544	; 0x1940000
     cf4:	54780042 	ldrbtpl	r0, [r8], #-66	; 0x42
     cf8:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     cfc:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     d00:	6f436b63 	svcvs	0x00436b63
     d04:	46746e75 			; <UNDEFINED> instruction: 0x46746e75
     d08:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     d0c:	70005253 	andvc	r5, r0, r3, asr r2
     d10:	6c417672 	mcrrvs	6, 7, r7, r1, cr2
     d14:	61636f6c 	cmnvs	r3, ip, ror #30
     d18:	43546574 	cmpmi	r4, #116, 10	; 0x1d000000
     d1c:	646e4142 	strbtvs	r4, [lr], #-322	; 0x142
     d20:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     d24:	7375006b 	cmnvc	r5, #107	; 0x6b
     d28:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     d2c:	7065446b 	rsbvc	r4, r5, fp, ror #8
     d30:	70006874 	andvc	r6, r0, r4, ror r8
     d34:	74537875 	ldrbvc	r7, [r3], #-2165	; 0x875
     d38:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
     d3c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
     d40:	54760072 	ldrbtpl	r0, [r6], #-114	; 0x72
     d44:	506b7361 	rsbpl	r7, fp, r1, ror #6
     d48:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     d4c:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     d50:	76007465 	strvc	r7, [r0], -r5, ror #8
     d54:	6b736154 	blvs	1cd92ac <__bss_end+0x1cc37b4>
     d58:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     d5c:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
     d60:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     d64:	76007265 	strvc	r7, [r0], -r5, ror #4
     d68:	6b736154 	blvs	1cd92c0 <__bss_end+0x1cc37c8>
     d6c:	63616c50 	cmnvs	r1, #80, 24	; 0x5000
     d70:	456e4f65 	strbmi	r4, [lr, #-3941]!	; 0xf65
     d74:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     d78:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     d7c:	54787000 	ldrbtpl	r7, [r8], #-0
     d80:	006b7361 	rsbeq	r7, fp, r1, ror #6
     d84:	61507670 	cmpvs	r0, r0, ror r6
     d88:	656d6172 	strbvs	r6, [sp, #-370]!	; 0x172
     d8c:	00726574 	rsbseq	r6, r2, r4, ror r5
     d90:	63537875 	cmpvs	r3, #7667712	; 0x750000
     d94:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
     d98:	5372656c 	cmnpl	r2, #108, 10	; 0x1b000000
     d9c:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0x375
     da0:	6465646e 	strbtvs	r6, [r5], #-1134	; 0x46e
     da4:	43787000 	cmnmi	r8, #0
     da8:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
     dac:	61546465 	cmpvs	r4, r5, ror #8
     db0:	78006b73 	stmdavc	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     db4:	6b736154 	blvs	1cd930c <__bss_end+0x1cc3814>
     db8:	61547349 	cmpvs	r4, r9, asr #6
     dbc:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xb73
     dc0:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
     dc4:	00646564 	rsbeq	r6, r4, r4, ror #10
     dc8:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
     dcc:	756f436b 	strbvc	r4, [pc, #-875]!	; a69 <_start-0x7597>
     dd0:	7400746e 	strvc	r7, [r0], #-1134	; 0x46e
     dd4:	43546b73 	cmpmi	r4, #117760	; 0x1cc00
     dd8:	64700042 	ldrbtvs	r0, [r0], #-66	; 0x42
     ddc:	4b534154 	blmi	14d1334 <__bss_end+0x14bb83c>
     de0:	4f4f485f 	svcmi	0x004f485f
     de4:	4f435f4b 	svcmi	0x00435f4b
     de8:	70004544 	andvc	r4, r0, r4, asr #10
     dec:	42435478 	submi	r5, r3, #120, 8	; 0x78000000
     df0:	69597800 	ldmdbvs	r9, {fp, ip, sp, lr}^
     df4:	52646c65 	rsbpl	r6, r4, #25856	; 0x6500
     df8:	69757165 	ldmdbvs	r5!, {r0, r2, r5, r6, r8, ip, sp, lr}^
     dfc:	00646572 	rsbeq	r6, r4, r2, ror r5
     e00:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
     e04:	7365526b 	cmnvc	r5, #-1342177274	; 0xb0000006
     e08:	00656d75 	rsbeq	r6, r5, r5, ror sp
     e0c:	4d454d78 	stclmi	13, cr4, [r5, #-480]	; 0xfffffe20
     e10:	5f59524f 	svcpl	0x0059524f
     e14:	49474552 	stmdbmi	r7, {r1, r4, r6, r8, sl, lr}^
     e18:	76004e4f 	strvc	r4, [r0], -pc, asr #28
     e1c:	6b736154 	blvs	1cd9374 <__bss_end+0x1cc387c>
     e20:	41746553 	cmnmi	r4, r3, asr r5
     e24:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
     e28:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
     e2c:	61546e6f 	cmpvs	r4, pc, ror #28
     e30:	61546b73 	cmpvs	r4, r3, ror fp
     e34:	72700067 	rsbsvc	r0, r0, #103	; 0x67
     e38:	6c654476 	cfstrdvs	mvd4, [r5], #-472	; 0xfffffe28
     e3c:	54657465 	strbtpl	r7, [r5], #-1125	; 0x465
     e40:	78004243 	stmdavc	r0, {r0, r1, r6, r9, lr}
     e44:	7373694d 	cmnvc	r3, #1261568	; 0x134000
     e48:	69596465 	ldmdbvs	r9, {r0, r2, r5, r6, sl, sp, lr}^
     e4c:	00646c65 	rsbeq	r6, r4, r5, ror #24
     e50:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     e54:	54656c64 	strbtpl	r6, [r5], #-3172	; 0xc64
     e58:	006b7361 	rsbeq	r7, fp, r1, ror #6
     e5c:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
     e60:	6977536b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6, r8, r9, ip, lr}^
     e64:	43686374 	cmnmi	r8, #116, 6	; 0xd0000001
     e68:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xe6f
     e6c:	70007478 	andvc	r7, r0, r8, ror r4
     e70:	61745378 	cmnvs	r4, r8, ror r3
     e74:	75006b63 	strvc	r6, [r0, #-2915]	; 0xb63
     e78:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
     e7c:	64657355 	strbtvs	r7, [r5], #-853	; 0x355
     e80:	6f697250 	svcvs	0x00697250
     e84:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e88:	4f787000 	svcmi	0x00787000
     e8c:	66726576 			; <UNDEFINED> instruction: 0x66726576
     e90:	44776f6c 	ldrbtmi	r6, [r7], #-3948	; 0xf6c
     e94:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     e98:	61546465 	cmpvs	r4, r5, ror #8
     e9c:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     ea0:	70007473 	andvc	r7, r0, r3, ror r4
     ea4:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     ea8:	446f546b 	strbtmi	r5, [pc], #-1131	; eb0 <_start-0x7150>
     eac:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
     eb0:	52780065 	rsbspl	r0, r8, #101	; 0x65
     eb4:	6f696765 	svcvs	0x00696765
     eb8:	7800736e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
     ebc:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
     ec0:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     ec4:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     ec8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     ecc:	6f682f00 	svcvs	0x00682f00
     ed0:	6b2f656d 	blvs	bda48c <__bss_end+0xbc4994>
     ed4:	776e7565 	strbvc	r7, [lr, -r5, ror #10]!
     ed8:	442f6f6f 	strtmi	r6, [pc], #-3951	; ee0 <_start-0x7120>
     edc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
     ee0:	73746e65 	cmnvc	r4, #1616	; 0x650
     ee4:	7261772f 	rsbvc	r7, r1, #12320768	; 0xbc0000
     ee8:	756f6865 	strbvc	r6, [pc, #-2149]!	; 68b <_start-0x7975>
     eec:	30346573 	eorscc	r6, r4, r3, ror r5
     ef0:	6f542f34 	svcvs	0x00542f34
     ef4:	2f737572 	svccs	0x00737572
     ef8:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
     efc:	534f5452 	movtpl	r5, #62546	; 0xf452
     f00:	72654b5f 	rsbvc	r4, r5, #97280	; 0x17c00
     f04:	2f6c656e 	svccs	0x006c656e
     f08:	6f6d6544 	svcvs	0x006d6544
     f0c:	696c425f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, lr}^
     f10:	6e696b6e 	vnmulvs.f64	d22, d9, d30
     f14:	50475f67 	subpl	r5, r7, r7, ror #30
     f18:	385f4f49 	ldmdacc	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     f1c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     f20:	72656270 	rsbvc	r6, r5, #112, 4
     f24:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     f28:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0x62d
     f2c:	4f545265 	svcmi	0x00545265
     f30:	75622d53 	strbvc	r2, [r2, #-3411]!	; 0xd53
     f34:	2d646c69 	stclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     f38:	35303431 	ldrcc	r3, [r0, #-1073]!	; 0x431
     f3c:	332d3332 	teqcc	sp, #-939524096	; 0xc8000000
     f40:	54787000 	ldrbtpl	r7, [r8], #-0
     f44:	436b7361 	cmnmi	fp, #-2080374783	; 0x84000001
     f48:	0065646f 	rsbeq	r6, r5, pc, ror #8
     f4c:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     f50:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
     f54:	626e556b 	rsbvs	r5, lr, #448790528	; 0x1ac00000
     f58:	6b636f6c 	blvs	18dcd10 <__bss_end+0x18c7218>
     f5c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     f60:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0x500
     f64:	6552706f 	ldrbvs	r7, [r2, #-111]	; 0x6f
     f68:	50796461 	rsbspl	r6, r9, r1, ror #8
     f6c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     f70:	00797469 	rsbseq	r7, r9, r9, ror #8
     f74:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
     f78:	6f697665 	svcvs	0x00697665
     f7c:	61577375 	cmpvs	r7, r5, ror r3
     f80:	6954656b 	ldmdbvs	r4, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
     f84:	7500656d 	strvc	r6, [r0, #-1389]	; 0x56d
     f88:	6e654c6c 	cdpvs	12, 6, cr4, cr5, cr12, {3}
     f8c:	49687467 	stmdbmi	r8!, {r0, r1, r2, r5, r6, sl, ip, sp, lr}^
     f90:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0x26e
     f94:	2f007365 	svccs	0x00007365
     f98:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     f9c:	75656b2f 	strbvc	r6, [r5, #-2863]!	; 0xb2f
     fa0:	6f6f776e 	svcvs	0x006f776e
     fa4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     fa8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     fac:	772f7374 			; <UNDEFINED> instruction: 0x772f7374
     fb0:	68657261 	stmdavs	r5!, {r0, r5, r6, r9, ip, sp, lr}^
     fb4:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0x56f
     fb8:	2f343034 	svccs	0x00343034
     fbc:	75726f54 	ldrbvc	r6, [r2, #-3924]!	; 0xf54
     fc0:	72462f73 	subvc	r2, r6, #460	; 0x1cc
     fc4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
     fc8:	4b5f534f 	blmi	17d5d0c <__bss_end+0x17c0214>
     fcc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0x265
     fd0:	65442f6c 	strbvs	r2, [r4, #-3948]	; 0xf6c
     fd4:	425f6f6d 	subsmi	r6, pc, #436	; 0x1b4
     fd8:	6b6e696c 	blvs	1b9b590 <__bss_end+0x1b85a98>
     fdc:	5f676e69 	svcpl	0x00676e69
     fe0:	4f495047 	svcmi	0x00495047
     fe4:	522f385f 	eorpl	r3, pc, #6225920	; 0x5f0000
     fe8:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     fec:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     ff0:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     ff4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     ff8:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     ffc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1000:	34312d64 	ldrtcc	r2, [r1], #-3428	; 0xd64
    1004:	33323530 	teqcc	r2, #48, 10	; 0xc000000
    1008:	462f332d 	strtmi	r3, [pc], -sp, lsr #6
    100c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1010:	2f534f54 	svccs	0x00534f54
    1014:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1018:	742f6563 	strtvc	r6, [pc], #-1379	; 1020 <_start-0x6fe0>
    101c:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    1020:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
    1024:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    1028:	6f697250 	svcvs	0x00697250
    102c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1030:	55787000 	ldrbpl	r7, [r8, #-0]!
    1034:	6f6c626e 	svcvs	0x006c626e
    1038:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xb63
    103c:	00424354 	subeq	r4, r2, r4, asr r3
    1040:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1044:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	; 0xfffffe54
    1048:	6e557961 	cdpvs	9, 5, cr7, cr5, cr1, {3}
    104c:	006c6974 	rsbeq	r6, ip, r4, ror r9
    1050:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1054:	636e496b 	cmnvs	lr, #1753088	; 0x1ac000
    1058:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0x572
    105c:	6954746e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1060:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1064:	65686353 	strbvs	r6, [r8, #-851]!	; 0x353
    1068:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0x564
    106c:	6e755272 	mrcvs	2, 3, r5, cr5, cr2, {3}
    1070:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1074:	61547600 	cmpvs	r4, r0, lsl #12
    1078:	6e456b73 	vmovvs.8	d5[3], r6
    107c:	68635364 	stmdavs	r3!, {r2, r5, r6, r8, r9, ip, lr}^
    1080:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    1084:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1088:	6b736154 	blvs	1cd95e0 <__bss_end+0x1cc3ae8>
    108c:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
    1090:	6c41656d 	cfstr64vs	mvdx6, [r1], {109}	; 0x6d
    1094:	5476006c 	ldrbtpl	r0, [r6], #-108	; 0x6c
    1098:	4d6b7361 	stclmi	3, cr7, [fp, #-388]!	; 0xfffffe7c
    109c:	65737369 	ldrbvs	r7, [r3, #-873]!	; 0x369
    10a0:	65695964 	strbvs	r5, [r9, #-2404]!	; 0x964
    10a4:	7800646c 	stmdavc	r0, {r2, r3, r5, r6, sl, sp, lr}
    10a8:	6b736154 	blvs	1cd9600 <__bss_end+0x1cc3b08>
    10ac:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
    10b0:	7246656d 	subvc	r6, r6, #457179136	; 0x1b400000
    10b4:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    10b8:	53780052 	cmnpl	r8, #82	; 0x52
    10bc:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
    10c0:	6c654464 	cfstrdvs	mvd4, [r5], #-400	; 0xfffffe70
    10c4:	70007961 	andvc	r7, r0, r1, ror #18
    10c8:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
    10cc:	546b6365 	strbtpl	r6, [fp], #-869	; 0x365
    10d0:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    10d4:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    10d8:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xe69
    10dc:	696d7265 	stmdbvs	sp!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    10e0:	6974616e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    10e4:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xe6f
    10e8:	7261506c 	rsbvc	r5, r1, #108	; 0x6c
    10ec:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xd61
    10f0:	00737265 	rsbseq	r7, r3, r5, ror #4
    10f4:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    10f8:	6157736b 	cmpvs	r7, fp, ror #6
    10fc:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    1100:	72655467 	rsbvc	r5, r5, #1728053248	; 0x67000000
    1104:	616e696d 	cmnvs	lr, sp, ror #18
    1108:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    110c:	654d7800 	strbvs	r7, [sp, #-2048]	; 0x800
    1110:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1114:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    1118:	70006e6f 	andvc	r6, r0, pc, ror #28
    111c:	64417672 	strbvs	r7, [r1], #-1650	; 0x672
    1120:	72754364 	rsbsvc	r4, r5, #100, 6	; 0x90000001
    1124:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    1128:	6b736154 	blvs	1cd9680 <__bss_end+0x1cc3b88>
    112c:	65446f54 	strbvs	r6, [r4, #-3924]	; 0xf54
    1130:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0x16c
    1134:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
    1138:	54780074 	ldrbtpl	r0, [r8], #-116	; 0x74
    113c:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    1140:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
    1144:	6f724665 	svcvs	0x00724665
    1148:	6576456d 	ldrbvs	r4, [r6, #-1389]!	; 0x56d
    114c:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1150:	76007473 			; <UNDEFINED> instruction: 0x76007473
    1154:	6b736154 	blvs	1cd96ac <__bss_end+0x1cc3bb4>
    1158:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0x544
    115c:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    1160:	6b736154 	blvs	1cd96b8 <__bss_end+0x1cc3bc0>
    1164:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0x547
    1168:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
    116c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1170:	61547800 	cmpvs	r4, r0, lsl #16
    1174:	68436b73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    1178:	466b6365 	strbtmi	r6, [fp], -r5, ror #6
    117c:	6954726f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1180:	754f656d 	strbvc	r6, [pc, #-1389]	; c1b <_start-0x73e5>
    1184:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    1188:	6b736154 	blvs	1cd96e0 <__bss_end+0x1cc3be8>
    118c:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    1190:	70007265 	andvc	r7, r0, r5, ror #4
    1194:	61655278 	smcvs	21800	; 0x5528
    1198:	61547964 	cmpvs	r4, r4, ror #18
    119c:	4c736b73 	ldclmi	11, cr6, [r3], #-460	; 0xfffffe34
    11a0:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
    11a4:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0x500
    11a8:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    11ac:	754e7465 	strbvc	r7, [lr, #-1125]	; 0x465
    11b0:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    11b4:	6154664f 	cmpvs	r4, pc, asr #12
    11b8:	00736b73 	rsbseq	r6, r3, r3, ror fp
    11bc:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
    11c0:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
    11c4:	6b736154 	blvs	1cd971c <__bss_end+0x1cc3c24>
    11c8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    11cc:	44780031 	ldrbtmi	r0, [r8], #-49	; 0x31
    11d0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    11d4:	61546465 	cmpvs	r4, r5, ror #8
    11d8:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    11dc:	00327473 	eorseq	r7, r2, r3, ror r4
    11e0:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
    11e4:	764f664f 	strbvc	r6, [pc], -pc, asr #12
    11e8:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
    11ec:	0073776f 	rsbseq	r7, r3, pc, ror #14
    11f0:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
    11f4:	7600736b 	strvc	r7, [r0], -fp, ror #6
    11f8:	6b736154 	blvs	1cd9750 <__bss_end+0x1cc3c58>
    11fc:	70737553 	rsbsvc	r7, r3, r3, asr r5
    1200:	41646e65 	cmnmi	r4, r5, ror #28
    1204:	75006c6c 	strvc	r6, [r0, #-3180]	; 0xc6c
    1208:	73694d78 	cmnvc	r9, #120, 26	; 0x1e00
    120c:	54646573 	strbtpl	r6, [r4], #-1395	; 0x573
    1210:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    1214:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    1218:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    121c:	6d657263 	sfmvs	f7, 2, [r5, #-396]!	; 0xfffffe74
    1220:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1224:	61546370 	cmpvs	r4, r0, ror r3
    1228:	614e6b73 	hvcvs	59059	; 0xe6b3
    122c:	7800656d 	stmdavc	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    1230:	6b736154 	blvs	1cd9788 <__bss_end+0x1cc3c90>
    1234:	41746547 	cmnmi	r4, r7, asr #10
    1238:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
    123c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    1240:	61546e6f 	cmpvs	r4, pc, ror #28
    1244:	61546b73 	cmpvs	r4, r3, ror fp
    1248:	78700067 	ldmdavc	r0!, {r0, r1, r2, r5, r6}^
    124c:	6b636954 	blvs	18db7a4 <__bss_end+0x18c5cac>
    1250:	576f5473 			; <UNDEFINED> instruction: 0x576f5473
    1254:	00746961 	rsbseq	r6, r4, r1, ror #18
    1258:	75437875 	strbvc	r7, [r3, #-2165]	; 0x875
    125c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1260:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    1264:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1268:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
    126c:	616c6544 	cmnvs	ip, r4, asr #10
    1270:	54646579 	strbtpl	r6, [r4], #-1401	; 0x579
    1274:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    1278:	00747369 	rsbseq	r7, r4, r9, ror #6
    127c:	614e6370 	hvcvs	58928	; 0xe630
    1280:	7500656d 	strvc	r6, [r0, #-1389]	; 0x56d
    1284:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1288:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
    128c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1290:	74654779 	strbtvc	r4, [r5], #-1913	; 0x779
    1294:	61547600 	cmpvs	r4, r0, lsl #12
    1298:	65536b73 	ldrbvs	r6, [r3, #-2931]	; 0xb73
    129c:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    12a0:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xf65
    12a4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    12a8:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    12ac:	6b736154 	blvs	1cd9804 <__bss_end+0x1cc3d0c>
    12b0:	75536f54 	ldrbvc	r6, [r3, #-3924]	; 0xf54
    12b4:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    12b8:	76700064 	ldrbtvc	r0, [r0], -r4, rrx
    12bc:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    12c0:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    12c4:	00737365 	rsbseq	r7, r3, r5, ror #6
    12c8:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    12cc:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    12d0:	73696c61 	cmnvc	r9, #24832	; 0x6100
    12d4:	73615465 	cmnvc	r1, #1694498816	; 0x65000000
    12d8:	73694c6b 	cmnvc	r9, #27392	; 0x6b00
    12dc:	50007374 	andpl	r7, r0, r4, ror r3
    12e0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    12e4:	0031676e 	eorseq	r6, r1, lr, ror #14
    12e8:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    12ec:	32676e69 	rsbcc	r6, r7, #1680	; 0x690
    12f0:	73694400 	cmnvc	r9, #0, 8
    12f4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    12f8:	69736142 	ldmdbvs	r3!, {r1, r6, r8, sp, lr}^
    12fc:	43420063 	movtmi	r0, #8291	; 0x2063
    1300:	3338324d 	teqcc	r8, #-805306364	; 0xd0000004
    1304:	4e495f35 	mcrmi	15, 2, r5, cr9, cr5, {1}
    1308:	525f4354 	subspl	r4, pc, #84, 6	; 0x50000001
    130c:	00534745 	subseq	r4, r3, r5, asr #14
    1310:	43514946 	cmpmi	r1, #1146880	; 0x118000
    1314:	006c7274 	rsbeq	r7, ip, r4, ror r2
    1318:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    131c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    1320:	70757272 	rsbsvc	r7, r5, r2, ror r2
    1324:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1328:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1160 <_start-0x6ea0>
    132c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1330:	614d6c75 	hvcvs	54981	; 0xd6c5
    1334:	64656b73 	strbtvs	r6, [r5], #-2931	; 0xb73
    1338:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    133c:	69007375 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1340:	754e7172 	strbvc	r7, [lr, #-370]	; 0x172
    1344:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1348:	6f682f00 	svcvs	0x00682f00
    134c:	6b2f656d 	blvs	bda908 <__bss_end+0xbc4e10>
    1350:	776e7565 	strbvc	r7, [lr, -r5, ror #10]!
    1354:	442f6f6f 	strtmi	r6, [pc], #-3951	; 135c <_start-0x6ca4>
    1358:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
    135c:	73746e65 	cmnvc	r4, #1616	; 0x650
    1360:	7261772f 	rsbvc	r7, r1, #12320768	; 0xbc0000
    1364:	756f6865 	strbvc	r6, [pc, #-2149]!	; b07 <_start-0x74f9>
    1368:	30346573 	eorscc	r6, r4, r3, ror r5
    136c:	6f542f34 	svcvs	0x00542f34
    1370:	2f737572 	svccs	0x00737572
    1374:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    1378:	534f5452 	movtpl	r5, #62546	; 0xf452
    137c:	72654b5f 	rsbvc	r4, r5, #97280	; 0x17c00
    1380:	2f6c656e 	svccs	0x006c656e
    1384:	6f6d6544 	svcvs	0x006d6544
    1388:	696c425f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, lr}^
    138c:	6e696b6e 	vnmulvs.f64	d22, d9, d30
    1390:	50475f67 	subpl	r5, r7, r7, ror #30
    1394:	385f4f49 	ldmdacc	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1398:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    139c:	72656270 	rsbvc	r6, r5, #112, 4
    13a0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    13a4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0x62d
    13a8:	4f545265 	svcmi	0x00545265
    13ac:	75622d53 	strbvc	r2, [r2, #-3411]!	; 0xd53
    13b0:	2d646c69 	stclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    13b4:	35303431 	ldrcc	r3, [r0, #-1073]!	; 0x431
    13b8:	332d3332 	teqcc	sp, #-939524096	; 0xc8000000
    13bc:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    13c0:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    13c4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    13c8:	6e692f73 	mcrvs	15, 3, r2, cr9, cr3, {3}
    13cc:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    13d0:	73747075 	cmnvc	r4, #117	; 0x75
    13d4:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
    13d8:	006b7361 	rsbeq	r7, fp, r1, ror #6
    13dc:	44717269 	ldrbtmi	r7, [r1], #-617	; 0x269
    13e0:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    13e4:	4500656c 	strmi	r6, [r0, #-1388]	; 0x56c
    13e8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    13ec:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    13f0:	70006369 	andvc	r6, r0, r9, ror #6
    13f4:	61486e66 	cmpvs	r8, r6, ror #28
    13f8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    13fc:	69440072 	stmdbvs	r4, {r1, r4, r5, r6}^
    1400:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1404:	746e4965 	strbtvc	r4, [lr], #-2405	; 0x965
    1408:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    140c:	00737470 	rsbseq	r7, r3, r0, ror r4
    1410:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1414:	6e49656c 	cdpvs	5, 4, cr6, cr9, cr12, {3}
    1418:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    141c:	73747075 	cmnvc	r4, #117	; 0x75
    1420:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    1424:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1428:	71726900 	cmnvc	r2, r0, lsl #18
    142c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1430:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1434:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1438:	0032656c 	eorseq	r6, r2, ip, ror #10
    143c:	61736944 	cmnvs	r3, r4, asr #18
    1440:	31656c62 	cmncc	r5, r2, ror #24
    1444:	73694400 	cmnvc	r9, #0, 8
    1448:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    144c:	5f670032 	svcpl	0x00670032
    1450:	74636556 	strbtvc	r6, [r3], #-1366	; 0x556
    1454:	6154726f 	cmpvs	r4, pc, ror #4
    1458:	00656c62 	rsbeq	r6, r5, r2, ror #24
    145c:	62757473 	rsbsvs	r7, r5, #1929379840	; 0x73000000
    1460:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1464:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1468:	495f4e46 	ldmdbmi	pc, {r1, r2, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    146c:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
    1470:	54505552 	ldrbpl	r5, [r0], #-1362	; 0x552
    1474:	4e41485f 	mcrmi	8, 2, r4, cr1, cr15, {2}
    1478:	52454c44 	subpl	r4, r5, #68, 24	; 0x4400
    147c:	544e4900 	strbpl	r4, [lr], #-2304	; 0x900
    1480:	55525245 	ldrbpl	r5, [r2, #-581]	; 0x245
    1484:	565f5450 			; <UNDEFINED> instruction: 0x565f5450
    1488:	4f544345 	svcmi	0x00544345
    148c:	69440052 	stmdbvs	r4, {r1, r4, r6}^
    1490:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1494:	746e4965 	strbtvc	r4, [lr], #-2405	; 0x965
    1498:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    149c:	69007470 	stmdbvs	r0, {r4, r5, r6, sl, ip, sp, lr}
    14a0:	6e457172 	mcrvs	1, 2, r7, cr5, cr2, {3}
    14a4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    14a8:	615f5f00 	cmpvs	pc, r0, lsl #30
    14ac:	45006772 	strmi	r6, [r0, #-1906]	; 0x772
    14b0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    14b4:	746e4965 	strbtvc	r4, [lr], #-2405	; 0x965
    14b8:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    14bc:	49007470 	stmdbmi	r0, {r4, r5, r6, sl, ip, sp, lr}
    14c0:	61425152 	cmpvs	r2, r2, asr r1
    14c4:	00636973 	rsbeq	r6, r3, r3, ror r9
    14c8:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    14cc:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    14d0:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    14d4:	70757272 	rsbsvc	r7, r5, r2, ror r2
    14d8:	6e450074 	mcrvs	0, 2, r0, cr5, cr4, {3}
    14dc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    14e0:	6c430031 	mcrrvs	0, 3, r0, r3, cr1
    14e4:	47726165 	ldrbmi	r6, [r2, -r5, ror #2]!
    14e8:	496f6970 	stmdbmi	pc!, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
    14ec:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    14f0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
    14f4:	6f682f00 	svcvs	0x00682f00
    14f8:	6b2f656d 	blvs	bdaab4 <__bss_end+0xbc4fbc>
    14fc:	776e7565 	strbvc	r7, [lr, -r5, ror #10]!
    1500:	442f6f6f 	strtmi	r6, [pc], #-3951	; 1508 <_start-0x6af8>
    1504:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
    1508:	73746e65 	cmnvc	r4, #1616	; 0x650
    150c:	7261772f 	rsbvc	r7, r1, #12320768	; 0xbc0000
    1510:	756f6865 	strbvc	r6, [pc, #-2149]!	; cb3 <_start-0x734d>
    1514:	30346573 	eorscc	r6, r4, r3, ror r5
    1518:	6f542f34 	svcvs	0x00542f34
    151c:	2f737572 	svccs	0x00737572
    1520:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    1524:	534f5452 	movtpl	r5, #62546	; 0xf452
    1528:	72654b5f 	rsbvc	r4, r5, #97280	; 0x17c00
    152c:	2f6c656e 	svccs	0x006c656e
    1530:	6f6d6544 	svcvs	0x006d6544
    1534:	696c425f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, lr}^
    1538:	6e696b6e 	vnmulvs.f64	d22, d9, d30
    153c:	50475f67 	subpl	r5, r7, r7, ror #30
    1540:	385f4f49 	ldmdacc	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1544:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    1548:	72656270 	rsbvc	r6, r5, #112, 4
    154c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1550:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0x62d
    1554:	4f545265 	svcmi	0x00545265
    1558:	75622d53 	strbvc	r2, [r2, #-3411]!	; 0xd53
    155c:	2d646c69 	stclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    1560:	35303431 	ldrcc	r3, [r0, #-1073]!	; 0x431
    1564:	332d3332 	teqcc	sp, #-939524096	; 0xc8000000
    1568:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    156c:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    1570:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1574:	70672f73 	rsbvc	r2, r7, r3, ror pc
    1578:	632e6f69 	teqvs	lr, #420	; 0x1a4
    157c:	61655200 	cmnvs	r5, r0, lsl #4
    1580:	69704764 	ldmdbvs	r0!, {r2, r5, r6, r8, r9, sl, lr}^
    1584:	666f006f 	strbtvs	r0, [pc], -pc, rrx
    1588:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
    158c:	4d434200 	sfmmi	f4, 2, [r3, #-0]
    1590:	35333832 	ldrcc	r3, [r3, #-2098]!	; 0x832
    1594:	4950475f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
    1598:	45525f4f 	ldrbmi	r5, [r2, #-3919]	; 0xf4f
    159c:	69005347 	stmdbvs	r0, {r0, r1, r2, r6, r8, r9, ip, lr}
    15a0:	006d6574 	rsbeq	r6, sp, r4, ror r5
    15a4:	45535047 	ldrbmi	r5, [r3, #-71]	; 0x47
    15a8:	65530054 	ldrbvs	r0, [r3, #-84]	; 0x54
    15ac:	69704774 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, lr}^
    15b0:	7269446f 	rsbvc	r4, r9, #1862270976	; 0x6f000000
    15b4:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    15b8:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
    15bc:	524c4350 	subpl	r4, ip, #80, 6	; 0x40000001
    15c0:	48504700 	ldmdami	r0, {r8, r9, sl, lr}^
    15c4:	44004e45 	strmi	r4, [r0], #-3653	; 0xe45
    15c8:	43455445 	movtmi	r5, #21573	; 0x5445
    15cc:	49525f54 	ldmdbmi	r2, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    15d0:	474e4953 	smlsldmi	r4, lr, r3, r9
    15d4:	5953415f 	ldmdbpl	r3, {r0, r1, r2, r3, r4, r6, r8, lr}^
    15d8:	4400434e 	strmi	r4, [r0], #-846	; 0x34e
    15dc:	43455445 	movtmi	r5, #21573	; 0x5445
    15e0:	41465f54 	cmpmi	r6, r4, asr pc
    15e4:	4e494c4c 	cdpmi	12, 4, cr4, cr9, cr12, {2}
    15e8:	53415f47 	movtpl	r5, #8007	; 0x1f47
    15ec:	00434e59 	subeq	r4, r3, r9, asr lr
    15f0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    15f4:	7047656c 	subvc	r6, r7, ip, ror #10
    15f8:	65446f69 	strbvs	r6, [r4, #-3945]	; 0xf69
    15fc:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    1600:	41504700 	cmpmi	r0, r0, lsl #14
    1604:	004e4546 	subeq	r4, lr, r6, asr #10
    1608:	55505047 	ldrbpl	r5, [r0, #-71]	; 0x47
    160c:	45440044 	strbmi	r0, [r4, #-68]	; 0x44
    1610:	54434554 	strbpl	r4, [r3], #-1364	; 0x554
    1614:	5059545f 	subspl	r5, r9, pc, asr r4
    1618:	69700045 	ldmdbvs	r0!, {r0, r2, r6}^
    161c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    1620:	41504700 	cmpmi	r0, r0, lsl #14
    1624:	004e4552 	subeq	r4, lr, r2, asr r5
    1628:	47746553 			; <UNDEFINED> instruction: 0x47746553
    162c:	466f6970 			; <UNDEFINED> instruction: 0x466f6970
    1630:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
    1634:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1638:	4f495047 	svcmi	0x00495047
    163c:	5249445f 	subpl	r4, r9, #1593835520	; 0x5f000000
    1640:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
    1644:	47004e45 	strmi	r4, [r0, -r5, asr #28]
    1648:	5f4f4950 	svcpl	0x004f4950
    164c:	44004e49 	strmi	r4, [r0], #-3657	; 0xe49
    1650:	43455445 	movtmi	r5, #21573	; 0x5445
    1654:	49485f54 	stmdbmi	r8, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1658:	44004847 	strmi	r4, [r0], #-2119	; 0x847
    165c:	43455445 	movtmi	r5, #21573	; 0x5445
    1660:	4f4e5f54 	svcmi	0x004e5f54
    1664:	4700454e 	strmi	r4, [r0, -lr, asr #10]
    1668:	4e454c50 	mcrmi	12, 2, r4, cr5, cr0, {2}
    166c:	50504700 	subspl	r4, r0, r0, lsl #14
    1670:	4c434455 	cfstrdmi	mvd4, [r3], {85}	; 0x55
    1674:	4544004b 	strbmi	r0, [r4, #-75]	; 0x4b
    1678:	54434554 	strbpl	r4, [r3], #-1364	; 0x554
    167c:	5349525f 	movtpl	r5, #37471	; 0x925f
    1680:	00474e49 	subeq	r4, r7, r9, asr #28
    1684:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0x544
    1688:	4c5f5443 	cfldrdmi	mvd5, [pc], {67}	; 0x43
    168c:	4700574f 	strmi	r5, [r0, -pc, asr #14]
    1690:	56454c50 			; <UNDEFINED> instruction: 0x56454c50
    1694:	6e756600 	cdpvs	6, 7, cr6, cr5, cr0, {0}
    1698:	6d754e63 	ldclvs	14, cr4, [r5, #-396]!	; 0xfffffe74
    169c:	52504700 	subspl	r4, r0, #0, 14
    16a0:	47004e45 	strmi	r4, [r0, -r5, asr #28]
    16a4:	53444550 	movtpl	r4, #17744	; 0x4550
    16a8:	73694400 	cmnvc	r9, #0, 8
    16ac:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    16b0:	6f697047 	svcvs	0x00697047
    16b4:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0x544
    16b8:	70007463 	andvc	r7, r0, r3, ror #8
    16bc:	754e6e69 	strbvc	r6, [lr, #-3689]	; 0xe69
    16c0:	5047006d 	subpl	r0, r7, sp, rrx
    16c4:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
    16c8:	73655200 	cmnvc	r5, #0, 4
    16cc:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0x265
    16d0:	00315f64 	eorseq	r5, r1, r4, ror #30
    16d4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    16d8:	64657672 	strbtvs	r7, [r5], #-1650	; 0x672
    16dc:	5200325f 	andpl	r3, r0, #-268435451	; 0xf0000005
    16e0:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    16e4:	5f646576 	svcpl	0x00646576
    16e8:	65520033 	ldrbvs	r0, [r2, #-51]	; 0x33
    16ec:	76726573 			; <UNDEFINED> instruction: 0x76726573
    16f0:	345f6465 	ldrbcc	r6, [pc], #-1125	; 16f8 <_start-0x6908>
    16f4:	73655200 	cmnvc	r5, #0, 4
    16f8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0x265
    16fc:	00355f64 	eorseq	r5, r5, r4, ror #30
    1700:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    1704:	64657672 	strbtvs	r7, [r5], #-1650	; 0x672
    1708:	5200365f 	andpl	r3, r0, #99614720	; 0x5f00000
    170c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1710:	5f646576 	svcpl	0x00646576
    1714:	65520037 	ldrbvs	r0, [r2, #-55]	; 0x37
    1718:	76726573 			; <UNDEFINED> instruction: 0x76726573
    171c:	385f6465 	ldmdacc	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    1720:	73655200 	cmnvc	r5, #0, 4
    1724:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0x265
    1728:	00395f64 	eorseq	r5, r9, r4, ror #30
    172c:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0x544
    1730:	465f5443 	ldrbmi	r5, [pc], -r3, asr #8
    1734:	494c4c41 	stmdbmi	ip, {r0, r6, sl, fp, lr}^
    1738:	5300474e 	movwpl	r4, #1870	; 0x74e
    173c:	70477465 	subvc	r7, r7, r5, ror #8
    1740:	52006f69 	andpl	r6, r0, #420	; 0x1a4
    1744:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1748:	5f646576 	svcpl	0x00646576
    174c:	65520041 	ldrbvs	r0, [r2, #-65]	; 0x41
    1750:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1754:	425f6465 	subsmi	r6, pc, #1694498816	; 0x65000000
    1758:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    175c:	554f5f4f 	strbpl	r5, [pc, #-3919]	; 815 <_start-0x77eb>
    1760:	72700054 	rsbsvc	r0, r0, #84	; 0x54
    1764:	736e4976 	cmnvc	lr, #1933312	; 0x1d8000
    1768:	42747265 	rsbsmi	r7, r4, #1342177286	; 0x50000006
    176c:	6b636f6c 	blvs	18dd524 <__bss_end+0x18c7a2c>
    1770:	6f746e49 	svcvs	0x00746e49
    1774:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    1778:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    177c:	6f507800 	svcvs	0x00507800
    1780:	65477472 	strbvs	r7, [r7, #-1138]	; 0x472
    1784:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0x674
    1788:	61654865 	cmnvs	r5, r5, ror #16
    178c:	7a695370 	bvc	1a56554 <__bss_end+0x1a40a5c>
    1790:	5f410065 	svcpl	0x00410065
    1794:	434f4c42 	movtmi	r4, #64578	; 0xfc42
    1798:	494c5f4b 	stmdbmi	ip, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
    179c:	70004b4e 	andvc	r4, r0, lr, asr #22
    17a0:	65487672 	strbvs	r7, [r8, #-1650]	; 0x672
    17a4:	6e497061 	cdpvs	0, 4, cr7, cr9, cr1, {3}
    17a8:	64007469 	strvs	r7, [r0], #-1129	; 0x469
    17ac:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    17b0:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    17b4:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    17b8:	7870006b 	ldmdavc	r0!, {r0, r1, r3, r5, r6}^
    17bc:	6b6e694c 	blvs	1b9bcf4 <__bss_end+0x1b861fc>
    17c0:	50767000 	rsbspl	r7, r6, r0
    17c4:	4d74726f 	lfmmi	f7, 2, [r4, #-444]!	; 0xfffffe44
    17c8:	6f6c6c61 	svcvs	0x006c6c61
    17cc:	78700063 	ldmdavc	r0!, {r0, r1, r5, r6}^
    17d0:	73726946 	cmnvc	r2, #1146880	; 0x118000
    17d4:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0x674
    17d8:	6f6c4265 	svcvs	0x006c4265
    17dc:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    17e0:	534f5452 	movtpl	r5, #62546	; 0xf452
    17e4:	4145485f 	cmpmi	r5, pc, asr r8
    17e8:	63750050 	cmnvs	r5, #80	; 0x50
    17ec:	70616548 	rsbvc	r6, r1, r8, asr #10
    17f0:	75446400 	strbvc	r6, [r4, #-1024]	; 0x400
    17f4:	00796d6d 	rsbseq	r6, r9, sp, ror #26
    17f8:	6f6c4278 	svcvs	0x006c4278
    17fc:	69536b63 	ldmdbvs	r3, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    1800:	7800657a 	stmdavc	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    1804:	70616548 	rsbvc	r6, r1, r8, asr #10
    1808:	45787000 	ldrbmi	r7, [r8, #-0]!
    180c:	7000646e 	andvc	r6, r0, lr, ror #8
    1810:	65725078 	ldrbvs	r5, [r2, #-120]!	; 0x78
    1814:	756f6976 	strbvc	r6, [pc, #-2422]!	; ea6 <_start-0x715a>
    1818:	6f6c4273 	svcvs	0x006c4273
    181c:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1820:	61746f54 	cmnvs	r4, r4, asr pc
    1824:	6165486c 	cmnvs	r5, ip, ror #16
    1828:	7a695370 	bvc	1a565f0 <__bss_end+0x1a40af8>
    182c:	76700065 	ldrbtvc	r0, [r0], -r5, rrx
    1830:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0x552
    1834:	76006e72 			; <UNDEFINED> instruction: 0x76006e72
    1838:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    183c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1840:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    1844:	6c426573 	cfstr64vs	mvdx6, [r2], {115}	; 0x73
    1848:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    184c:	61656800 	cmnvs	r5, r0, lsl #16
    1850:	52545370 	subspl	r5, r4, #112, 6	; 0xc0000001
    1854:	5f544355 	svcpl	0x00544355
    1858:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0x953
    185c:	74537800 	ldrbvc	r7, [r3], #-2048	; 0x800
    1860:	00747261 	rsbseq	r7, r4, r1, ror #4
    1864:	6f6c4278 	svcvs	0x006c4278
    1868:	694c6b63 	stmdbvs	ip, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    186c:	61006b6e 	tstvs	r0, lr, ror #22
    1870:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    1874:	64657461 	strbtvs	r7, [r5], #-1121	; 0x461
    1878:	61577800 	cmpvs	r7, r0, lsl #16
    187c:	6465746e 	strbtvs	r7, [r5], #-1134	; 0x46e
    1880:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    1884:	6f507600 	svcvs	0x00507600
    1888:	72467472 	subvc	r7, r6, #1912602624	; 0x72000000
    188c:	78006565 	stmdavc	r0, {r0, r2, r5, r6, r8, sl, sp, lr}
    1890:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    1894:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    1898:	6d655273 	sfmvs	f5, 2, [r5, #-460]!	; 0xfffffe34
    189c:	696e6961 	stmdbvs	lr!, {r0, r5, r6, r8, fp, sp, lr}^
    18a0:	7000676e 	andvc	r6, r0, lr, ror #14
    18a4:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    18a8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    18ac:	6e694c6b 	cdpvs	12, 6, cr4, cr9, cr11, {3}
    18b0:	682f006b 	stmdavs	pc!, {r0, r1, r3, r5, r6}	; <UNPREDICTABLE>
    18b4:	2f656d6f 	svccs	0x00656d6f
    18b8:	6e75656b 	cdpvs	5, 7, cr6, cr5, cr11, {3}
    18bc:	2f6f6f77 	svccs	0x006f6f77
    18c0:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xf44
    18c4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    18c8:	61772f73 	cmnvs	r7, r3, ror pc
    18cc:	6f686572 	svcvs	0x00686572
    18d0:	34657375 	strbtcc	r7, [r5], #-885	; 0x375
    18d4:	542f3430 	strtpl	r3, [pc], #-1072	; 18dc <_start-0x6724>
    18d8:	7375726f 	cmnvc	r5, #-268435450	; 0xf0000006
    18dc:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0x62f
    18e0:	4f545265 	svcmi	0x00545265
    18e4:	654b5f53 	strbvs	r5, [fp, #-3923]	; 0xf53
    18e8:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    18ec:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    18f0:	6c425f6f 	mcrrvs	15, 6, r5, r2, cr15
    18f4:	696b6e69 	stmdbvs	fp!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    18f8:	475f676e 	ldrbmi	r6, [pc, -lr, ror #14]
    18fc:	5f4f4950 	svcpl	0x004f4950
    1900:	61522f38 	cmpvs	r2, r8, lsr pc
    1904:	65627073 	strbvs	r7, [r2, #-115]!	; 0x73
    1908:	50797272 	rsbspl	r7, r9, r2, ror r2
    190c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1910:	54526565 	ldrbpl	r6, [r2], #-1381	; 0x565
    1914:	622d534f 	eorvs	r5, sp, #1006632961	; 0x3c000001
    1918:	646c6975 	strbtvs	r6, [ip], #-2421	; 0x975
    191c:	3034312d 	eorscc	r3, r4, sp, lsr #2
    1920:	2d333235 	lfmcs	f3, 4, [r3, #-212]!	; 0xffffff2c
    1924:	462f2f33 	qasxmi	r2, pc, r3	; <UNPREDICTABLE>
    1928:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    192c:	2f534f54 	svccs	0x00534f54
    1930:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1934:	702f6563 	eorvc	r6, pc, r3, ror #10
    1938:	6174726f 	cmnvs	r4, pc, ror #4
    193c:	2f656c62 	svccs	0x00656c62
    1940:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    1944:	2f676e61 	svccs	0x00676e61
    1948:	70616568 	rsbvc	r6, r1, r8, ror #10
    194c:	632e345f 	teqvs	lr, #1593835520	; 0x5f000000
    1950:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    1954:	46747865 	ldrbtmi	r7, [r4], -r5, ror #16
    1958:	42656572 	rsbmi	r6, r5, #478150656	; 0x1c800000
    195c:	6b636f6c 	blvs	18dd714 <__bss_end+0x18c7c1c>
    1960:	63757000 	cmnvs	r5, #0
    1964:	70616548 	rsbvc	r6, r1, r8, asr #10
    1968:	00646e45 	rsbeq	r6, r4, r5, asr #28
    196c:	6c427870 	mcrrvs	8, 7, r7, r2, cr0
    1970:	546b636f 	strbtpl	r6, [fp], #-879	; 0x36f
    1974:	736e496f 	cmnvc	lr, #1818624	; 0x1bc000
    1978:	00747265 	rsbseq	r7, r4, r5, ror #4
    197c:	6b736174 	blvs	1cd9f54 <__bss_end+0x1cc445c>
    1980:	61740031 	cmnvs	r4, r1, lsr r0
    1984:	00326b73 	eorseq	r6, r2, r3, ror fp
    1988:	6e69616d 	powvsez	f6, f1, #5.0
    198c:	6f682f00 	svcvs	0x00682f00
    1990:	6b2f656d 	blvs	bdaf4c <__bss_end+0xbc5454>
    1994:	776e7565 	strbvc	r7, [lr, -r5, ror #10]!
    1998:	442f6f6f 	strtmi	r6, [pc], #-3951	; 19a0 <_start-0x6660>
    199c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
    19a0:	73746e65 	cmnvc	r4, #1616	; 0x650
    19a4:	7261772f 	rsbvc	r7, r1, #12320768	; 0xbc0000
    19a8:	756f6865 	strbvc	r6, [pc, #-2149]!	; 114b <_start-0x6eb5>
    19ac:	30346573 	eorscc	r6, r4, r3, ror r5
    19b0:	6f542f34 	svcvs	0x00542f34
    19b4:	2f737572 	svccs	0x00737572
    19b8:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    19bc:	534f5452 	movtpl	r5, #62546	; 0xf452
    19c0:	72654b5f 	rsbvc	r4, r5, #97280	; 0x17c00
    19c4:	2f6c656e 	svccs	0x006c656e
    19c8:	6f6d6544 	svcvs	0x006d6544
    19cc:	696c425f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r9, lr}^
    19d0:	6e696b6e 	vnmulvs.f64	d22, d9, d30
    19d4:	50475f67 	subpl	r5, r7, r7, ror #30
    19d8:	385f4f49 	ldmdacc	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    19dc:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    19e0:	72656270 	rsbvc	r6, r5, #112, 4
    19e4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    19e8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0x62d
    19ec:	4f545265 	svcmi	0x00545265
    19f0:	75622d53 	strbvc	r2, [r2, #-3411]!	; 0xd53
    19f4:	2d646c69 	stclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    19f8:	35303431 	ldrcc	r3, [r0, #-1073]!	; 0x431
    19fc:	332d3332 	teqcc	sp, #-939524096	; 0xc8000000
    1a00:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1a04:	616d2f6f 	cmnvs	sp, pc, ror #30
    1a08:	632e6e69 	teqvs	lr, #1680	; 0x690
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end+0x10bb22c>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  30:	3220342e 	eorcc	r3, r0, #771751936	; 0x2e000000
  34:	30343130 	eorscc	r3, r4, r0, lsr r1
  38:	20353237 	eorscs	r3, r5, r7, lsr r2
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <_estack+0xf7fef2fe>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	31333132 	teqcc	r3, r2, lsr r1
  6c:	005d3734 	subseq	r3, sp, r4, lsr r7

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	; 0x109
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			; <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00010000 	andeq	r0, r1, r0
  1c:	00000240 	andeq	r0, r0, r0, asr #4
  20:	8b040e42 	blhi	103930 <__bss_end+0xede38>
  24:	0b0d4201 	bleq	350830 <__bss_end+0x33ad38>
  28:	00000018 	andeq	r0, r0, r8, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00010240 	andeq	r0, r1, r0, asr #4
  34:	0000001c 	andeq	r0, r0, ip, lsl r0
  38:	8b080e42 	blhi	203948 <__bss_end+0x1ede50>
  3c:	42018e02 	andmi	r8, r1, #2, 28
  40:	00040b0c 	andeq	r0, r4, ip, lsl #22
  44:	00000014 	andeq	r0, r0, r4, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	0001025c 	andeq	r0, r1, ip, asr r2
  50:	00000014 	andeq	r0, r0, r4, lsl r0
  54:	8b040e42 	blhi	103964 <__bss_end+0xede6c>
  58:	0b0d4201 	bleq	350864 <__bss_end+0x33ad6c>
  5c:	00000018 	andeq	r0, r0, r8, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	00010270 	andeq	r0, r1, r0, ror r2
  68:	00000034 	andeq	r0, r0, r4, lsr r0
  6c:	8b080e42 	blhi	20397c <__bss_end+0x1ede84>
  70:	42018e02 	andmi	r8, r1, #2, 28
  74:	00040b0c 	andeq	r0, r4, ip, lsl #22
  78:	00000018 	andeq	r0, r0, r8, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	000102a4 	andeq	r0, r1, r4, lsr #5
  84:	00000094 	muleq	r0, r4, r0
  88:	8b080e42 	blhi	203998 <__bss_end+0x1edea0>
  8c:	42018e02 	andmi	r8, r1, #2, 28
  90:	00040b0c 	andeq	r0, r4, ip, lsl #22
  94:	0000000c 	andeq	r0, r0, ip
  98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  9c:	7c020001 	stcvc	0, cr0, [r2], {1}
  a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  a4:	00000014 	andeq	r0, r0, r4, lsl r0
  a8:	00000094 	muleq	r0, r4, r0
  ac:	00010338 	andeq	r0, r1, r8, lsr r3
  b0:	00000094 	muleq	r0, r4, r0
  b4:	8b040e42 	blhi	1039c4 <__bss_end+0xedecc>
  b8:	0b0d4201 	bleq	3508c4 <__bss_end+0x33adcc>
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	00000094 	muleq	r0, r4, r0
  c4:	000103cc 	andeq	r0, r1, ip, asr #7
  c8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	00000094 	muleq	r0, r4, r0
  d4:	0001047c 	andeq	r0, r1, ip, ror r4
  d8:	000000ac 	andeq	r0, r0, ip, lsr #1
  dc:	00000014 	andeq	r0, r0, r4, lsl r0
  e0:	00000094 	muleq	r0, r4, r0
  e4:	00010528 	andeq	r0, r1, r8, lsr #10
  e8:	00000040 	andeq	r0, r0, r0, asr #32
  ec:	8b040e42 	blhi	1039fc <__bss_end+0xedf04>
  f0:	0b0d4201 	bleq	3508fc <__bss_end+0x33ae04>
  f4:	00000014 	andeq	r0, r0, r4, lsl r0
  f8:	00000094 	muleq	r0, r4, r0
  fc:	00010568 	andeq	r0, r1, r8, ror #10
 100:	00000060 	andeq	r0, r0, r0, rrx
 104:	8b040e42 	blhi	103a14 <__bss_end+0xedf1c>
 108:	0b0d4201 	bleq	350914 <__bss_end+0x33ae1c>
 10c:	0000000c 	andeq	r0, r0, ip
 110:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 114:	7c020001 	stcvc	0, cr0, [r2], {1}
 118:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 11c:	00000018 	andeq	r0, r0, r8, lsl r0
 120:	0000010c 	andeq	r0, r0, ip, lsl #2
 124:	000105d0 	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 128:	00000168 	andeq	r0, r0, r8, ror #2
 12c:	8b080e42 	blhi	203a3c <__bss_end+0x1edf44>
 130:	42018e02 	andmi	r8, r1, #2, 28
 134:	00040b0c 	andeq	r0, r4, ip, lsl #22
 138:	00000018 	andeq	r0, r0, r8, lsl r0
 13c:	0000010c 	andeq	r0, r0, ip, lsl #2
 140:	00010738 	andeq	r0, r1, r8, lsr r7
 144:	000000e0 	andeq	r0, r0, r0, ror #1
 148:	8b080e42 	blhi	203a58 <__bss_end+0x1edf60>
 14c:	42018e02 	andmi	r8, r1, #2, 28
 150:	00040b0c 	andeq	r0, r4, ip, lsl #22
 154:	00000018 	andeq	r0, r0, r8, lsl r0
 158:	0000010c 	andeq	r0, r0, ip, lsl #2
 15c:	00010818 	andeq	r0, r1, r8, lsl r8
 160:	000000e8 	andeq	r0, r0, r8, ror #1
 164:	8b080e42 	blhi	203a74 <__bss_end+0x1edf7c>
 168:	42018e02 	andmi	r8, r1, #2, 28
 16c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 170:	00000018 	andeq	r0, r0, r8, lsl r0
 174:	0000010c 	andeq	r0, r0, ip, lsl #2
 178:	00010900 	andeq	r0, r1, r0, lsl #18
 17c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 180:	8b080e42 	blhi	203a90 <__bss_end+0x1edf98>
 184:	42018e02 	andmi	r8, r1, #2, 28
 188:	00040b0c 	andeq	r0, r4, ip, lsl #22
 18c:	00000018 	andeq	r0, r0, r8, lsl r0
 190:	0000010c 	andeq	r0, r0, ip, lsl #2
 194:	00010ad0 	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 198:	00000128 	andeq	r0, r0, r8, lsr #2
 19c:	8b080e42 	blhi	203aac <__bss_end+0x1edfb4>
 1a0:	42018e02 	andmi	r8, r1, #2, 28
 1a4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 1a8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ac:	0000010c 	andeq	r0, r0, ip, lsl #2
 1b0:	00010bf8 	strdeq	r0, [r1], -r8
 1b4:	000000a4 	andeq	r0, r0, r4, lsr #1
 1b8:	8b080e42 	blhi	203ac8 <__bss_end+0x1edfd0>
 1bc:	42018e02 	andmi	r8, r1, #2, 28
 1c0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 1c4:	00000018 	andeq	r0, r0, r8, lsl r0
 1c8:	0000010c 	andeq	r0, r0, ip, lsl #2
 1cc:	00010c9c 	muleq	r1, ip, ip
 1d0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1d4:	8b080e42 	blhi	203ae4 <__bss_end+0x1edfec>
 1d8:	42018e02 	andmi	r8, r1, #2, 28
 1dc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 1e0:	0000000c 	andeq	r0, r0, ip
 1e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1e8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1f0:	00000014 	andeq	r0, r0, r4, lsl r0
 1f4:	000001e0 	andeq	r0, r0, r0, ror #3
 1f8:	00010d28 	andeq	r0, r1, r8, lsr #26
 1fc:	00000064 	andeq	r0, r0, r4, rrx
 200:	8b040e42 	blhi	103b10 <__bss_end+0xee018>
 204:	0b0d4201 	bleq	350a10 <__bss_end+0x33af18>
 208:	00000014 	andeq	r0, r0, r4, lsl r0
 20c:	000001e0 	andeq	r0, r0, r0, ror #3
 210:	00010d8c 	andeq	r0, r1, ip, lsl #27
 214:	00000028 	andeq	r0, r0, r8, lsr #32
 218:	8b040e42 	blhi	103b28 <__bss_end+0xee030>
 21c:	0b0d4201 	bleq	350a28 <__bss_end+0x33af30>
 220:	00000014 	andeq	r0, r0, r4, lsl r0
 224:	000001e0 	andeq	r0, r0, r0, ror #3
 228:	00010db4 			; <UNDEFINED> instruction: 0x00010db4
 22c:	00000094 	muleq	r0, r4, r0
 230:	8b040e42 	blhi	103b40 <__bss_end+0xee048>
 234:	0b0d4201 	bleq	350a40 <__bss_end+0x33af48>
 238:	00000014 	andeq	r0, r0, r4, lsl r0
 23c:	000001e0 	andeq	r0, r0, r0, ror #3
 240:	00010e48 	andeq	r0, r1, r8, asr #28
 244:	000000d4 	ldrdeq	r0, [r0], -r4
 248:	8b040e42 	blhi	103b58 <__bss_end+0xee060>
 24c:	0b0d4201 	bleq	350a58 <__bss_end+0x33af60>
 250:	00000014 	andeq	r0, r0, r4, lsl r0
 254:	000001e0 	andeq	r0, r0, r0, ror #3
 258:	00010f1c 	andeq	r0, r1, ip, lsl pc
 25c:	00000094 	muleq	r0, r4, r0
 260:	8b040e42 	blhi	103b70 <__bss_end+0xee078>
 264:	0b0d4201 	bleq	350a70 <__bss_end+0x33af78>
 268:	0000000c 	andeq	r0, r0, ip
 26c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 270:	7c020001 	stcvc	0, cr0, [r2], {1}
 274:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 278:	00000018 	andeq	r0, r0, r8, lsl r0
 27c:	00000268 	andeq	r0, r0, r8, ror #4
 280:	00010fb0 			; <UNDEFINED> instruction: 0x00010fb0
 284:	00000114 	andeq	r0, r0, r4, lsl r1
 288:	8b080e42 	blhi	203b98 <__bss_end+0x1ee0a0>
 28c:	42018e02 	andmi	r8, r1, #2, 28
 290:	00040b0c 	andeq	r0, r4, ip, lsl #22
 294:	00000018 	andeq	r0, r0, r8, lsl r0
 298:	00000268 	andeq	r0, r0, r8, ror #4
 29c:	000110c4 	andeq	r1, r1, r4, asr #1
 2a0:	000000c8 	andeq	r0, r0, r8, asr #1
 2a4:	8b080e42 	blhi	203bb4 <__bss_end+0x1ee0bc>
 2a8:	42018e02 	andmi	r8, r1, #2, 28
 2ac:	00040b0c 	andeq	r0, r4, ip, lsl #22
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	00000268 	andeq	r0, r0, r8, ror #4
 2b8:	0001118c 	andeq	r1, r1, ip, lsl #3
 2bc:	000001ac 	andeq	r0, r0, ip, lsr #3
 2c0:	8b080e42 	blhi	203bd0 <__bss_end+0x1ee0d8>
 2c4:	42018e02 	andmi	r8, r1, #2, 28
 2c8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 2cc:	00000018 	andeq	r0, r0, r8, lsl r0
 2d0:	00000268 	andeq	r0, r0, r8, ror #4
 2d4:	00011338 	andeq	r1, r1, r8, lsr r3
 2d8:	000000dc 	ldrdeq	r0, [r0], -ip
 2dc:	8b080e42 	blhi	203bec <__bss_end+0x1ee0f4>
 2e0:	42018e02 	andmi	r8, r1, #2, 28
 2e4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 2e8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ec:	00000268 	andeq	r0, r0, r8, ror #4
 2f0:	00011414 	andeq	r1, r1, r4, lsl r4
 2f4:	0000020c 	andeq	r0, r0, ip, lsl #4
 2f8:	8b080e42 	blhi	203c08 <__bss_end+0x1ee110>
 2fc:	42018e02 	andmi	r8, r1, #2, 28
 300:	00040b0c 	andeq	r0, r4, ip, lsl #22
 304:	00000018 	andeq	r0, r0, r8, lsl r0
 308:	00000268 	andeq	r0, r0, r8, ror #4
 30c:	00011620 	andeq	r1, r1, r0, lsr #12
 310:	000000e0 	andeq	r0, r0, r0, ror #1
 314:	8b080e42 	blhi	203c24 <__bss_end+0x1ee12c>
 318:	42018e02 	andmi	r8, r1, #2, 28
 31c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 320:	00000018 	andeq	r0, r0, r8, lsl r0
 324:	00000268 	andeq	r0, r0, r8, ror #4
 328:	00011700 	andeq	r1, r1, r0, lsl #14
 32c:	00000034 	andeq	r0, r0, r4, lsr r0
 330:	8b080e42 	blhi	203c40 <__bss_end+0x1ee148>
 334:	42018e02 	andmi	r8, r1, #2, 28
 338:	00040b0c 	andeq	r0, r4, ip, lsl #22
 33c:	00000014 	andeq	r0, r0, r4, lsl r0
 340:	00000268 	andeq	r0, r0, r8, ror #4
 344:	00011734 	andeq	r1, r1, r4, lsr r7
 348:	00000030 	andeq	r0, r0, r0, lsr r0
 34c:	8b040e42 	blhi	103c5c <__bss_end+0xee164>
 350:	0b0d4201 	bleq	350b5c <__bss_end+0x33b064>
 354:	00000018 	andeq	r0, r0, r8, lsl r0
 358:	00000268 	andeq	r0, r0, r8, ror #4
 35c:	00011764 	andeq	r1, r1, r4, ror #14
 360:	00000030 	andeq	r0, r0, r0, lsr r0
 364:	8b080e42 	blhi	203c74 <__bss_end+0x1ee17c>
 368:	42018e02 	andmi	r8, r1, #2, 28
 36c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 370:	00000018 	andeq	r0, r0, r8, lsl r0
 374:	00000268 	andeq	r0, r0, r8, ror #4
 378:	00011794 	muleq	r1, r4, r7
 37c:	00000130 	andeq	r0, r0, r0, lsr r1
 380:	8b080e42 	blhi	203c90 <__bss_end+0x1ee198>
 384:	42018e02 	andmi	r8, r1, #2, 28
 388:	00040b0c 	andeq	r0, r4, ip, lsl #22
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	00000268 	andeq	r0, r0, r8, ror #4
 394:	000118c4 	andeq	r1, r1, r4, asr #17
 398:	00000090 	muleq	r0, r0, r0
 39c:	8b080e42 	blhi	203cac <__bss_end+0x1ee1b4>
 3a0:	42018e02 	andmi	r8, r1, #2, 28
 3a4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 3a8:	00000018 	andeq	r0, r0, r8, lsl r0
 3ac:	00000268 	andeq	r0, r0, r8, ror #4
 3b0:	00011954 	andeq	r1, r1, r4, asr r9
 3b4:	00000100 	andeq	r0, r0, r0, lsl #2
 3b8:	8b080e42 	blhi	203cc8 <__bss_end+0x1ee1d0>
 3bc:	42018e02 	andmi	r8, r1, #2, 28
 3c0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 3c4:	00000018 	andeq	r0, r0, r8, lsl r0
 3c8:	00000268 	andeq	r0, r0, r8, ror #4
 3cc:	00011a54 	andeq	r1, r1, r4, asr sl
 3d0:	00000044 	andeq	r0, r0, r4, asr #32
 3d4:	8b080e42 	blhi	203ce4 <__bss_end+0x1ee1ec>
 3d8:	42018e02 	andmi	r8, r1, #2, 28
 3dc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 3e0:	00000014 	andeq	r0, r0, r4, lsl r0
 3e4:	00000268 	andeq	r0, r0, r8, ror #4
 3e8:	00011a98 	muleq	r1, r8, sl
 3ec:	00000040 	andeq	r0, r0, r0, asr #32
 3f0:	8b040e42 	blhi	103d00 <__bss_end+0xee208>
 3f4:	0b0d4201 	bleq	350c00 <__bss_end+0x33b108>
 3f8:	00000018 	andeq	r0, r0, r8, lsl r0
 3fc:	00000268 	andeq	r0, r0, r8, ror #4
 400:	00011ad8 	ldrdeq	r1, [r1], -r8
 404:	0000004c 	andeq	r0, r0, ip, asr #32
 408:	8b080e42 	blhi	203d18 <__bss_end+0x1ee220>
 40c:	42018e02 	andmi	r8, r1, #2, 28
 410:	00040b0c 	andeq	r0, r4, ip, lsl #22
 414:	00000014 	andeq	r0, r0, r4, lsl r0
 418:	00000268 	andeq	r0, r0, r8, ror #4
 41c:	00011b24 	andeq	r1, r1, r4, lsr #22
 420:	00000048 	andeq	r0, r0, r8, asr #32
 424:	8b040e42 	blhi	103d34 <__bss_end+0xee23c>
 428:	0b0d4201 	bleq	350c34 <__bss_end+0x33b13c>
 42c:	0000000c 	andeq	r0, r0, ip
 430:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 434:	7c020001 	stcvc	0, cr0, [r2], {1}
 438:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 43c:	00000018 	andeq	r0, r0, r8, lsl r0
 440:	0000042c 	andeq	r0, r0, ip, lsr #8
 444:	00011b6c 	andeq	r1, r1, ip, ror #22
 448:	00000248 	andeq	r0, r0, r8, asr #4
 44c:	8b080e42 	blhi	203d5c <__bss_end+0x1ee264>
 450:	42018e02 	andmi	r8, r1, #2, 28
 454:	00040b0c 	andeq	r0, r4, ip, lsl #22
 458:	00000018 	andeq	r0, r0, r8, lsl r0
 45c:	0000042c 	andeq	r0, r0, ip, lsr #8
 460:	00011db4 			; <UNDEFINED> instruction: 0x00011db4
 464:	000000fc 	strdeq	r0, [r0], -ip
 468:	8b080e42 	blhi	203d78 <__bss_end+0x1ee280>
 46c:	42018e02 	andmi	r8, r1, #2, 28
 470:	00040b0c 	andeq	r0, r4, ip, lsl #22
 474:	00000018 	andeq	r0, r0, r8, lsl r0
 478:	0000042c 	andeq	r0, r0, ip, lsr #8
 47c:	00011eb0 			; <UNDEFINED> instruction: 0x00011eb0
 480:	0000010c 	andeq	r0, r0, ip, lsl #2
 484:	8b080e42 	blhi	203d94 <__bss_end+0x1ee29c>
 488:	42018e02 	andmi	r8, r1, #2, 28
 48c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 490:	00000018 	andeq	r0, r0, r8, lsl r0
 494:	0000042c 	andeq	r0, r0, ip, lsr #8
 498:	00011fbc 			; <UNDEFINED> instruction: 0x00011fbc
 49c:	00000080 	andeq	r0, r0, r0, lsl #1
 4a0:	8b080e42 	blhi	203db0 <__bss_end+0x1ee2b8>
 4a4:	42018e02 	andmi	r8, r1, #2, 28
 4a8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 4ac:	00000018 	andeq	r0, r0, r8, lsl r0
 4b0:	0000042c 	andeq	r0, r0, ip, lsr #8
 4b4:	0001203c 	andeq	r2, r1, ip, lsr r0
 4b8:	00000058 	andeq	r0, r0, r8, asr r0
 4bc:	8b080e42 	blhi	203dcc <__bss_end+0x1ee2d4>
 4c0:	42018e02 	andmi	r8, r1, #2, 28
 4c4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 4c8:	00000018 	andeq	r0, r0, r8, lsl r0
 4cc:	0000042c 	andeq	r0, r0, ip, lsr #8
 4d0:	00012094 	muleq	r1, r4, r0
 4d4:	000001a4 	andeq	r0, r0, r4, lsr #3
 4d8:	8b080e42 	blhi	203de8 <__bss_end+0x1ee2f0>
 4dc:	42018e02 	andmi	r8, r1, #2, 28
 4e0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 4e4:	00000018 	andeq	r0, r0, r8, lsl r0
 4e8:	0000042c 	andeq	r0, r0, ip, lsr #8
 4ec:	00012238 	andeq	r2, r1, r8, lsr r2
 4f0:	00000100 	andeq	r0, r0, r0, lsl #2
 4f4:	8b080e42 	blhi	203e04 <__bss_end+0x1ee30c>
 4f8:	42018e02 	andmi	r8, r1, #2, 28
 4fc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 500:	00000014 	andeq	r0, r0, r4, lsl r0
 504:	0000042c 	andeq	r0, r0, ip, lsr #8
 508:	00012338 	andeq	r2, r1, r8, lsr r3
 50c:	0000007c 	andeq	r0, r0, ip, ror r0
 510:	8b040e42 	blhi	103e20 <__bss_end+0xee328>
 514:	0b0d4201 	bleq	350d20 <__bss_end+0x33b228>
 518:	00000018 	andeq	r0, r0, r8, lsl r0
 51c:	0000042c 	andeq	r0, r0, ip, lsr #8
 520:	000123b4 			; <UNDEFINED> instruction: 0x000123b4
 524:	000000f4 	strdeq	r0, [r0], -r4
 528:	8b080e42 	blhi	203e38 <__bss_end+0x1ee340>
 52c:	42018e02 	andmi	r8, r1, #2, 28
 530:	00040b0c 	andeq	r0, r4, ip, lsl #22
 534:	00000018 	andeq	r0, r0, r8, lsl r0
 538:	0000042c 	andeq	r0, r0, ip, lsr #8
 53c:	000124a8 	andeq	r2, r1, r8, lsr #9
 540:	0000011c 	andeq	r0, r0, ip, lsl r1
 544:	8b080e42 	blhi	203e54 <__bss_end+0x1ee35c>
 548:	42018e02 	andmi	r8, r1, #2, 28
 54c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 550:	00000018 	andeq	r0, r0, r8, lsl r0
 554:	0000042c 	andeq	r0, r0, ip, lsr #8
 558:	000125c4 	andeq	r2, r1, r4, asr #11
 55c:	00000098 	muleq	r0, r8, r0
 560:	8b080e42 	blhi	203e70 <__bss_end+0x1ee378>
 564:	42018e02 	andmi	r8, r1, #2, 28
 568:	00040b0c 	andeq	r0, r4, ip, lsl #22
 56c:	00000018 	andeq	r0, r0, r8, lsl r0
 570:	0000042c 	andeq	r0, r0, ip, lsr #8
 574:	0001265c 	andeq	r2, r1, ip, asr r6
 578:	00000034 	andeq	r0, r0, r4, lsr r0
 57c:	8b080e42 	blhi	203e8c <__bss_end+0x1ee394>
 580:	42018e02 	andmi	r8, r1, #2, 28
 584:	00040b0c 	andeq	r0, r4, ip, lsl #22
 588:	00000014 	andeq	r0, r0, r4, lsl r0
 58c:	0000042c 	andeq	r0, r0, ip, lsr #8
 590:	00012690 	muleq	r1, r0, r6
 594:	0000002c 	andeq	r0, r0, ip, lsr #32
 598:	8b040e42 	blhi	103ea8 <__bss_end+0xee3b0>
 59c:	0b0d4201 	bleq	350da8 <__bss_end+0x33b2b0>
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	0000042c 	andeq	r0, r0, ip, lsr #8
 5a8:	000126bc 			; <UNDEFINED> instruction: 0x000126bc
 5ac:	000001a4 	andeq	r0, r0, r4, lsr #3
 5b0:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
 5b4:	8e028b03 	vmlahi.f64	d8, d2, d3
 5b8:	0b0c4201 	bleq	310dc4 <__bss_end+0x2fb2cc>
 5bc:	00000004 	andeq	r0, r0, r4
 5c0:	00000018 	andeq	r0, r0, r8, lsl r0
 5c4:	0000042c 	andeq	r0, r0, ip, lsr #8
 5c8:	00012860 	andeq	r2, r1, r0, ror #16
 5cc:	00000034 	andeq	r0, r0, r4, lsr r0
 5d0:	8b080e42 	blhi	203ee0 <__bss_end+0x1ee3e8>
 5d4:	42018e02 	andmi	r8, r1, #2, 28
 5d8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 5dc:	00000014 	andeq	r0, r0, r4, lsl r0
 5e0:	0000042c 	andeq	r0, r0, ip, lsr #8
 5e4:	00012894 	muleq	r1, r4, r8
 5e8:	00000038 	andeq	r0, r0, r8, lsr r0
 5ec:	8b040e42 	blhi	103efc <__bss_end+0xee404>
 5f0:	0b0d4201 	bleq	350dfc <__bss_end+0x33b304>
 5f4:	00000014 	andeq	r0, r0, r4, lsl r0
 5f8:	0000042c 	andeq	r0, r0, ip, lsr #8
 5fc:	000128cc 	andeq	r2, r1, ip, asr #17
 600:	00000024 	andeq	r0, r0, r4, lsr #32
 604:	8b040e42 	blhi	103f14 <__bss_end+0xee41c>
 608:	0b0d4201 	bleq	350e14 <__bss_end+0x33b31c>
 60c:	00000018 	andeq	r0, r0, r8, lsl r0
 610:	0000042c 	andeq	r0, r0, ip, lsr #8
 614:	000128f0 	strdeq	r2, [r1], -r0
 618:	00000218 	andeq	r0, r0, r8, lsl r2
 61c:	8b080e42 	blhi	203f2c <__bss_end+0x1ee434>
 620:	42018e02 	andmi	r8, r1, #2, 28
 624:	00040b0c 	andeq	r0, r4, ip, lsl #22
 628:	00000018 	andeq	r0, r0, r8, lsl r0
 62c:	0000042c 	andeq	r0, r0, ip, lsr #8
 630:	00012b08 	andeq	r2, r1, r8, lsl #22
 634:	00000058 	andeq	r0, r0, r8, asr r0
 638:	8b080e42 	blhi	203f48 <__bss_end+0x1ee450>
 63c:	42018e02 	andmi	r8, r1, #2, 28
 640:	00040b0c 	andeq	r0, r4, ip, lsl #22
 644:	00000018 	andeq	r0, r0, r8, lsl r0
 648:	0000042c 	andeq	r0, r0, ip, lsr #8
 64c:	00012b60 	andeq	r2, r1, r0, ror #22
 650:	0000005c 	andeq	r0, r0, ip, asr r0
 654:	8b080e42 	blhi	203f64 <__bss_end+0x1ee46c>
 658:	42018e02 	andmi	r8, r1, #2, 28
 65c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 660:	00000018 	andeq	r0, r0, r8, lsl r0
 664:	0000042c 	andeq	r0, r0, ip, lsr #8
 668:	00012bbc 			; <UNDEFINED> instruction: 0x00012bbc
 66c:	0000007c 	andeq	r0, r0, ip, ror r0
 670:	8b080e42 	blhi	203f80 <__bss_end+0x1ee488>
 674:	42018e02 	andmi	r8, r1, #2, 28
 678:	00040b0c 	andeq	r0, r4, ip, lsl #22
 67c:	00000014 	andeq	r0, r0, r4, lsl r0
 680:	0000042c 	andeq	r0, r0, ip, lsr #8
 684:	00012c38 	andeq	r2, r1, r8, lsr ip
 688:	00000108 	andeq	r0, r0, r8, lsl #2
 68c:	8b040e42 	blhi	103f9c <__bss_end+0xee4a4>
 690:	0b0d4201 	bleq	350e9c <__bss_end+0x33b3a4>
 694:	00000018 	andeq	r0, r0, r8, lsl r0
 698:	0000042c 	andeq	r0, r0, ip, lsr #8
 69c:	00012d40 	andeq	r2, r1, r0, asr #26
 6a0:	00000098 	muleq	r0, r8, r0
 6a4:	8b080e42 	blhi	203fb4 <__bss_end+0x1ee4bc>
 6a8:	42018e02 	andmi	r8, r1, #2, 28
 6ac:	00040b0c 	andeq	r0, r4, ip, lsl #22
 6b0:	00000018 	andeq	r0, r0, r8, lsl r0
 6b4:	0000042c 	andeq	r0, r0, ip, lsr #8
 6b8:	00012dd8 	ldrdeq	r2, [r1], -r8
 6bc:	00000118 	andeq	r0, r0, r8, lsl r1
 6c0:	8b080e42 	blhi	203fd0 <__bss_end+0x1ee4d8>
 6c4:	42018e02 	andmi	r8, r1, #2, 28
 6c8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 6cc:	00000014 	andeq	r0, r0, r4, lsl r0
 6d0:	0000042c 	andeq	r0, r0, ip, lsr #8
 6d4:	00012ef0 	strdeq	r2, [r1], -r0
 6d8:	00000044 	andeq	r0, r0, r4, asr #32
 6dc:	8b040e42 	blhi	103fec <__bss_end+0xee4f4>
 6e0:	0b0d4201 	bleq	350eec <__bss_end+0x33b3f4>
 6e4:	00000018 	andeq	r0, r0, r8, lsl r0
 6e8:	0000042c 	andeq	r0, r0, ip, lsr #8
 6ec:	00012f34 	andeq	r2, r1, r4, lsr pc
 6f0:	000000f4 	strdeq	r0, [r0], -r4
 6f4:	8b080e42 	blhi	204004 <__bss_end+0x1ee50c>
 6f8:	42018e02 	andmi	r8, r1, #2, 28
 6fc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 700:	00000014 	andeq	r0, r0, r4, lsl r0
 704:	0000042c 	andeq	r0, r0, ip, lsr #8
 708:	00013028 	andeq	r3, r1, r8, lsr #32
 70c:	00000024 	andeq	r0, r0, r4, lsr #32
 710:	8b040e42 	blhi	104020 <__bss_end+0xee528>
 714:	0b0d4201 	bleq	350f20 <__bss_end+0x33b428>
 718:	00000018 	andeq	r0, r0, r8, lsl r0
 71c:	0000042c 	andeq	r0, r0, ip, lsr #8
 720:	0001304c 	andeq	r3, r1, ip, asr #32
 724:	00000034 	andeq	r0, r0, r4, lsr r0
 728:	8b080e42 	blhi	204038 <__bss_end+0x1ee540>
 72c:	42018e02 	andmi	r8, r1, #2, 28
 730:	00040b0c 	andeq	r0, r4, ip, lsl #22
 734:	00000018 	andeq	r0, r0, r8, lsl r0
 738:	0000042c 	andeq	r0, r0, ip, lsr #8
 73c:	00013080 	andeq	r3, r1, r0, lsl #1
 740:	000000bc 	strheq	r0, [r0], -ip
 744:	8b080e42 	blhi	204054 <__bss_end+0x1ee55c>
 748:	42018e02 	andmi	r8, r1, #2, 28
 74c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 750:	00000018 	andeq	r0, r0, r8, lsl r0
 754:	0000042c 	andeq	r0, r0, ip, lsr #8
 758:	0001313c 	andeq	r3, r1, ip, lsr r1
 75c:	000000bc 	strheq	r0, [r0], -ip
 760:	8b080e42 	blhi	204070 <__bss_end+0x1ee578>
 764:	42018e02 	andmi	r8, r1, #2, 28
 768:	00040b0c 	andeq	r0, r4, ip, lsl #22
 76c:	00000018 	andeq	r0, r0, r8, lsl r0
 770:	0000042c 	andeq	r0, r0, ip, lsr #8
 774:	000131f8 	strdeq	r3, [r1], -r8
 778:	000000b8 	strheq	r0, [r0], -r8
 77c:	8b080e42 	blhi	20408c <__bss_end+0x1ee594>
 780:	42018e02 	andmi	r8, r1, #2, 28
 784:	00040b0c 	andeq	r0, r4, ip, lsl #22
 788:	00000018 	andeq	r0, r0, r8, lsl r0
 78c:	0000042c 	andeq	r0, r0, ip, lsr #8
 790:	000132b0 			; <UNDEFINED> instruction: 0x000132b0
 794:	000000b4 	strheq	r0, [r0], -r4
 798:	8b080e42 	blhi	2040a8 <__bss_end+0x1ee5b0>
 79c:	42018e02 	andmi	r8, r1, #2, 28
 7a0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 7a4:	00000018 	andeq	r0, r0, r8, lsl r0
 7a8:	0000042c 	andeq	r0, r0, ip, lsr #8
 7ac:	00013364 	andeq	r3, r1, r4, ror #6
 7b0:	000000b4 	strheq	r0, [r0], -r4
 7b4:	8b080e42 	blhi	2040c4 <__bss_end+0x1ee5cc>
 7b8:	42018e02 	andmi	r8, r1, #2, 28
 7bc:	00040b0c 	andeq	r0, r4, ip, lsl #22
 7c0:	00000018 	andeq	r0, r0, r8, lsl r0
 7c4:	0000042c 	andeq	r0, r0, ip, lsr #8
 7c8:	00013418 	andeq	r3, r1, r8, lsl r4
 7cc:	00000030 	andeq	r0, r0, r0, lsr r0
 7d0:	8b080e42 	blhi	2040e0 <__bss_end+0x1ee5e8>
 7d4:	42018e02 	andmi	r8, r1, #2, 28
 7d8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 7dc:	0000000c 	andeq	r0, r0, ip
 7e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 7e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 7e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 7ec:	00000014 	andeq	r0, r0, r4, lsl r0
 7f0:	000007dc 	ldrdeq	r0, [r0], -ip
 7f4:	00013448 	andeq	r3, r1, r8, asr #8
 7f8:	00000020 	andeq	r0, r0, r0, lsr #32
 7fc:	8b040e42 	blhi	10410c <__bss_end+0xee614>
 800:	0b0d4201 	bleq	35100c <__bss_end+0x33b514>
 804:	00000014 	andeq	r0, r0, r4, lsl r0
 808:	000007dc 	ldrdeq	r0, [r0], -ip
 80c:	00013468 	andeq	r3, r1, r8, ror #8
 810:	00000020 	andeq	r0, r0, r0, lsr #32
 814:	8b040e42 	blhi	104124 <__bss_end+0xee62c>
 818:	0b0d4201 	bleq	351024 <__bss_end+0x33b52c>
 81c:	0000001c 	andeq	r0, r0, ip, lsl r0
 820:	000007dc 	ldrdeq	r0, [r0], -ip
 824:	00013488 	andeq	r3, r1, r8, lsl #9
 828:	000000c4 	andeq	r0, r0, r4, asr #1
 82c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 830:	8b038504 	blhi	e1c48 <__bss_end+0xcc150>
 834:	42018e02 	andmi	r8, r1, #2, 28
 838:	00040b0c 	andeq	r0, r4, ip, lsl #22
 83c:	00000014 	andeq	r0, r0, r4, lsl r0
 840:	000007dc 	ldrdeq	r0, [r0], -ip
 844:	0001354c 	andeq	r3, r1, ip, asr #10
 848:	00000020 	andeq	r0, r0, r0, lsr #32
 84c:	8b040e42 	blhi	10415c <__bss_end+0xee664>
 850:	0b0d4201 	bleq	35105c <__bss_end+0x33b564>
 854:	00000014 	andeq	r0, r0, r4, lsl r0
 858:	000007dc 	ldrdeq	r0, [r0], -ip
 85c:	0001356c 	andeq	r3, r1, ip, ror #10
 860:	0000007c 	andeq	r0, r0, ip, ror r0
 864:	8b040e42 	blhi	104174 <__bss_end+0xee67c>
 868:	0b0d4201 	bleq	351074 <__bss_end+0x33b57c>
 86c:	00000018 	andeq	r0, r0, r8, lsl r0
 870:	000007dc 	ldrdeq	r0, [r0], -ip
 874:	000135e8 	andeq	r3, r1, r8, ror #11
 878:	00000084 	andeq	r0, r0, r4, lsl #1
 87c:	8b080e42 	blhi	20418c <__bss_end+0x1ee694>
 880:	42018e02 	andmi	r8, r1, #2, 28
 884:	00040b0c 	andeq	r0, r4, ip, lsl #22
 888:	00000014 	andeq	r0, r0, r4, lsl r0
 88c:	000007dc 	ldrdeq	r0, [r0], -ip
 890:	0001366c 	andeq	r3, r1, ip, ror #12
 894:	000000cc 	andeq	r0, r0, ip, asr #1
 898:	8b040e42 	blhi	1041a8 <__bss_end+0xee6b0>
 89c:	0b0d4201 	bleq	3510a8 <__bss_end+0x33b5b0>
 8a0:	00000014 	andeq	r0, r0, r4, lsl r0
 8a4:	000007dc 	ldrdeq	r0, [r0], -ip
 8a8:	00013738 	andeq	r3, r1, r8, lsr r7
 8ac:	000000cc 	andeq	r0, r0, ip, asr #1
 8b0:	8b040e42 	blhi	1041c0 <__bss_end+0xee6c8>
 8b4:	0b0d4201 	bleq	3510c0 <__bss_end+0x33b5c8>
 8b8:	00000018 	andeq	r0, r0, r8, lsl r0
 8bc:	000007dc 	ldrdeq	r0, [r0], -ip
 8c0:	00013804 	andeq	r3, r1, r4, lsl #16
 8c4:	00000018 	andeq	r0, r0, r8, lsl r0
 8c8:	8b080e42 	blhi	2041d8 <__bss_end+0x1ee6e0>
 8cc:	42018e02 	andmi	r8, r1, #2, 28
 8d0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 8d4:	00000018 	andeq	r0, r0, r8, lsl r0
 8d8:	000007dc 	ldrdeq	r0, [r0], -ip
 8dc:	0001381c 	andeq	r3, r1, ip, lsl r8
 8e0:	00000018 	andeq	r0, r0, r8, lsl r0
 8e4:	8b080e42 	blhi	2041f4 <__bss_end+0x1ee6fc>
 8e8:	42018e02 	andmi	r8, r1, #2, 28
 8ec:	00040b0c 	andeq	r0, r4, ip, lsl #22
 8f0:	0000000c 	andeq	r0, r0, ip
 8f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8f8:	7c020001 	stcvc	0, cr0, [r2], {1}
 8fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 900:	00000014 	andeq	r0, r0, r4, lsl r0
 904:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 908:	00013834 	andeq	r3, r1, r4, lsr r8
 90c:	000000d4 	ldrdeq	r0, [r0], -r4
 910:	8b040e42 	blhi	104220 <__bss_end+0xee728>
 914:	0b0d4201 	bleq	351120 <__bss_end+0x33b628>
 918:	00000018 	andeq	r0, r0, r8, lsl r0
 91c:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 920:	00013908 	andeq	r3, r1, r8, lsl #18
 924:	00000030 	andeq	r0, r0, r0, lsr r0
 928:	8b080e42 	blhi	204238 <__bss_end+0x1ee740>
 92c:	42018e02 	andmi	r8, r1, #2, 28
 930:	00040b0c 	andeq	r0, r4, ip, lsl #22
 934:	00000014 	andeq	r0, r0, r4, lsl r0
 938:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 93c:	00013938 	andeq	r3, r1, r8, lsr r9
 940:	000000c4 	andeq	r0, r0, r4, asr #1
 944:	8b040e42 	blhi	104254 <__bss_end+0xee75c>
 948:	0b0d4201 	bleq	351154 <__bss_end+0x33b65c>
 94c:	00000014 	andeq	r0, r0, r4, lsl r0
 950:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 954:	000139fc 	strdeq	r3, [r1], -ip
 958:	00000058 	andeq	r0, r0, r8, asr r0
 95c:	8b040e42 	blhi	10426c <__bss_end+0xee774>
 960:	0b0d4201 	bleq	35116c <__bss_end+0x33b674>
 964:	00000014 	andeq	r0, r0, r4, lsl r0
 968:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 96c:	00013a54 	andeq	r3, r1, r4, asr sl
 970:	000001d8 	ldrdeq	r0, [r0], -r8
 974:	8b040e42 	blhi	104284 <__bss_end+0xee78c>
 978:	0b0d4201 	bleq	351184 <__bss_end+0x33b68c>
 97c:	00000014 	andeq	r0, r0, r4, lsl r0
 980:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 984:	00013c2c 	andeq	r3, r1, ip, lsr #24
 988:	000001e0 	andeq	r0, r0, r0, ror #3
 98c:	8b040e42 	blhi	10429c <__bss_end+0xee7a4>
 990:	0b0d4201 	bleq	35119c <__bss_end+0x33b6a4>
 994:	00000014 	andeq	r0, r0, r4, lsl r0
 998:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 99c:	00013e0c 	andeq	r3, r1, ip, lsl #28
 9a0:	00000054 	andeq	r0, r0, r4, asr r0
 9a4:	8b040e42 	blhi	1042b4 <__bss_end+0xee7bc>
 9a8:	0b0d4201 	bleq	3511b4 <__bss_end+0x33b6bc>
 9ac:	0000000c 	andeq	r0, r0, ip
 9b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9b4:	7c020001 	stcvc	0, cr0, [r2], {1}
 9b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9bc:	00000018 	andeq	r0, r0, r8, lsl r0
 9c0:	000009ac 	andeq	r0, r0, ip, lsr #19
 9c4:	00013e60 	andeq	r3, r1, r0, ror #28
 9c8:	000001c4 	andeq	r0, r0, r4, asr #3
 9cc:	8b080e42 	blhi	2042dc <__bss_end+0x1ee7e4>
 9d0:	42018e02 	andmi	r8, r1, #2, 28
 9d4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 9d8:	00000018 	andeq	r0, r0, r8, lsl r0
 9dc:	000009ac 	andeq	r0, r0, ip, lsr #19
 9e0:	00014024 	andeq	r4, r1, r4, lsr #32
 9e4:	00000078 	andeq	r0, r0, r8, ror r0
 9e8:	8b080e42 	blhi	2042f8 <__bss_end+0x1ee800>
 9ec:	42018e02 	andmi	r8, r1, #2, 28
 9f0:	00040b0c 	andeq	r0, r4, ip, lsl #22
 9f4:	00000014 	andeq	r0, r0, r4, lsl r0
 9f8:	000009ac 	andeq	r0, r0, ip, lsr #19
 9fc:	0001409c 	muleq	r1, ip, r0
 a00:	00000024 	andeq	r0, r0, r4, lsr #32
 a04:	8b040e42 	blhi	104314 <__bss_end+0xee81c>
 a08:	0b0d4201 	bleq	351214 <__bss_end+0x33b71c>
 a0c:	00000014 	andeq	r0, r0, r4, lsl r0
 a10:	000009ac 	andeq	r0, r0, ip, lsr #19
 a14:	000140c0 	andeq	r4, r1, r0, asr #1
 a18:	00000014 	andeq	r0, r0, r4, lsl r0
 a1c:	8b040e42 	blhi	10432c <__bss_end+0xee834>
 a20:	0b0d4201 	bleq	35122c <__bss_end+0x33b734>
 a24:	00000014 	andeq	r0, r0, r4, lsl r0
 a28:	000009ac 	andeq	r0, r0, ip, lsr #19
 a2c:	000140d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
 a30:	000000d4 	ldrdeq	r0, [r0], -r4
 a34:	8b040e42 	blhi	104344 <__bss_end+0xee84c>
 a38:	0b0d4201 	bleq	351244 <__bss_end+0x33b74c>
 a3c:	00000014 	andeq	r0, r0, r4, lsl r0
 a40:	000009ac 	andeq	r0, r0, ip, lsr #19
 a44:	000141a8 	andeq	r4, r1, r8, lsr #3
 a48:	00000150 	andeq	r0, r0, r0, asr r1
 a4c:	8b040e42 	blhi	10435c <__bss_end+0xee864>
 a50:	0b0d4201 	bleq	35125c <__bss_end+0x33b764>
 a54:	0000000c 	andeq	r0, r0, ip
 a58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a5c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a60:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a64:	00000018 	andeq	r0, r0, r8, lsl r0
 a68:	00000a54 	andeq	r0, r0, r4, asr sl
 a6c:	00014310 	andeq	r4, r1, r0, lsl r3
 a70:	0000003c 	andeq	r0, r0, ip, lsr r0
 a74:	8b080e42 	blhi	204384 <__bss_end+0x1ee88c>
 a78:	42018e02 	andmi	r8, r1, #2, 28
 a7c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 a80:	00000018 	andeq	r0, r0, r8, lsl r0
 a84:	00000a54 	andeq	r0, r0, r4, asr sl
 a88:	0001434c 	andeq	r4, r1, ip, asr #6
 a8c:	00000044 	andeq	r0, r0, r4, asr #32
 a90:	8b080e42 	blhi	2043a0 <__bss_end+0x1ee8a8>
 a94:	42018e02 	andmi	r8, r1, #2, 28
 a98:	00040b0c 	andeq	r0, r4, ip, lsl #22
 a9c:	00000018 	andeq	r0, r0, r8, lsl r0
 aa0:	00000a54 	andeq	r0, r0, r4, asr sl
 aa4:	00014390 	muleq	r1, r0, r3
 aa8:	000000a0 	andeq	r0, r0, r0, lsr #1
 aac:	8b080e42 	blhi	2043bc <__bss_end+0x1ee8c4>
 ab0:	42018e02 	andmi	r8, r1, #2, 28
 ab4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 ab8:	0000000c 	andeq	r0, r0, ip
 abc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ac0:	7c020001 	stcvc	0, cr0, [r2], {1}
 ac4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ac8:	00000018 	andeq	r0, r0, r8, lsl r0
 acc:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
 ad0:	0001445c 	andeq	r4, r1, ip, asr r4
 ad4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 ad8:	84100e44 	ldrhi	r0, [r0], #-3652	; 0xe44
 adc:	86038504 	strhi	r8, [r3], -r4, lsl #10
 ae0:	00018702 	andeq	r8, r1, r2, lsl #14
 ae4:	0000000c 	andeq	r0, r0, ip
 ae8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 aec:	7c020001 	stcvc	0, cr0, [r2], {1}
 af0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 af4:	00000018 	andeq	r0, r0, r8, lsl r0
 af8:	00000ae4 	andeq	r0, r0, r4, ror #21
 afc:	0001454c 	andeq	r4, r1, ip, asr #10
 b00:	000000f4 	strdeq	r0, [r0], -r4
 b04:	840c0e44 	strhi	r0, [ip], #-3652	; 0xe44
 b08:	86028503 	strhi	r8, [r2], -r3, lsl #10
 b0c:	00000001 	andeq	r0, r0, r1
 b10:	0000000c 	andeq	r0, r0, ip
 b14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b18:	7c020001 	stcvc	0, cr0, [r2], {1}
 b1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b20:	00000018 	andeq	r0, r0, r8, lsl r0
 b24:	00000b10 	andeq	r0, r0, r0, lsl fp
 b28:	00014640 	andeq	r4, r1, r0, asr #12
 b2c:	000000d4 	ldrdeq	r0, [r0], -r4
 b30:	840c0e46 	strhi	r0, [ip], #-3654	; 0xe46
 b34:	86028503 	strhi	r8, [r2], -r3, lsl #10
 b38:	00000001 	andeq	r0, r0, r1
